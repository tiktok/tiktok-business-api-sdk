# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class FilteringBcMemberGet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'keyword': 'str',
        'relation_status': 'str',
        'user_role': 'str'
    }

    attribute_map = {
        'keyword': 'keyword',
        'relation_status': 'relation_status',
        'user_role': 'user_role'
    }

    def __init__(self, keyword=None, relation_status=None, user_role=None):  # noqa: E501
        """FilteringBcMemberGet - a model defined in Swagger"""  # noqa: E501
        self._keyword = None
        self._relation_status = None
        self._user_role = None
        self.discriminator = None
        if keyword is not None:
            self.keyword = keyword
        if relation_status is not None:
            self.relation_status = relation_status
        if user_role is not None:
            self.user_role = user_role

    @property
    def keyword(self):
        """Gets the keyword of this FilteringBcMemberGet.  # noqa: E501


        :return: The keyword of this FilteringBcMemberGet.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this FilteringBcMemberGet.


        :param keyword: The keyword of this FilteringBcMemberGet.  # noqa: E501
        :type: str
        """

        self._keyword = keyword

    @property
    def relation_status(self):
        """Gets the relation_status of this FilteringBcMemberGet.  # noqa: E501


        :return: The relation_status of this FilteringBcMemberGet.  # noqa: E501
        :rtype: str
        """
        return self._relation_status

    @relation_status.setter
    def relation_status(self, relation_status):
        """Sets the relation_status of this FilteringBcMemberGet.


        :param relation_status: The relation_status of this FilteringBcMemberGet.  # noqa: E501
        :type: str
        """

        self._relation_status = relation_status

    @property
    def user_role(self):
        """Gets the user_role of this FilteringBcMemberGet.  # noqa: E501


        :return: The user_role of this FilteringBcMemberGet.  # noqa: E501
        :rtype: str
        """
        return self._user_role

    @user_role.setter
    def user_role(self, user_role):
        """Sets the user_role of this FilteringBcMemberGet.


        :param user_role: The user_role of this FilteringBcMemberGet.  # noqa: E501
        :type: str
        """

        self._user_role = user_role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilteringBcMemberGet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilteringBcMemberGet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
