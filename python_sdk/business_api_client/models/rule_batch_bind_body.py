# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class RuleBatchBindBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'bind_info': 'list[OptimizerrulebatchBindBindInfo]',
        'lang': 'str'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'bind_info': 'bind_info',
        'lang': 'lang'
    }

    def __init__(self, advertiser_id=None, bind_info=None, lang='EN'):  # noqa: E501
        """RuleBatchBindBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._bind_info = None
        self._lang = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        self.bind_info = bind_info
        if lang is not None:
            self.lang = lang

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this RuleBatchBindBody.  # noqa: E501


        :return: The advertiser_id of this RuleBatchBindBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this RuleBatchBindBody.


        :param advertiser_id: The advertiser_id of this RuleBatchBindBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def bind_info(self):
        """Gets the bind_info of this RuleBatchBindBody.  # noqa: E501


        :return: The bind_info of this RuleBatchBindBody.  # noqa: E501
        :rtype: list[OptimizerrulebatchBindBindInfo]
        """
        return self._bind_info

    @bind_info.setter
    def bind_info(self, bind_info):
        """Sets the bind_info of this RuleBatchBindBody.


        :param bind_info: The bind_info of this RuleBatchBindBody.  # noqa: E501
        :type: list[OptimizerrulebatchBindBindInfo]
        """
        if bind_info is None:
            raise ValueError("Invalid value for `bind_info`, must not be `None`")  # noqa: E501

        self._bind_info = bind_info

    @property
    def lang(self):
        """Gets the lang of this RuleBatchBindBody.  # noqa: E501


        :return: The lang of this RuleBatchBindBody.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this RuleBatchBindBody.


        :param lang: The lang of this RuleBatchBindBody.  # noqa: E501
        :type: str
        """

        self._lang = lang

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleBatchBindBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleBatchBindBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
