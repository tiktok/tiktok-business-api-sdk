# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class OpenApiv13dmpsavedAudiencecreateActions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_category_ids': 'list[str]',
        'action_period': 'int',
        'action_scene': 'str',
        'video_user_actions': 'list[str]'
    }

    attribute_map = {
        'action_category_ids': 'action_category_ids',
        'action_period': 'action_period',
        'action_scene': 'action_scene',
        'video_user_actions': 'video_user_actions'
    }

    def __init__(self, action_category_ids=None, action_period=None, action_scene=None, video_user_actions=None):  # noqa: E501
        """OpenApiv13dmpsavedAudiencecreateActions - a model defined in Swagger"""  # noqa: E501
        self._action_category_ids = None
        self._action_period = None
        self._action_scene = None
        self._video_user_actions = None
        self.discriminator = None
        if action_category_ids is not None:
            self.action_category_ids = action_category_ids
        if action_period is not None:
            self.action_period = action_period
        if action_scene is not None:
            self.action_scene = action_scene
        if video_user_actions is not None:
            self.video_user_actions = video_user_actions

    @property
    def action_category_ids(self):
        """Gets the action_category_ids of this OpenApiv13dmpsavedAudiencecreateActions.  # noqa: E501

        Required when actions has been specified and valid only when TikTok placement is the only placement selected in your ad group. IDs of the action categories (behaviors) or hashtags that you want to target. You can get action category IDs via /tool/action_category/.  # noqa: E501

        :return: The action_category_ids of this OpenApiv13dmpsavedAudiencecreateActions.  # noqa: E501
        :rtype: list[str]
        """
        return self._action_category_ids

    @action_category_ids.setter
    def action_category_ids(self, action_category_ids):
        """Sets the action_category_ids of this OpenApiv13dmpsavedAudiencecreateActions.

        Required when actions has been specified and valid only when TikTok placement is the only placement selected in your ad group. IDs of the action categories (behaviors) or hashtags that you want to target. You can get action category IDs via /tool/action_category/.  # noqa: E501

        :param action_category_ids: The action_category_ids of this OpenApiv13dmpsavedAudiencecreateActions.  # noqa: E501
        :type: list[str]
        """

        self._action_category_ids = action_category_ids

    @property
    def action_period(self):
        """Gets the action_period of this OpenApiv13dmpsavedAudiencecreateActions.  # noqa: E501

        Required when actions has been specified. The time period to include actions from. Enum values: 0, 7, 15. If action_scene is CREATOR_RELATED or HASHTAG_RELATED, 0 will be used regardless of the value you pass in. 0 means that there is no definite timeframe to select actions from.  # noqa: E501

        :return: The action_period of this OpenApiv13dmpsavedAudiencecreateActions.  # noqa: E501
        :rtype: int
        """
        return self._action_period

    @action_period.setter
    def action_period(self, action_period):
        """Sets the action_period of this OpenApiv13dmpsavedAudiencecreateActions.

        Required when actions has been specified. The time period to include actions from. Enum values: 0, 7, 15. If action_scene is CREATOR_RELATED or HASHTAG_RELATED, 0 will be used regardless of the value you pass in. 0 means that there is no definite timeframe to select actions from.  # noqa: E501

        :param action_period: The action_period of this OpenApiv13dmpsavedAudiencecreateActions.  # noqa: E501
        :type: int
        """

        self._action_period = action_period

    @property
    def action_scene(self):
        """Gets the action_scene of this OpenApiv13dmpsavedAudiencecreateActions.  # noqa: E501

        Required when actions has been specified. Where you can collect information about user actions. Enum values: VIDEO_RELATED, CREATOR_RELATED, HASHTAG_RELATED.  # noqa: E501

        :return: The action_scene of this OpenApiv13dmpsavedAudiencecreateActions.  # noqa: E501
        :rtype: str
        """
        return self._action_scene

    @action_scene.setter
    def action_scene(self, action_scene):
        """Sets the action_scene of this OpenApiv13dmpsavedAudiencecreateActions.

        Required when actions has been specified. Where you can collect information about user actions. Enum values: VIDEO_RELATED, CREATOR_RELATED, HASHTAG_RELATED.  # noqa: E501

        :param action_scene: The action_scene of this OpenApiv13dmpsavedAudiencecreateActions.  # noqa: E501
        :type: str
        """

        self._action_scene = action_scene

    @property
    def video_user_actions(self):
        """Gets the video_user_actions of this OpenApiv13dmpsavedAudiencecreateActions.  # noqa: E501

        Required when actions has been specified. Video-related Actions. If action_scene is VIDEO_RELATED, the allowed values are: WATCHED_TO_END,LIKED,COMMENTED,SHARED. If action_scene is CREATOR_RELATED, the allowed values are: FOLLOWING, VIEW_HOMEPAGE. If action_scene is HASHTAG_RELATED, the allowed value is VIEW_HASHTAG.  # noqa: E501

        :return: The video_user_actions of this OpenApiv13dmpsavedAudiencecreateActions.  # noqa: E501
        :rtype: list[str]
        """
        return self._video_user_actions

    @video_user_actions.setter
    def video_user_actions(self, video_user_actions):
        """Sets the video_user_actions of this OpenApiv13dmpsavedAudiencecreateActions.

        Required when actions has been specified. Video-related Actions. If action_scene is VIDEO_RELATED, the allowed values are: WATCHED_TO_END,LIKED,COMMENTED,SHARED. If action_scene is CREATOR_RELATED, the allowed values are: FOLLOWING, VIEW_HOMEPAGE. If action_scene is HASHTAG_RELATED, the allowed value is VIEW_HASHTAG.  # noqa: E501

        :param video_user_actions: The video_user_actions of this OpenApiv13dmpsavedAudiencecreateActions.  # noqa: E501
        :type: list[str]
        """

        self._video_user_actions = video_user_actions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenApiv13dmpsavedAudiencecreateActions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenApiv13dmpsavedAudiencecreateActions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
