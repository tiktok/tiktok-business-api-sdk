# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filters': 'list[OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetFilters]',
        'operator': 'str'
    }

    attribute_map = {
        'filters': 'filters',
        'operator': 'operator'
    }

    def __init__(self, filters=None, operator=None):  # noqa: E501
        """OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSet - a model defined in Swagger"""  # noqa: E501
        self._filters = None
        self._operator = None
        self.discriminator = None
        self.filters = filters
        self.operator = operator

    @property
    def filters(self):
        """Gets the filters of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSet.  # noqa: E501

        Required when exclusion_rule_set is passed. An array of filters on previous audience actions and optionally also on URL keywords or parameters. Max size: 1.  # noqa: E501

        :return: The filters of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSet.  # noqa: E501
        :rtype: list[OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetFilters]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSet.

        Required when exclusion_rule_set is passed. An array of filters on previous audience actions and optionally also on URL keywords or parameters. Max size: 1.  # noqa: E501

        :param filters: The filters of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSet.  # noqa: E501
        :type: list[OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetFilters]
        """
        if filters is None:
            raise ValueError("Invalid value for `filters`, must not be `None`")  # noqa: E501

        self._filters = filters

    @property
    def operator(self):
        """Gets the operator of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSet.  # noqa: E501

        Required when exclusion_rule_set is passed. Operator between filters in the filters object array. Enum value: OR. Within each exclusion rule, you can only specify one object in filters.  # noqa: E501

        :return: The operator of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSet.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSet.

        Required when exclusion_rule_set is passed. Operator between filters in the filters object array. Enum value: OR. Within each exclusion rule, you can only specify one object in filters.  # noqa: E501

        :param operator: The operator of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSet.  # noqa: E501
        :type: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501

        self._operator = operator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
