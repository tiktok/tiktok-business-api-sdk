# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class FilteringAdvertiserTransactionGet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_date': 'str',
        'funds_type': 'list[str]',
        'keyword': 'str',
        'start_date': 'str',
        'summary_by_account': 'bool',
        'transfer_type': 'str'
    }

    attribute_map = {
        'end_date': 'end_date',
        'funds_type': 'funds_type',
        'keyword': 'keyword',
        'start_date': 'start_date',
        'summary_by_account': 'summary_by_account',
        'transfer_type': 'transfer_type'
    }

    def __init__(self, end_date=None, funds_type=None, keyword=None, start_date=None, summary_by_account=False, transfer_type=None):  # noqa: E501
        """FilteringAdvertiserTransactionGet - a model defined in Swagger"""  # noqa: E501
        self._end_date = None
        self._funds_type = None
        self._keyword = None
        self._start_date = None
        self._summary_by_account = None
        self._transfer_type = None
        self.discriminator = None
        if end_date is not None:
            self.end_date = end_date
        if funds_type is not None:
            self.funds_type = funds_type
        if keyword is not None:
            self.keyword = keyword
        if start_date is not None:
            self.start_date = start_date
        if summary_by_account is not None:
            self.summary_by_account = summary_by_account
        if transfer_type is not None:
            self.transfer_type = transfer_type

    @property
    def end_date(self):
        """Gets the end_date of this FilteringAdvertiserTransactionGet.  # noqa: E501


        :return: The end_date of this FilteringAdvertiserTransactionGet.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this FilteringAdvertiserTransactionGet.


        :param end_date: The end_date of this FilteringAdvertiserTransactionGet.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def funds_type(self):
        """Gets the funds_type of this FilteringAdvertiserTransactionGet.  # noqa: E501


        :return: The funds_type of this FilteringAdvertiserTransactionGet.  # noqa: E501
        :rtype: list[str]
        """
        return self._funds_type

    @funds_type.setter
    def funds_type(self, funds_type):
        """Sets the funds_type of this FilteringAdvertiserTransactionGet.


        :param funds_type: The funds_type of this FilteringAdvertiserTransactionGet.  # noqa: E501
        :type: list[str]
        """

        self._funds_type = funds_type

    @property
    def keyword(self):
        """Gets the keyword of this FilteringAdvertiserTransactionGet.  # noqa: E501


        :return: The keyword of this FilteringAdvertiserTransactionGet.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this FilteringAdvertiserTransactionGet.


        :param keyword: The keyword of this FilteringAdvertiserTransactionGet.  # noqa: E501
        :type: str
        """

        self._keyword = keyword

    @property
    def start_date(self):
        """Gets the start_date of this FilteringAdvertiserTransactionGet.  # noqa: E501


        :return: The start_date of this FilteringAdvertiserTransactionGet.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this FilteringAdvertiserTransactionGet.


        :param start_date: The start_date of this FilteringAdvertiserTransactionGet.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def summary_by_account(self):
        """Gets the summary_by_account of this FilteringAdvertiserTransactionGet.  # noqa: E501


        :return: The summary_by_account of this FilteringAdvertiserTransactionGet.  # noqa: E501
        :rtype: bool
        """
        return self._summary_by_account

    @summary_by_account.setter
    def summary_by_account(self, summary_by_account):
        """Sets the summary_by_account of this FilteringAdvertiserTransactionGet.


        :param summary_by_account: The summary_by_account of this FilteringAdvertiserTransactionGet.  # noqa: E501
        :type: bool
        """

        self._summary_by_account = summary_by_account

    @property
    def transfer_type(self):
        """Gets the transfer_type of this FilteringAdvertiserTransactionGet.  # noqa: E501


        :return: The transfer_type of this FilteringAdvertiserTransactionGet.  # noqa: E501
        :rtype: str
        """
        return self._transfer_type

    @transfer_type.setter
    def transfer_type(self, transfer_type):
        """Sets the transfer_type of this FilteringAdvertiserTransactionGet.


        :param transfer_type: The transfer_type of this FilteringAdvertiserTransactionGet.  # noqa: E501
        :type: str
        """

        self._transfer_type = transfer_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilteringAdvertiserTransactionGet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilteringAdvertiserTransactionGet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
