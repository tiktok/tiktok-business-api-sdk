# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class OptimizerRuleCreateBodyConditions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'calculation_type': 'str',
        'match_type': 'str',
        'range_type': 'str',
        'subject_type': 'str',
        'values': 'list[str]'
    }

    attribute_map = {
        'calculation_type': 'calculation_type',
        'match_type': 'match_type',
        'range_type': 'range_type',
        'subject_type': 'subject_type',
        'values': 'values'
    }

    def __init__(self, calculation_type=None, match_type=None, range_type=None, subject_type=None, values=None):  # noqa: E501
        """OptimizerRuleCreateBodyConditions - a model defined in Swagger"""  # noqa: E501
        self._calculation_type = None
        self._match_type = None
        self._range_type = None
        self._subject_type = None
        self._values = None
        self.discriminator = None
        if calculation_type is not None:
            self.calculation_type = calculation_type
        if match_type is not None:
            self.match_type = match_type
        if range_type is not None:
            self.range_type = range_type
        self.subject_type = subject_type
        if values is not None:
            self.values = values

    @property
    def calculation_type(self):
        """Gets the calculation_type of this OptimizerRuleCreateBodyConditions.  # noqa: E501


        :return: The calculation_type of this OptimizerRuleCreateBodyConditions.  # noqa: E501
        :rtype: str
        """
        return self._calculation_type

    @calculation_type.setter
    def calculation_type(self, calculation_type):
        """Sets the calculation_type of this OptimizerRuleCreateBodyConditions.


        :param calculation_type: The calculation_type of this OptimizerRuleCreateBodyConditions.  # noqa: E501
        :type: str
        """

        self._calculation_type = calculation_type

    @property
    def match_type(self):
        """Gets the match_type of this OptimizerRuleCreateBodyConditions.  # noqa: E501


        :return: The match_type of this OptimizerRuleCreateBodyConditions.  # noqa: E501
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this OptimizerRuleCreateBodyConditions.


        :param match_type: The match_type of this OptimizerRuleCreateBodyConditions.  # noqa: E501
        :type: str
        """

        self._match_type = match_type

    @property
    def range_type(self):
        """Gets the range_type of this OptimizerRuleCreateBodyConditions.  # noqa: E501


        :return: The range_type of this OptimizerRuleCreateBodyConditions.  # noqa: E501
        :rtype: str
        """
        return self._range_type

    @range_type.setter
    def range_type(self, range_type):
        """Sets the range_type of this OptimizerRuleCreateBodyConditions.


        :param range_type: The range_type of this OptimizerRuleCreateBodyConditions.  # noqa: E501
        :type: str
        """

        self._range_type = range_type

    @property
    def subject_type(self):
        """Gets the subject_type of this OptimizerRuleCreateBodyConditions.  # noqa: E501


        :return: The subject_type of this OptimizerRuleCreateBodyConditions.  # noqa: E501
        :rtype: str
        """
        return self._subject_type

    @subject_type.setter
    def subject_type(self, subject_type):
        """Sets the subject_type of this OptimizerRuleCreateBodyConditions.


        :param subject_type: The subject_type of this OptimizerRuleCreateBodyConditions.  # noqa: E501
        :type: str
        """
        if subject_type is None:
            raise ValueError("Invalid value for `subject_type`, must not be `None`")  # noqa: E501

        self._subject_type = subject_type

    @property
    def values(self):
        """Gets the values of this OptimizerRuleCreateBodyConditions.  # noqa: E501


        :return: The values of this OptimizerRuleCreateBodyConditions.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this OptimizerRuleCreateBodyConditions.


        :param values: The values of this OptimizerRuleCreateBodyConditions.  # noqa: E501
        :type: list[str]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptimizerRuleCreateBodyConditions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizerRuleCreateBodyConditions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
