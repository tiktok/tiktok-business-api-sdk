# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class LinkUpdateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_ids': 'list[str]',
        'bc_id': 'str',
        'pixel_code': 'str',
        'relation_status': 'str'
    }

    attribute_map = {
        'advertiser_ids': 'advertiser_ids',
        'bc_id': 'bc_id',
        'pixel_code': 'pixel_code',
        'relation_status': 'relation_status'
    }

    def __init__(self, advertiser_ids=None, bc_id=None, pixel_code=None, relation_status=None):  # noqa: E501
        """LinkUpdateBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_ids = None
        self._bc_id = None
        self._pixel_code = None
        self._relation_status = None
        self.discriminator = None
        self.advertiser_ids = advertiser_ids
        self.bc_id = bc_id
        self.pixel_code = pixel_code
        self.relation_status = relation_status

    @property
    def advertiser_ids(self):
        """Gets the advertiser_ids of this LinkUpdateBody.  # noqa: E501


        :return: The advertiser_ids of this LinkUpdateBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._advertiser_ids

    @advertiser_ids.setter
    def advertiser_ids(self, advertiser_ids):
        """Sets the advertiser_ids of this LinkUpdateBody.


        :param advertiser_ids: The advertiser_ids of this LinkUpdateBody.  # noqa: E501
        :type: list[str]
        """
        if advertiser_ids is None:
            raise ValueError("Invalid value for `advertiser_ids`, must not be `None`")  # noqa: E501

        self._advertiser_ids = advertiser_ids

    @property
    def bc_id(self):
        """Gets the bc_id of this LinkUpdateBody.  # noqa: E501


        :return: The bc_id of this LinkUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._bc_id

    @bc_id.setter
    def bc_id(self, bc_id):
        """Sets the bc_id of this LinkUpdateBody.


        :param bc_id: The bc_id of this LinkUpdateBody.  # noqa: E501
        :type: str
        """
        if bc_id is None:
            raise ValueError("Invalid value for `bc_id`, must not be `None`")  # noqa: E501

        self._bc_id = bc_id

    @property
    def pixel_code(self):
        """Gets the pixel_code of this LinkUpdateBody.  # noqa: E501


        :return: The pixel_code of this LinkUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._pixel_code

    @pixel_code.setter
    def pixel_code(self, pixel_code):
        """Sets the pixel_code of this LinkUpdateBody.


        :param pixel_code: The pixel_code of this LinkUpdateBody.  # noqa: E501
        :type: str
        """
        if pixel_code is None:
            raise ValueError("Invalid value for `pixel_code`, must not be `None`")  # noqa: E501

        self._pixel_code = pixel_code

    @property
    def relation_status(self):
        """Gets the relation_status of this LinkUpdateBody.  # noqa: E501


        :return: The relation_status of this LinkUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._relation_status

    @relation_status.setter
    def relation_status(self, relation_status):
        """Sets the relation_status of this LinkUpdateBody.


        :param relation_status: The relation_status of this LinkUpdateBody.  # noqa: E501
        :type: str
        """
        if relation_status is None:
            raise ValueError("Invalid value for `relation_status`, must not be `None`")  # noqa: E501

        self._relation_status = relation_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LinkUpdateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LinkUpdateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
