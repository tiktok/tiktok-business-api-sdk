# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class OptimizerRuleCreateBodyFrequencyInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'custom_frequency_type': 'str',
        'time': 'int',
        'type': 'str'
    }

    attribute_map = {
        'count': 'count',
        'custom_frequency_type': 'custom_frequency_type',
        'time': 'time',
        'type': 'type'
    }

    def __init__(self, count=None, custom_frequency_type=None, time=None, type=None):  # noqa: E501
        """OptimizerRuleCreateBodyFrequencyInfo - a model defined in Swagger"""  # noqa: E501
        self._count = None
        self._custom_frequency_type = None
        self._time = None
        self._type = None
        self.discriminator = None
        if count is not None:
            self.count = count
        if custom_frequency_type is not None:
            self.custom_frequency_type = custom_frequency_type
        if time is not None:
            self.time = time
        self.type = type

    @property
    def count(self):
        """Gets the count of this OptimizerRuleCreateBodyFrequencyInfo.  # noqa: E501


        :return: The count of this OptimizerRuleCreateBodyFrequencyInfo.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this OptimizerRuleCreateBodyFrequencyInfo.


        :param count: The count of this OptimizerRuleCreateBodyFrequencyInfo.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def custom_frequency_type(self):
        """Gets the custom_frequency_type of this OptimizerRuleCreateBodyFrequencyInfo.  # noqa: E501


        :return: The custom_frequency_type of this OptimizerRuleCreateBodyFrequencyInfo.  # noqa: E501
        :rtype: str
        """
        return self._custom_frequency_type

    @custom_frequency_type.setter
    def custom_frequency_type(self, custom_frequency_type):
        """Sets the custom_frequency_type of this OptimizerRuleCreateBodyFrequencyInfo.


        :param custom_frequency_type: The custom_frequency_type of this OptimizerRuleCreateBodyFrequencyInfo.  # noqa: E501
        :type: str
        """

        self._custom_frequency_type = custom_frequency_type

    @property
    def time(self):
        """Gets the time of this OptimizerRuleCreateBodyFrequencyInfo.  # noqa: E501


        :return: The time of this OptimizerRuleCreateBodyFrequencyInfo.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this OptimizerRuleCreateBodyFrequencyInfo.


        :param time: The time of this OptimizerRuleCreateBodyFrequencyInfo.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def type(self):
        """Gets the type of this OptimizerRuleCreateBodyFrequencyInfo.  # noqa: E501


        :return: The type of this OptimizerRuleCreateBodyFrequencyInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OptimizerRuleCreateBodyFrequencyInfo.


        :param type: The type of this OptimizerRuleCreateBodyFrequencyInfo.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptimizerRuleCreateBodyFrequencyInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizerRuleCreateBodyFrequencyInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
