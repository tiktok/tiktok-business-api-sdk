# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class CreativeportfoliocreateShowcaseProducts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'catalog_id': 'str',
        'item_group_id': 'str',
        'store_id': 'str'
    }

    attribute_map = {
        'catalog_id': 'catalog_id',
        'item_group_id': 'item_group_id',
        'store_id': 'store_id'
    }

    def __init__(self, catalog_id=None, item_group_id=None, store_id=None):  # noqa: E501
        """CreativeportfoliocreateShowcaseProducts - a model defined in Swagger"""  # noqa: E501
        self._catalog_id = None
        self._item_group_id = None
        self._store_id = None
        self.discriminator = None
        if catalog_id is not None:
            self.catalog_id = catalog_id
        if item_group_id is not None:
            self.item_group_id = item_group_id
        if store_id is not None:
            self.store_id = store_id

    @property
    def catalog_id(self):
        """Gets the catalog_id of this CreativeportfoliocreateShowcaseProducts.  # noqa: E501


        :return: The catalog_id of this CreativeportfoliocreateShowcaseProducts.  # noqa: E501
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this CreativeportfoliocreateShowcaseProducts.


        :param catalog_id: The catalog_id of this CreativeportfoliocreateShowcaseProducts.  # noqa: E501
        :type: str
        """

        self._catalog_id = catalog_id

    @property
    def item_group_id(self):
        """Gets the item_group_id of this CreativeportfoliocreateShowcaseProducts.  # noqa: E501


        :return: The item_group_id of this CreativeportfoliocreateShowcaseProducts.  # noqa: E501
        :rtype: str
        """
        return self._item_group_id

    @item_group_id.setter
    def item_group_id(self, item_group_id):
        """Sets the item_group_id of this CreativeportfoliocreateShowcaseProducts.


        :param item_group_id: The item_group_id of this CreativeportfoliocreateShowcaseProducts.  # noqa: E501
        :type: str
        """

        self._item_group_id = item_group_id

    @property
    def store_id(self):
        """Gets the store_id of this CreativeportfoliocreateShowcaseProducts.  # noqa: E501


        :return: The store_id of this CreativeportfoliocreateShowcaseProducts.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this CreativeportfoliocreateShowcaseProducts.


        :param store_id: The store_id of this CreativeportfoliocreateShowcaseProducts.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreativeportfoliocreateShowcaseProducts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreativeportfoliocreateShowcaseProducts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
