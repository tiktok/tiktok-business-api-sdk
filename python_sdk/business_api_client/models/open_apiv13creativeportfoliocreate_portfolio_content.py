# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class OpenApiv13creativeportfoliocreatePortfolioContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ad_text': 'str',
        'advanced_audio_info': 'OpenApiv13creativeportfoliocreateAdvancedAudioInfo',
        'advanced_gesture_icon': 'OpenApiv13creativeportfoliocreateAdvancedGestureIcon',
        'advanced_gesture_image': 'OpenApiv13creativeportfoliocreateAdvancedGestureIcon',
        'advanced_interact_shape': 'str',
        'advanced_interact_type': 'str',
        'app_id': 'str',
        'asset_content': 'str',
        'asset_ids': 'list[str]',
        'badge_image_info': 'OpenApiv13creativeportfoliocreateBadgeImageInfo',
        'badge_position': 'OpenApiv13creativeportfoliocreateBadgePosition',
        'badge_show_time': 'int',
        'call_to_action': 'str',
        'call_to_action_text': 'str',
        'card_image_index': 'int',
        'card_show_price': 'bool',
        'card_tags': 'list[str]',
        'card_type': 'str',
        'catalog_authorized_bc_id': 'str',
        'catalog_id': 'str',
        'category_label': 'str',
        'country_code': 'list[str]',
        'description': 'str',
        'dynamic_format': 'str',
        'identity_authorized_bc_id': 'str',
        'identity_id': 'str',
        'identity_type': 'str',
        'image_id': 'str',
        'item_group_ids': 'list[str]',
        'layouts': 'list[str]',
        'mobile_app_id': 'str',
        'product_set_id': 'str',
        'product_source': 'str',
        'product_specific_type': 'str',
        'profile_image': 'str',
        'sku_ids': 'list[str]',
        'sticker_param': 'OpenApiv13creativeportfoliocreateStickerParam',
        'store_authorized_bc_id': 'str',
        'store_id': 'str',
        'tags': 'list[str]',
        'vertical_video_strategy': 'str'
    }

    attribute_map = {
        'ad_text': 'ad_text',
        'advanced_audio_info': 'advanced_audio_info',
        'advanced_gesture_icon': 'advanced_gesture_icon',
        'advanced_gesture_image': 'advanced_gesture_image',
        'advanced_interact_shape': 'advanced_interact_shape',
        'advanced_interact_type': 'advanced_interact_type',
        'app_id': 'app_id',
        'asset_content': 'asset_content',
        'asset_ids': 'asset_ids',
        'badge_image_info': 'badge_image_info',
        'badge_position': 'badge_position',
        'badge_show_time': 'badge_show_time',
        'call_to_action': 'call_to_action',
        'call_to_action_text': 'call_to_action_text',
        'card_image_index': 'card_image_index',
        'card_show_price': 'card_show_price',
        'card_tags': 'card_tags',
        'card_type': 'card_type',
        'catalog_authorized_bc_id': 'catalog_authorized_bc_id',
        'catalog_id': 'catalog_id',
        'category_label': 'category_label',
        'country_code': 'country_code',
        'description': 'description',
        'dynamic_format': 'dynamic_format',
        'identity_authorized_bc_id': 'identity_authorized_bc_id',
        'identity_id': 'identity_id',
        'identity_type': 'identity_type',
        'image_id': 'image_id',
        'item_group_ids': 'item_group_ids',
        'layouts': 'layouts',
        'mobile_app_id': 'mobile_app_id',
        'product_set_id': 'product_set_id',
        'product_source': 'product_source',
        'product_specific_type': 'product_specific_type',
        'profile_image': 'profile_image',
        'sku_ids': 'sku_ids',
        'sticker_param': 'sticker_param',
        'store_authorized_bc_id': 'store_authorized_bc_id',
        'store_id': 'store_id',
        'tags': 'tags',
        'vertical_video_strategy': 'vertical_video_strategy'
    }

    def __init__(self, ad_text=None, advanced_audio_info=None, advanced_gesture_icon=None, advanced_gesture_image=None, advanced_interact_shape=None, advanced_interact_type=None, app_id=None, asset_content=None, asset_ids=None, badge_image_info=None, badge_position=None, badge_show_time=None, call_to_action=None, call_to_action_text=None, card_image_index=None, card_show_price=None, card_tags=None, card_type=None, catalog_authorized_bc_id=None, catalog_id=None, category_label=None, country_code=None, description=None, dynamic_format=None, identity_authorized_bc_id=None, identity_id=None, identity_type=None, image_id=None, item_group_ids=None, layouts=None, mobile_app_id=None, product_set_id=None, product_source=None, product_specific_type=None, profile_image=None, sku_ids=None, sticker_param=None, store_authorized_bc_id=None, store_id=None, tags=None, vertical_video_strategy=None):  # noqa: E501
        """OpenApiv13creativeportfoliocreatePortfolioContent - a model defined in Swagger"""  # noqa: E501
        self._ad_text = None
        self._advanced_audio_info = None
        self._advanced_gesture_icon = None
        self._advanced_gesture_image = None
        self._advanced_interact_shape = None
        self._advanced_interact_type = None
        self._app_id = None
        self._asset_content = None
        self._asset_ids = None
        self._badge_image_info = None
        self._badge_position = None
        self._badge_show_time = None
        self._call_to_action = None
        self._call_to_action_text = None
        self._card_image_index = None
        self._card_show_price = None
        self._card_tags = None
        self._card_type = None
        self._catalog_authorized_bc_id = None
        self._catalog_id = None
        self._category_label = None
        self._country_code = None
        self._description = None
        self._dynamic_format = None
        self._identity_authorized_bc_id = None
        self._identity_id = None
        self._identity_type = None
        self._image_id = None
        self._item_group_ids = None
        self._layouts = None
        self._mobile_app_id = None
        self._product_set_id = None
        self._product_source = None
        self._product_specific_type = None
        self._profile_image = None
        self._sku_ids = None
        self._sticker_param = None
        self._store_authorized_bc_id = None
        self._store_id = None
        self._tags = None
        self._vertical_video_strategy = None
        self.discriminator = None
        if ad_text is not None:
            self.ad_text = ad_text
        if advanced_audio_info is not None:
            self.advanced_audio_info = advanced_audio_info
        if advanced_gesture_icon is not None:
            self.advanced_gesture_icon = advanced_gesture_icon
        if advanced_gesture_image is not None:
            self.advanced_gesture_image = advanced_gesture_image
        if advanced_interact_shape is not None:
            self.advanced_interact_shape = advanced_interact_shape
        if advanced_interact_type is not None:
            self.advanced_interact_type = advanced_interact_type
        if app_id is not None:
            self.app_id = app_id
        if asset_content is not None:
            self.asset_content = asset_content
        if asset_ids is not None:
            self.asset_ids = asset_ids
        if badge_image_info is not None:
            self.badge_image_info = badge_image_info
        if badge_position is not None:
            self.badge_position = badge_position
        if badge_show_time is not None:
            self.badge_show_time = badge_show_time
        if call_to_action is not None:
            self.call_to_action = call_to_action
        if call_to_action_text is not None:
            self.call_to_action_text = call_to_action_text
        if card_image_index is not None:
            self.card_image_index = card_image_index
        if card_show_price is not None:
            self.card_show_price = card_show_price
        if card_tags is not None:
            self.card_tags = card_tags
        if card_type is not None:
            self.card_type = card_type
        if catalog_authorized_bc_id is not None:
            self.catalog_authorized_bc_id = catalog_authorized_bc_id
        if catalog_id is not None:
            self.catalog_id = catalog_id
        if category_label is not None:
            self.category_label = category_label
        if country_code is not None:
            self.country_code = country_code
        if description is not None:
            self.description = description
        if dynamic_format is not None:
            self.dynamic_format = dynamic_format
        if identity_authorized_bc_id is not None:
            self.identity_authorized_bc_id = identity_authorized_bc_id
        if identity_id is not None:
            self.identity_id = identity_id
        if identity_type is not None:
            self.identity_type = identity_type
        if image_id is not None:
            self.image_id = image_id
        if item_group_ids is not None:
            self.item_group_ids = item_group_ids
        if layouts is not None:
            self.layouts = layouts
        if mobile_app_id is not None:
            self.mobile_app_id = mobile_app_id
        if product_set_id is not None:
            self.product_set_id = product_set_id
        if product_source is not None:
            self.product_source = product_source
        if product_specific_type is not None:
            self.product_specific_type = product_specific_type
        if profile_image is not None:
            self.profile_image = profile_image
        if sku_ids is not None:
            self.sku_ids = sku_ids
        if sticker_param is not None:
            self.sticker_param = sticker_param
        if store_authorized_bc_id is not None:
            self.store_authorized_bc_id = store_authorized_bc_id
        if store_id is not None:
            self.store_id = store_id
        if tags is not None:
            self.tags = tags
        if vertical_video_strategy is not None:
            self.vertical_video_strategy = vertical_video_strategy

    @property
    def ad_text(self):
        """Gets the ad_text of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Valid when `creative_portfolio_type`= `PRODUCT_CARD`. An ad text. It is shown to your audience as part of your ad creative, to deliver the message you intend to communicate to them.  If you do not know how to create effective ad texts, you can try the [Smart Text](https://ads.tiktok.com/marketing_api/docs?id=1739084248002626) feature, which generates ad text recommendations based on the industry and language. Note: Ad text must be 1-100 characters long and cannot contain emoji.  Each word in Chinese or Japanese counts as two characters, while each letter in English counts as one character.  # noqa: E501

        :return: The ad_text of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._ad_text

    @ad_text.setter
    def ad_text(self, ad_text):
        """Sets the ad_text of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Valid when `creative_portfolio_type`= `PRODUCT_CARD`. An ad text. It is shown to your audience as part of your ad creative, to deliver the message you intend to communicate to them.  If you do not know how to create effective ad texts, you can try the [Smart Text](https://ads.tiktok.com/marketing_api/docs?id=1739084248002626) feature, which generates ad text recommendations based on the industry and language. Note: Ad text must be 1-100 characters long and cannot contain emoji.  Each word in Chinese or Japanese counts as two characters, while each letter in English counts as one character.  # noqa: E501

        :param ad_text: The ad_text of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._ad_text = ad_text

    @property
    def advanced_audio_info(self):
        """Gets the advanced_audio_info of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501


        :return: The advanced_audio_info of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: OpenApiv13creativeportfoliocreateAdvancedAudioInfo
        """
        return self._advanced_audio_info

    @advanced_audio_info.setter
    def advanced_audio_info(self, advanced_audio_info):
        """Sets the advanced_audio_info of this OpenApiv13creativeportfoliocreatePortfolioContent.


        :param advanced_audio_info: The advanced_audio_info of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: OpenApiv13creativeportfoliocreateAdvancedAudioInfo
        """

        self._advanced_audio_info = advanced_audio_info

    @property
    def advanced_gesture_icon(self):
        """Gets the advanced_gesture_icon of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501


        :return: The advanced_gesture_icon of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: OpenApiv13creativeportfoliocreateAdvancedGestureIcon
        """
        return self._advanced_gesture_icon

    @advanced_gesture_icon.setter
    def advanced_gesture_icon(self, advanced_gesture_icon):
        """Sets the advanced_gesture_icon of this OpenApiv13creativeportfoliocreatePortfolioContent.


        :param advanced_gesture_icon: The advanced_gesture_icon of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: OpenApiv13creativeportfoliocreateAdvancedGestureIcon
        """

        self._advanced_gesture_icon = advanced_gesture_icon

    @property
    def advanced_gesture_image(self):
        """Gets the advanced_gesture_image of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501


        :return: The advanced_gesture_image of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: OpenApiv13creativeportfoliocreateAdvancedGestureIcon
        """
        return self._advanced_gesture_image

    @advanced_gesture_image.setter
    def advanced_gesture_image(self, advanced_gesture_image):
        """Sets the advanced_gesture_image of this OpenApiv13creativeportfoliocreatePortfolioContent.


        :param advanced_gesture_image: The advanced_gesture_image of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: OpenApiv13creativeportfoliocreateAdvancedGestureIcon
        """

        self._advanced_gesture_image = advanced_gesture_image

    @property
    def advanced_interact_shape(self):
        """Gets the advanced_interact_shape of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501


        :return: The advanced_interact_shape of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._advanced_interact_shape

    @advanced_interact_shape.setter
    def advanced_interact_shape(self, advanced_interact_shape):
        """Sets the advanced_interact_shape of this OpenApiv13creativeportfoliocreatePortfolioContent.


        :param advanced_interact_shape: The advanced_interact_shape of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._advanced_interact_shape = advanced_interact_shape

    @property
    def advanced_interact_type(self):
        """Gets the advanced_interact_type of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501


        :return: The advanced_interact_type of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._advanced_interact_type

    @advanced_interact_type.setter
    def advanced_interact_type(self, advanced_interact_type):
        """Sets the advanced_interact_type of this OpenApiv13creativeportfoliocreatePortfolioContent.


        :param advanced_interact_type: The advanced_interact_type of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._advanced_interact_type = advanced_interact_type

    @property
    def app_id(self):
        """Gets the app_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `DOWNLOAD_CARD`. ID of the app that you want to promote in the Download Card. It is the App ID from Events Manager  # noqa: E501

        :return: The app_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `DOWNLOAD_CARD`. ID of the app that you want to promote in the Download Card. It is the App ID from Events Manager  # noqa: E501

        :param app_id: The app_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def asset_content(self):
        """Gets the asset_content of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        A call-to-action text. For example, `\"Learn More\"`. This field is required when `creative_portfolio_type` is `CTA`  # noqa: E501

        :return: The asset_content of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._asset_content

    @asset_content.setter
    def asset_content(self, asset_content):
        """Sets the asset_content of this OpenApiv13creativeportfoliocreatePortfolioContent.

        A call-to-action text. For example, `\"Learn More\"`. This field is required when `creative_portfolio_type` is `CTA`  # noqa: E501

        :param asset_content: The asset_content of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._asset_content = asset_content

    @property
    def asset_ids(self):
        """Gets the asset_ids of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        A list of CTAs. For example, `[201781, 201535]`. This field is required when `creative_portfolio_type` is `CTA`. To create a CTA portfolio, you need to get a group of auto-optimized CTAs by using `/creative/cta/recommend/`. Fetch the data in the response and include it as values to this field. Note: Auto-optimized CTAs can only be used in the advertiser accounts that they were created for.  # noqa: E501

        :return: The asset_ids of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: list[str]
        """
        return self._asset_ids

    @asset_ids.setter
    def asset_ids(self, asset_ids):
        """Sets the asset_ids of this OpenApiv13creativeportfoliocreatePortfolioContent.

        A list of CTAs. For example, `[201781, 201535]`. This field is required when `creative_portfolio_type` is `CTA`. To create a CTA portfolio, you need to get a group of auto-optimized CTAs by using `/creative/cta/recommend/`. Fetch the data in the response and include it as values to this field. Note: Auto-optimized CTAs can only be used in the advertiser accounts that they were created for.  # noqa: E501

        :param asset_ids: The asset_ids of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: list[str]
        """

        self._asset_ids = asset_ids

    @property
    def badge_image_info(self):
        """Gets the badge_image_info of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501


        :return: The badge_image_info of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: OpenApiv13creativeportfoliocreateBadgeImageInfo
        """
        return self._badge_image_info

    @badge_image_info.setter
    def badge_image_info(self, badge_image_info):
        """Sets the badge_image_info of this OpenApiv13creativeportfoliocreatePortfolioContent.


        :param badge_image_info: The badge_image_info of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: OpenApiv13creativeportfoliocreateBadgeImageInfo
        """

        self._badge_image_info = badge_image_info

    @property
    def badge_position(self):
        """Gets the badge_position of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501


        :return: The badge_position of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: OpenApiv13creativeportfoliocreateBadgePosition
        """
        return self._badge_position

    @badge_position.setter
    def badge_position(self, badge_position):
        """Sets the badge_position of this OpenApiv13creativeportfoliocreatePortfolioContent.


        :param badge_position: The badge_position of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: OpenApiv13creativeportfoliocreateBadgePosition
        """

        self._badge_position = badge_position

    @property
    def badge_show_time(self):
        """Gets the badge_show_time of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        When the premium badge will start to show, in seconds. The first three seconds and the last five seconds of the video cannot be used as the badge show start time  # noqa: E501

        :return: The badge_show_time of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: int
        """
        return self._badge_show_time

    @badge_show_time.setter
    def badge_show_time(self, badge_show_time):
        """Sets the badge_show_time of this OpenApiv13creativeportfoliocreatePortfolioContent.

        When the premium badge will start to show, in seconds. The first three seconds and the last five seconds of the video cannot be used as the badge show start time  # noqa: E501

        :param badge_show_time: The badge_show_time of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: int
        """

        self._badge_show_time = badge_show_time

    @property
    def call_to_action(self):
        """Gets the call_to_action of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `DOWNLOAD_CARD`. Call-to-action text in the Download Card  # noqa: E501

        :return: The call_to_action of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._call_to_action

    @call_to_action.setter
    def call_to_action(self, call_to_action):
        """Sets the call_to_action of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `DOWNLOAD_CARD`. Call-to-action text in the Download Card  # noqa: E501

        :param call_to_action: The call_to_action of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._call_to_action = call_to_action

    @property
    def call_to_action_text(self):
        """Gets the call_to_action_text of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        The call-to-action text that will be shown below the image/badge  # noqa: E501

        :return: The call_to_action_text of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._call_to_action_text

    @call_to_action_text.setter
    def call_to_action_text(self, call_to_action_text):
        """Sets the call_to_action_text of this OpenApiv13creativeportfoliocreatePortfolioContent.

        The call-to-action text that will be shown below the image/badge  # noqa: E501

        :param call_to_action_text: The call_to_action_text of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._call_to_action_text = call_to_action_text

    @property
    def card_image_index(self):
        """Gets the card_image_index of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        card_image_index | integer | Valid when `creative_portfolio_type`= `PRODUCT_CARD`. You can use this field to specify the image used in the Product Card. The number you set via this field will be used as index to query the Image URLs you have passed through `additional_image_urls` in [/catalog/product/upload/](https://ads.tiktok.com/marketing_api/docs?id=1740497429681153). For instance, `card_image_index` = 2 means that you will use the image via the second image URL in `additional_image_urls`  # noqa: E501

        :return: The card_image_index of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: int
        """
        return self._card_image_index

    @card_image_index.setter
    def card_image_index(self, card_image_index):
        """Sets the card_image_index of this OpenApiv13creativeportfoliocreatePortfolioContent.

        card_image_index | integer | Valid when `creative_portfolio_type`= `PRODUCT_CARD`. You can use this field to specify the image used in the Product Card. The number you set via this field will be used as index to query the Image URLs you have passed through `additional_image_urls` in [/catalog/product/upload/](https://ads.tiktok.com/marketing_api/docs?id=1740497429681153). For instance, `card_image_index` = 2 means that you will use the image via the second image URL in `additional_image_urls`  # noqa: E501

        :param card_image_index: The card_image_index of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: int
        """

        self._card_image_index = card_image_index

    @property
    def card_show_price(self):
        """Gets the card_show_price of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `PRODUCT_CARD`.  Whether to show the price of products on the Product Card or not  # noqa: E501

        :return: The card_show_price of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: bool
        """
        return self._card_show_price

    @card_show_price.setter
    def card_show_price(self, card_show_price):
        """Sets the card_show_price of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `PRODUCT_CARD`.  Whether to show the price of products on the Product Card or not  # noqa: E501

        :param card_show_price: The card_show_price of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: bool
        """

        self._card_show_price = card_show_price

    @property
    def card_tags(self):
        """Gets the card_tags of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `PRODUCT_CARD`. The product tags that you want to show on the Product Card. Enum values: `BRAND` (Brand Name), `DESC` (Description)  # noqa: E501

        :return: The card_tags of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: list[str]
        """
        return self._card_tags

    @card_tags.setter
    def card_tags(self, card_tags):
        """Sets the card_tags of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `PRODUCT_CARD`. The product tags that you want to show on the Product Card. Enum values: `BRAND` (Brand Name), `DESC` (Description)  # noqa: E501

        :param card_tags: The card_tags of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: list[str]
        """

        self._card_tags = card_tags

    @property
    def card_type(self):
        """Gets the card_type of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Card type. Currently only image card portfolio (IMAGE) can be created with this endpoint. Required when creative_portfolio_type is CARD  # noqa: E501

        :return: The card_type of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Card type. Currently only image card portfolio (IMAGE) can be created with this endpoint. Required when creative_portfolio_type is CARD  # noqa: E501

        :param card_type: The card_type of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._card_type = card_type

    @property
    def catalog_authorized_bc_id(self):
        """Gets the catalog_authorized_bc_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `PRODUCT_CARD` and `product_source` is set as `CATALOG`.ID of the Business Center that is authorized to access the catalog (`catalog_id`). Note: If you have created a Product Card and want to use it during ad creation, ensure that at the ad group level you pass to the same field the value that is used for creating the Product Card. Otherwise, when the ad is delivered, the product thumbnail in the Product Card may not be of the promoted product  # noqa: E501

        :return: The catalog_authorized_bc_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._catalog_authorized_bc_id

    @catalog_authorized_bc_id.setter
    def catalog_authorized_bc_id(self, catalog_authorized_bc_id):
        """Sets the catalog_authorized_bc_id of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `PRODUCT_CARD` and `product_source` is set as `CATALOG`.ID of the Business Center that is authorized to access the catalog (`catalog_id`). Note: If you have created a Product Card and want to use it during ad creation, ensure that at the ad group level you pass to the same field the value that is used for creating the Product Card. Otherwise, when the ad is delivered, the product thumbnail in the Product Card may not be of the promoted product  # noqa: E501

        :param catalog_authorized_bc_id: The catalog_authorized_bc_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._catalog_authorized_bc_id = catalog_authorized_bc_id

    @property
    def catalog_id(self):
        """Gets the catalog_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `PRODUCT_CARD`. Catalog ID. Note: You can use [/store/list/](https://ads.tiktok.com/marketing_api/docs?id=1752267762718722) to get the `catalog_id`, `store_id` and `store_authorized_bc_id` for available stores under an ad account. If you have created a Product Card and want to use it during ad creation, ensure that at the ad group level you pass to the same field the value that is used for creating the Product Card. Otherwise, when the ad is delivered, the product thumbnail in the Product Card may not be of the promoted product.  # noqa: E501

        :return: The catalog_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `PRODUCT_CARD`. Catalog ID. Note: You can use [/store/list/](https://ads.tiktok.com/marketing_api/docs?id=1752267762718722) to get the `catalog_id`, `store_id` and `store_authorized_bc_id` for available stores under an ad account. If you have created a Product Card and want to use it during ad creation, ensure that at the ad group level you pass to the same field the value that is used for creating the Product Card. Otherwise, when the ad is delivered, the product thumbnail in the Product Card may not be of the promoted product.  # noqa: E501

        :param catalog_id: The catalog_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._catalog_id = catalog_id

    @property
    def category_label(self):
        """Gets the category_label of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `DOWNLOAD_CARD` and the value of `tags` includes `CATEGORIES`. Category name of the app you want to promote in the Download Card. See [Enumerations-Creative Management-Category Labels](https://ads.tiktok.com/marketing_api/docs?id=1737174886619138) for the enum values, and you need to pass the value as string  # noqa: E501

        :return: The category_label of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._category_label

    @category_label.setter
    def category_label(self, category_label):
        """Sets the category_label of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `DOWNLOAD_CARD` and the value of `tags` includes `CATEGORIES`. Category name of the app you want to promote in the Download Card. See [Enumerations-Creative Management-Category Labels](https://ads.tiktok.com/marketing_api/docs?id=1737174886619138) for the enum values, and you need to pass the value as string  # noqa: E501

        :param category_label: The category_label of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._category_label = category_label

    @property
    def country_code(self):
        """Gets the country_code of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `DOWNLOAD_CARD`. Country or location code of the region you want to target. For enum values, see [Appendix - Location code](https://ads.tiktok.com/marketing_api/docs?id=1737585867307010)  # noqa: E501

        :return: The country_code of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: list[str]
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `DOWNLOAD_CARD`. Country or location code of the region you want to target. For enum values, see [Appendix - Location code](https://ads.tiktok.com/marketing_api/docs?id=1737585867307010)  # noqa: E501

        :param country_code: The country_code of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: list[str]
        """

        self._country_code = country_code

    @property
    def description(self):
        """Gets the description of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `DOWNLOAD_CARD` and the value of `layouts` includes `TYPE_1`. Description of the app that you want to promote in the Download Card  # noqa: E501

        :return: The description of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `DOWNLOAD_CARD` and the value of `layouts` includes `TYPE_1`. Description of the app that you want to promote in the Download Card  # noqa: E501

        :param description: The description of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dynamic_format(self):
        """Gets the dynamic_format of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `PRODUCT_CARD` and product_source is set as `CATALOG`. When `creative_portfolio_type`= `PRODUCT_CARD` and `product_source` is set as `STORE`, you cannot set `dynamic_format` as `DYNAMIC_CREATIVE`. You can choose not to pass in the field or set it as `UNSET`. Whether to enable Dynamic Format. Dynamic Format combines video creative, product cards, and landing pages into different variations based on a shopper purchase intent, maximizing conversions for you. Enum values: `UNSET`, `DYNAMIC_CREATIVE` (Use Dynamic Format to create smart creatives). Note:`dynamic_format` cannot be enabled for retargeting ads (i.e. when `shopping_ads_retargeting_type` in the ad group is not `OFF`). When `dynamic_format` = `DYNAMIC_CREATIVE`, we will automatically create cards. This means that you will not need to pass all card related fields (`card_show_price`, `card_tags`, `card_image_index`). If you have created a Product Card and want to use it during ad creation, ensure that at the ad level you pass to the same field the value that is used for creating the Product Card.  # noqa: E501

        :return: The dynamic_format of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_format

    @dynamic_format.setter
    def dynamic_format(self, dynamic_format):
        """Sets the dynamic_format of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `PRODUCT_CARD` and product_source is set as `CATALOG`. When `creative_portfolio_type`= `PRODUCT_CARD` and `product_source` is set as `STORE`, you cannot set `dynamic_format` as `DYNAMIC_CREATIVE`. You can choose not to pass in the field or set it as `UNSET`. Whether to enable Dynamic Format. Dynamic Format combines video creative, product cards, and landing pages into different variations based on a shopper purchase intent, maximizing conversions for you. Enum values: `UNSET`, `DYNAMIC_CREATIVE` (Use Dynamic Format to create smart creatives). Note:`dynamic_format` cannot be enabled for retargeting ads (i.e. when `shopping_ads_retargeting_type` in the ad group is not `OFF`). When `dynamic_format` = `DYNAMIC_CREATIVE`, we will automatically create cards. This means that you will not need to pass all card related fields (`card_show_price`, `card_tags`, `card_image_index`). If you have created a Product Card and want to use it during ad creation, ensure that at the ad level you pass to the same field the value that is used for creating the Product Card.  # noqa: E501

        :param dynamic_format: The dynamic_format of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._dynamic_format = dynamic_format

    @property
    def identity_authorized_bc_id(self):
        """Gets the identity_authorized_bc_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `PRODUCT_CARD` and `identity_type` is `BC_AUTH_TT`.  ID of the Business Center that a TikTok Account User in Business Center identity is associated with  # noqa: E501

        :return: The identity_authorized_bc_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._identity_authorized_bc_id

    @identity_authorized_bc_id.setter
    def identity_authorized_bc_id(self, identity_authorized_bc_id):
        """Sets the identity_authorized_bc_id of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `PRODUCT_CARD` and `identity_type` is `BC_AUTH_TT`.  ID of the Business Center that a TikTok Account User in Business Center identity is associated with  # noqa: E501

        :param identity_authorized_bc_id: The identity_authorized_bc_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._identity_authorized_bc_id = identity_authorized_bc_id

    @property
    def identity_id(self):
        """Gets the identity_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `PRODUCT_CARD`. Identity ID  # noqa: E501

        :return: The identity_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._identity_id

    @identity_id.setter
    def identity_id(self, identity_id):
        """Sets the identity_id of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `PRODUCT_CARD`. Identity ID  # noqa: E501

        :param identity_id: The identity_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._identity_id = identity_id

    @property
    def identity_type(self):
        """Gets the identity_type of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `PRODUCT_CARD`. Identity type. Enum values: `CUSTOMIZED_USER`, `AUTH_CODE`, `TT_USER`, `BC_AUTH_TT`. For details about identities, see [Identities](https://ads.tiktok.com/marketing_api/docs?id=1738958351620097)  # noqa: E501

        :return: The identity_type of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._identity_type

    @identity_type.setter
    def identity_type(self, identity_type):
        """Sets the identity_type of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `PRODUCT_CARD`. Identity type. Enum values: `CUSTOMIZED_USER`, `AUTH_CODE`, `TT_USER`, `BC_AUTH_TT`. For details about identities, see [Identities](https://ads.tiktok.com/marketing_api/docs?id=1738958351620097)  # noqa: E501

        :param identity_type: The identity_type of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._identity_type = identity_type

    @property
    def image_id(self):
        """Gets the image_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Image ID. Required when `creative_portfolio_type` is `CARD`  # noqa: E501

        :return: The image_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Image ID. Required when `creative_portfolio_type` is `CARD`  # noqa: E501

        :param image_id: The image_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def item_group_ids(self):
        """Gets the item_group_ids of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

         Required when `creative_portfolio_type`is `PRODUCT_CARD` and `product_source` is set as `STORE`. When `creative_portfolio_type`= `PRODUCT_CARD` and `product_specific_type` = PRODUCT_SET, you need to pass in either `product_set_id` or `item_group_ids`. Product SPU IDs. Max size: 20. Note: If you have created a Product Card and want to use it during ad creation, ensure that at the ad level you pass to the same field the value that is used for creating the Product Card. Otherwise, when the ad is delivered, the product thumbnail in the Product Card may not be of the promoted product  # noqa: E501

        :return: The item_group_ids of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: list[str]
        """
        return self._item_group_ids

    @item_group_ids.setter
    def item_group_ids(self, item_group_ids):
        """Sets the item_group_ids of this OpenApiv13creativeportfoliocreatePortfolioContent.

         Required when `creative_portfolio_type`is `PRODUCT_CARD` and `product_source` is set as `STORE`. When `creative_portfolio_type`= `PRODUCT_CARD` and `product_specific_type` = PRODUCT_SET, you need to pass in either `product_set_id` or `item_group_ids`. Product SPU IDs. Max size: 20. Note: If you have created a Product Card and want to use it during ad creation, ensure that at the ad level you pass to the same field the value that is used for creating the Product Card. Otherwise, when the ad is delivered, the product thumbnail in the Product Card may not be of the promoted product  # noqa: E501

        :param item_group_ids: The item_group_ids of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: list[str]
        """

        self._item_group_ids = item_group_ids

    @property
    def layouts(self):
        """Gets the layouts of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `DOWNLOAD_CARD`. The layout type of the Download Card. Enum values: `TYPE_1`: Type 1, showing app description in the Download Card. `TYPE_2` : Type 2, not showing app description in the Download Card. You can pass in one or two layout types, and when you pass in both `TYPE_1` and `TYPE_2` in this field, you will create one Type 1 Download Card and one Type 2 Download Card  # noqa: E501

        :return: The layouts of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: list[str]
        """
        return self._layouts

    @layouts.setter
    def layouts(self, layouts):
        """Sets the layouts of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `DOWNLOAD_CARD`. The layout type of the Download Card. Enum values: `TYPE_1`: Type 1, showing app description in the Download Card. `TYPE_2` : Type 2, not showing app description in the Download Card. You can pass in one or two layout types, and when you pass in both `TYPE_1` and `TYPE_2` in this field, you will create one Type 1 Download Card and one Type 2 Download Card  # noqa: E501

        :param layouts: The layouts of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: list[str]
        """

        self._layouts = layouts

    @property
    def mobile_app_id(self):
        """Gets the mobile_app_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `DOWNLOAD_CARD`. Mobile App ID, used to extract tag information from Google Play or App Store. For an iOS app, please find the ID number in the app’s App Store URL as the string of numbers directly after `id`. For instance, in `https://apps.apple.com/us/app/hyperpure/id1203646221` the ID would be `1203646221`. For an Android app, please find the package name in the app’s Google Play store URL after `id`. For instance, in `https://play.google.com/store/apps/details?id=com.innersloth.spacemafia` the ID would be `com.innersloth.spacemafia`.  # noqa: E501

        :return: The mobile_app_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._mobile_app_id

    @mobile_app_id.setter
    def mobile_app_id(self, mobile_app_id):
        """Sets the mobile_app_id of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `DOWNLOAD_CARD`. Mobile App ID, used to extract tag information from Google Play or App Store. For an iOS app, please find the ID number in the app’s App Store URL as the string of numbers directly after `id`. For instance, in `https://apps.apple.com/us/app/hyperpure/id1203646221` the ID would be `1203646221`. For an Android app, please find the package name in the app’s Google Play store URL after `id`. For instance, in `https://play.google.com/store/apps/details?id=com.innersloth.spacemafia` the ID would be `com.innersloth.spacemafia`.  # noqa: E501

        :param mobile_app_id: The mobile_app_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._mobile_app_id = mobile_app_id

    @property
    def product_set_id(self):
        """Gets the product_set_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        When `creative_portfolio_type`= `PRODUCT_CARD` and `product_specific_type` = `PRODUCT_SET`, you need to pass in either `product_set_id` or `item_group_ids`. ID of the Product Set. You can call [/catalog/set/get/](https://ads.tiktok.com/marketing_api/docs?id=1740570556295169) to get a list of Product Sets in a catalog under your Business Center. Note: If you have created a Product Card and want to use it during ad creation, ensure that at the ad level you pass to the same field the value that is used for creating the Product Card. Otherwise, when the ad is delivered, the product thumbnail in the Product Card may not be of the promoted product  # noqa: E501

        :return: The product_set_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._product_set_id

    @product_set_id.setter
    def product_set_id(self, product_set_id):
        """Sets the product_set_id of this OpenApiv13creativeportfoliocreatePortfolioContent.

        When `creative_portfolio_type`= `PRODUCT_CARD` and `product_specific_type` = `PRODUCT_SET`, you need to pass in either `product_set_id` or `item_group_ids`. ID of the Product Set. You can call [/catalog/set/get/](https://ads.tiktok.com/marketing_api/docs?id=1740570556295169) to get a list of Product Sets in a catalog under your Business Center. Note: If you have created a Product Card and want to use it during ad creation, ensure that at the ad level you pass to the same field the value that is used for creating the Product Card. Otherwise, when the ad is delivered, the product thumbnail in the Product Card may not be of the promoted product  # noqa: E501

        :param product_set_id: The product_set_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._product_set_id = product_set_id

    @property
    def product_source(self):
        """Gets the product_source of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `PRODUCT_CARD`. Product source where you want to get products for promotion. Enum values: `UNSET`, `CATALOG`(Catalog), `STORE` (TikTok Shop or TikTok Storefront (third-party store)). If you set this field as `STORE`, you need to pass in `item_group_ids` at the same time. Note: If you have created a Product Card and want to use it during ad creation, ensure that at the ad group level you pass to the same field the value that is used for creating the Product Card. Otherwise, when the ad is delivered, the product thumbnail in the Product Card may not be of the promoted product.  # noqa: E501

        :return: The product_source of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._product_source

    @product_source.setter
    def product_source(self, product_source):
        """Sets the product_source of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `PRODUCT_CARD`. Product source where you want to get products for promotion. Enum values: `UNSET`, `CATALOG`(Catalog), `STORE` (TikTok Shop or TikTok Storefront (third-party store)). If you set this field as `STORE`, you need to pass in `item_group_ids` at the same time. Note: If you have created a Product Card and want to use it during ad creation, ensure that at the ad group level you pass to the same field the value that is used for creating the Product Card. Otherwise, when the ad is delivered, the product thumbnail in the Product Card may not be of the promoted product.  # noqa: E501

        :param product_source: The product_source of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._product_source = product_source

    @property
    def product_specific_type(self):
        """Gets the product_specific_type of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `PRODUCT_CARD` and `product_source` is set as `CATALOG`. The way that you specify the products. Enum values:  `ALL`: All products. Allow TikTok to dynamically choose from all catalog products. You do not need to specify any of `sku_ids`, `item_group_ids` and `product_set_id` at the same time.`PRODUCT_SET`: Product set. Select a product set. TikTok will dynamically choose products from this set. You need to specify `item_group_ids` or `product_set_id` at the same time. `CUSTOMIZED_PRODUCTS`: Specific products. Select up to 20 products from your catalog. You need to specify `sku_ids` at the same time.Note: If you have created a Product Card and want to use it during ad creation, ensure that at the ad level you pass to the same field the value that is used for creating the Product Card. Otherwise, when the ad is delivered, the product thumbnail in the Product Card may not be of the promoted product  # noqa: E501

        :return: The product_specific_type of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._product_specific_type

    @product_specific_type.setter
    def product_specific_type(self, product_specific_type):
        """Sets the product_specific_type of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `PRODUCT_CARD` and `product_source` is set as `CATALOG`. The way that you specify the products. Enum values:  `ALL`: All products. Allow TikTok to dynamically choose from all catalog products. You do not need to specify any of `sku_ids`, `item_group_ids` and `product_set_id` at the same time.`PRODUCT_SET`: Product set. Select a product set. TikTok will dynamically choose products from this set. You need to specify `item_group_ids` or `product_set_id` at the same time. `CUSTOMIZED_PRODUCTS`: Specific products. Select up to 20 products from your catalog. You need to specify `sku_ids` at the same time.Note: If you have created a Product Card and want to use it during ad creation, ensure that at the ad level you pass to the same field the value that is used for creating the Product Card. Otherwise, when the ad is delivered, the product thumbnail in the Product Card may not be of the promoted product  # noqa: E501

        :param product_specific_type: The product_specific_type of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._product_specific_type = product_specific_type

    @property
    def profile_image(self):
        """Gets the profile_image of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `DOWNLOAD_CARD`. Profile image URL  # noqa: E501

        :return: The profile_image of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._profile_image

    @profile_image.setter
    def profile_image(self, profile_image):
        """Sets the profile_image of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `DOWNLOAD_CARD`. Profile image URL  # noqa: E501

        :param profile_image: The profile_image of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._profile_image = profile_image

    @property
    def sku_ids(self):
        """Gets the sku_ids of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

         Required when `creative_portfolio_type`is `PRODUCT_CARD` and `product_source` is set as `STORE`. When `creative_portfolio_type`= `PRODUCT_CARD` and `product_specific_type` = PRODUCT_SET, you need to pass in either `product_set_id` or `item_group_ids`. Product SPU IDs. Max size: 20. Note: If you have created a Product Card and want to use it during ad creation, ensure that at the ad level you pass to the same field the value that is used for creating the Product Card. Otherwise, when the ad is delivered, the product thumbnail in the Product Card may not be of the promoted product  # noqa: E501

        :return: The sku_ids of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: list[str]
        """
        return self._sku_ids

    @sku_ids.setter
    def sku_ids(self, sku_ids):
        """Sets the sku_ids of this OpenApiv13creativeportfoliocreatePortfolioContent.

         Required when `creative_portfolio_type`is `PRODUCT_CARD` and `product_source` is set as `STORE`. When `creative_portfolio_type`= `PRODUCT_CARD` and `product_specific_type` = PRODUCT_SET, you need to pass in either `product_set_id` or `item_group_ids`. Product SPU IDs. Max size: 20. Note: If you have created a Product Card and want to use it during ad creation, ensure that at the ad level you pass to the same field the value that is used for creating the Product Card. Otherwise, when the ad is delivered, the product thumbnail in the Product Card may not be of the promoted product  # noqa: E501

        :param sku_ids: The sku_ids of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: list[str]
        """

        self._sku_ids = sku_ids

    @property
    def sticker_param(self):
        """Gets the sticker_param of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501


        :return: The sticker_param of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: OpenApiv13creativeportfoliocreateStickerParam
        """
        return self._sticker_param

    @sticker_param.setter
    def sticker_param(self, sticker_param):
        """Sets the sticker_param of this OpenApiv13creativeportfoliocreatePortfolioContent.


        :param sticker_param: The sticker_param of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: OpenApiv13creativeportfoliocreateStickerParam
        """

        self._sticker_param = sticker_param

    @property
    def store_authorized_bc_id(self):
        """Gets the store_authorized_bc_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `PRODUCT_CARD` and `product_source` is set as `STORE`.  ID of the Business Center that is authorized to access the store (`store_id`). Note: If you have created a Product Card and want to use it during ad creation, ensure that at the ad group levelyou pass to the same field the value that is used for creating the Product Card. Otherwise, when the ad is delivered, the product thumbnail in the Product Card may not be of the promoted product  # noqa: E501

        :return: The store_authorized_bc_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._store_authorized_bc_id

    @store_authorized_bc_id.setter
    def store_authorized_bc_id(self, store_authorized_bc_id):
        """Sets the store_authorized_bc_id of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `PRODUCT_CARD` and `product_source` is set as `STORE`.  ID of the Business Center that is authorized to access the store (`store_id`). Note: If you have created a Product Card and want to use it during ad creation, ensure that at the ad group levelyou pass to the same field the value that is used for creating the Product Card. Otherwise, when the ad is delivered, the product thumbnail in the Product Card may not be of the promoted product  # noqa: E501

        :param store_authorized_bc_id: The store_authorized_bc_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._store_authorized_bc_id = store_authorized_bc_id

    @property
    def store_id(self):
        """Gets the store_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `PRODUCT_CARD` and `product_source` is set as `STORE`. ID of the TikTok Storefront or TikTok Shop. Note:  To get the TikTok Storefront ID or TikTok Shop ID, you can use [/bc/asset/get/]( https://ads.tiktok.com/marketing_api/docs?id=1739432717798401):  When in the response `asset_type` is `STOREFRONT`, the returned `asset_id` is the TikTok Storefront ID.  When in the response `asset_type` is `TIKTOK_SHOP`, the returned `asset_id` is the TikTok Shop ID.  A store of the TikTok Storefront type (store_id) can be used to create ad groups only when a TikTok account has been bound to the store. You can use [/store/list/]( https://ads.tiktok.com/marketing_api/docs?id=1752267762718722) to check the binding status of a TikTok Storefront via `tiktok_account_binding_status` in the response. If you have created a Product Card and want to use it during ad creation, ensure that at the ad group level you pass to the same field the value that is used for creating the Product Card. Otherwise, when the ad is delivered, the product thumbnail in the Product Card may not be of the promoted product.  # noqa: E501

        :return: The store_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `PRODUCT_CARD` and `product_source` is set as `STORE`. ID of the TikTok Storefront or TikTok Shop. Note:  To get the TikTok Storefront ID or TikTok Shop ID, you can use [/bc/asset/get/]( https://ads.tiktok.com/marketing_api/docs?id=1739432717798401):  When in the response `asset_type` is `STOREFRONT`, the returned `asset_id` is the TikTok Storefront ID.  When in the response `asset_type` is `TIKTOK_SHOP`, the returned `asset_id` is the TikTok Shop ID.  A store of the TikTok Storefront type (store_id) can be used to create ad groups only when a TikTok account has been bound to the store. You can use [/store/list/]( https://ads.tiktok.com/marketing_api/docs?id=1752267762718722) to check the binding status of a TikTok Storefront via `tiktok_account_binding_status` in the response. If you have created a Product Card and want to use it during ad creation, ensure that at the ad group level you pass to the same field the value that is used for creating the Product Card. Otherwise, when the ad is delivered, the product thumbnail in the Product Card may not be of the promoted product.  # noqa: E501

        :param store_id: The store_id of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def tags(self):
        """Gets the tags of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `DOWNLOAD_CARD`. Tags for the Download Card. Enum values: `CATEGORIES`：Showing the category of the app you want to promote in the Download Card. `FILESIZE`：Showing the file size of the app you want to promote in the Download Card.  `RATING`：Showing the rating of the app you want to promote in the Download Card. `RANKING`：Showing the ranking of the app you want to promote in the Download Card. `COMMENT_VOLUME`：Showing the number of comments for the app you want to promote in the Download Card. Note: You can pass in multiple tags at one time, but when you pass in more than two tags, only two tags will show in the Download Card according to the following tag priority: `CATEGORIES` > `FILESIZE` > `RATING` > `RANKING`>`COMMENT_VOLUME`. For Type 1 Download Card, you need to pass in at least one tag. For Type 2 Download Card, you need to pass in at least two tags.   # noqa: E501

        :return: The tags of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `DOWNLOAD_CARD`. Tags for the Download Card. Enum values: `CATEGORIES`：Showing the category of the app you want to promote in the Download Card. `FILESIZE`：Showing the file size of the app you want to promote in the Download Card.  `RATING`：Showing the rating of the app you want to promote in the Download Card. `RANKING`：Showing the ranking of the app you want to promote in the Download Card. `COMMENT_VOLUME`：Showing the number of comments for the app you want to promote in the Download Card. Note: You can pass in multiple tags at one time, but when you pass in more than two tags, only two tags will show in the Download Card according to the following tag priority: `CATEGORIES` > `FILESIZE` > `RATING` > `RANKING`>`COMMENT_VOLUME`. For Type 1 Download Card, you need to pass in at least one tag. For Type 2 Download Card, you need to pass in at least two tags.   # noqa: E501

        :param tags: The tags of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def vertical_video_strategy(self):
        """Gets the vertical_video_strategy of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501

        Required when `creative_portfolio_type`= `PRODUCT_CARD` and `product_source` is set as `CATALOG`. When `creative_portfolio_type`= `PRODUCT_CARD` and `product_source` is set as `STORE`, you can choose not to pass in the field or set it as `SINGLE_VIDEO`. The video type that you use for Product Sales scenarios. Enum values: `UNSET` (unset), `SINGLE_VIDEO` (single video), `CATALOG_VIDEOS` (catalog video).  It must be `UNSET` if `dynamic_format` = `DYNAMIC_CREATIVE`. Note: If you have created a Product Card and want to use it during ad creation, ensure that at the ad level you pass to the same field the value that is used for creating the Product Card  # noqa: E501

        :return: The vertical_video_strategy of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :rtype: str
        """
        return self._vertical_video_strategy

    @vertical_video_strategy.setter
    def vertical_video_strategy(self, vertical_video_strategy):
        """Sets the vertical_video_strategy of this OpenApiv13creativeportfoliocreatePortfolioContent.

        Required when `creative_portfolio_type`= `PRODUCT_CARD` and `product_source` is set as `CATALOG`. When `creative_portfolio_type`= `PRODUCT_CARD` and `product_source` is set as `STORE`, you can choose not to pass in the field or set it as `SINGLE_VIDEO`. The video type that you use for Product Sales scenarios. Enum values: `UNSET` (unset), `SINGLE_VIDEO` (single video), `CATALOG_VIDEOS` (catalog video).  It must be `UNSET` if `dynamic_format` = `DYNAMIC_CREATIVE`. Note: If you have created a Product Card and want to use it during ad creation, ensure that at the ad level you pass to the same field the value that is used for creating the Product Card  # noqa: E501

        :param vertical_video_strategy: The vertical_video_strategy of this OpenApiv13creativeportfoliocreatePortfolioContent.  # noqa: E501
        :type: str
        """

        self._vertical_video_strategy = vertical_video_strategy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenApiv13creativeportfoliocreatePortfolioContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenApiv13creativeportfoliocreatePortfolioContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
