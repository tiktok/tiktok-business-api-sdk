# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetParameterFilters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'operator': 'str',
        'values': 'list[str]'
    }

    attribute_map = {
        'field': 'field',
        'operator': 'operator',
        'values': 'values'
    }

    def __init__(self, field=None, operator=None, values=None):  # noqa: E501
        """OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetParameterFilters - a model defined in Swagger"""  # noqa: E501
        self._field = None
        self._operator = None
        self._values = None
        self.discriminator = None
        self.field = field
        self.operator = operator
        self.values = values

    @property
    def field(self):
        """Gets the field of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetParameterFilters.  # noqa: E501

        Required when parameter_filters within exclusion_rule_set is passed. Filter condition. Use this field to specify whether to filter URL keywords, or Web Event parameters reported via the Pixel. Enum value: URL: URL keywords. CONTENT_TYPE: the parameter content_type. PRICE: the parameter price. VALUE: the parameter value. CONTENT_ID: the parameter content_id. CONTENT_CATEGORY: the parameter content_category.  # noqa: E501

        :return: The field of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetParameterFilters.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetParameterFilters.

        Required when parameter_filters within exclusion_rule_set is passed. Filter condition. Use this field to specify whether to filter URL keywords, or Web Event parameters reported via the Pixel. Enum value: URL: URL keywords. CONTENT_TYPE: the parameter content_type. PRICE: the parameter price. VALUE: the parameter value. CONTENT_ID: the parameter content_id. CONTENT_CATEGORY: the parameter content_category.  # noqa: E501

        :param field: The field of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetParameterFilters.  # noqa: E501
        :type: str
        """
        if field is None:
            raise ValueError("Invalid value for `field`, must not be `None`")  # noqa: E501

        self._field = field

    @property
    def operator(self):
        """Gets the operator of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetParameterFilters.  # noqa: E501

        Required when parameter_filters within exclusion_rule_set is passed. Filter operator between filter condition and filter value. Enum value: CONTAINS: contains. DOES_NOT_CONTAIN: doesn't contain. EQ: equals. IS_LESS_THAN: is less than. IS_GREATER_THAN: is greater than. IS_LESS_THAN_OR_EQUAL_TO: is less than or equal to. IS_GRETER_THAN_OR_EQUAL_TO: is greater than or equal to. The allowed values vary based on the field value: If field is set to URL, operator can only be set to CONTAINS, DOES_NOT_CONTAIN, or EQ. If field is not set to URL, operator can be set to CONTAINS, DOES_NOT_CONTAINS, EQ, IS_LESS_THAN, IS_GREATER_THAN, IS_LESS_THAN_OR_EQUAL_TO, or IS_GREATER_THAN_OR_EQUAL_TO.  # noqa: E501

        :return: The operator of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetParameterFilters.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetParameterFilters.

        Required when parameter_filters within exclusion_rule_set is passed. Filter operator between filter condition and filter value. Enum value: CONTAINS: contains. DOES_NOT_CONTAIN: doesn't contain. EQ: equals. IS_LESS_THAN: is less than. IS_GREATER_THAN: is greater than. IS_LESS_THAN_OR_EQUAL_TO: is less than or equal to. IS_GRETER_THAN_OR_EQUAL_TO: is greater than or equal to. The allowed values vary based on the field value: If field is set to URL, operator can only be set to CONTAINS, DOES_NOT_CONTAIN, or EQ. If field is not set to URL, operator can be set to CONTAINS, DOES_NOT_CONTAINS, EQ, IS_LESS_THAN, IS_GREATER_THAN, IS_LESS_THAN_OR_EQUAL_TO, or IS_GREATER_THAN_OR_EQUAL_TO.  # noqa: E501

        :param operator: The operator of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetParameterFilters.  # noqa: E501
        :type: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501

        self._operator = operator

    @property
    def values(self):
        """Gets the values of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetParameterFilters.  # noqa: E501

        Required when parameter_filters within exclusion_rule_set is passed. A list of filter values. Max size: 10. Length limit for each value: 100 characters. If you specify multiple values, the values will be combined using OR logic.  # noqa: E501

        :return: The values of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetParameterFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetParameterFilters.

        Required when parameter_filters within exclusion_rule_set is passed. A list of filter values. Max size: 10. Length limit for each value: 100 characters. If you specify multiple values, the values will be combined using OR logic.  # noqa: E501

        :param values: The values of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetParameterFilters.  # noqa: E501
        :type: list[str]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetParameterFilters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSetParameterFilters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
