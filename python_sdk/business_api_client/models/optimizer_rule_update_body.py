# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class OptimizerRuleUpdateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'lang': 'str',
        'rules': 'list[OptimizerRuleUpdateBodyRules]'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'lang': 'lang',
        'rules': 'rules'
    }

    def __init__(self, advertiser_id=None, lang='EN', rules=None):  # noqa: E501
        """OptimizerRuleUpdateBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._lang = None
        self._rules = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        if lang is not None:
            self.lang = lang
        self.rules = rules

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this OptimizerRuleUpdateBody.  # noqa: E501


        :return: The advertiser_id of this OptimizerRuleUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this OptimizerRuleUpdateBody.


        :param advertiser_id: The advertiser_id of this OptimizerRuleUpdateBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def lang(self):
        """Gets the lang of this OptimizerRuleUpdateBody.  # noqa: E501


        :return: The lang of this OptimizerRuleUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this OptimizerRuleUpdateBody.


        :param lang: The lang of this OptimizerRuleUpdateBody.  # noqa: E501
        :type: str
        """

        self._lang = lang

    @property
    def rules(self):
        """Gets the rules of this OptimizerRuleUpdateBody.  # noqa: E501


        :return: The rules of this OptimizerRuleUpdateBody.  # noqa: E501
        :rtype: list[OptimizerRuleUpdateBodyRules]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this OptimizerRuleUpdateBody.


        :param rules: The rules of this OptimizerRuleUpdateBody.  # noqa: E501
        :type: list[OptimizerRuleUpdateBodyRules]
        """
        if rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")  # noqa: E501

        self._rules = rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptimizerRuleUpdateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizerRuleUpdateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
