# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class OptimizerRuleCreateBodyRuleExecInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exec_time': 'str',
        'exec_time_type': 'str',
        'time_period_info': 'list[OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo]'
    }

    attribute_map = {
        'exec_time': 'exec_time',
        'exec_time_type': 'exec_time_type',
        'time_period_info': 'time_period_info'
    }

    def __init__(self, exec_time=None, exec_time_type=None, time_period_info=None):  # noqa: E501
        """OptimizerRuleCreateBodyRuleExecInfo - a model defined in Swagger"""  # noqa: E501
        self._exec_time = None
        self._exec_time_type = None
        self._time_period_info = None
        self.discriminator = None
        if exec_time is not None:
            self.exec_time = exec_time
        self.exec_time_type = exec_time_type
        if time_period_info is not None:
            self.time_period_info = time_period_info

    @property
    def exec_time(self):
        """Gets the exec_time of this OptimizerRuleCreateBodyRuleExecInfo.  # noqa: E501


        :return: The exec_time of this OptimizerRuleCreateBodyRuleExecInfo.  # noqa: E501
        :rtype: str
        """
        return self._exec_time

    @exec_time.setter
    def exec_time(self, exec_time):
        """Sets the exec_time of this OptimizerRuleCreateBodyRuleExecInfo.


        :param exec_time: The exec_time of this OptimizerRuleCreateBodyRuleExecInfo.  # noqa: E501
        :type: str
        """

        self._exec_time = exec_time

    @property
    def exec_time_type(self):
        """Gets the exec_time_type of this OptimizerRuleCreateBodyRuleExecInfo.  # noqa: E501


        :return: The exec_time_type of this OptimizerRuleCreateBodyRuleExecInfo.  # noqa: E501
        :rtype: str
        """
        return self._exec_time_type

    @exec_time_type.setter
    def exec_time_type(self, exec_time_type):
        """Sets the exec_time_type of this OptimizerRuleCreateBodyRuleExecInfo.


        :param exec_time_type: The exec_time_type of this OptimizerRuleCreateBodyRuleExecInfo.  # noqa: E501
        :type: str
        """
        if exec_time_type is None:
            raise ValueError("Invalid value for `exec_time_type`, must not be `None`")  # noqa: E501

        self._exec_time_type = exec_time_type

    @property
    def time_period_info(self):
        """Gets the time_period_info of this OptimizerRuleCreateBodyRuleExecInfo.  # noqa: E501


        :return: The time_period_info of this OptimizerRuleCreateBodyRuleExecInfo.  # noqa: E501
        :rtype: list[OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo]
        """
        return self._time_period_info

    @time_period_info.setter
    def time_period_info(self, time_period_info):
        """Sets the time_period_info of this OptimizerRuleCreateBodyRuleExecInfo.


        :param time_period_info: The time_period_info of this OptimizerRuleCreateBodyRuleExecInfo.  # noqa: E501
        :type: list[OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo]
        """

        self._time_period_info = time_period_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptimizerRuleCreateBodyRuleExecInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizerRuleCreateBodyRuleExecInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
