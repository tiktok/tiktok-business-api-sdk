# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class FilteringBcAssetGet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'keyword': 'str',
        'user_email': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'keyword': 'keyword',
        'user_email': 'user_email',
        'user_id': 'user_id'
    }

    def __init__(self, keyword=None, user_email=None, user_id=None):  # noqa: E501
        """FilteringBcAssetGet - a model defined in Swagger"""  # noqa: E501
        self._keyword = None
        self._user_email = None
        self._user_id = None
        self.discriminator = None
        if keyword is not None:
            self.keyword = keyword
        if user_email is not None:
            self.user_email = user_email
        if user_id is not None:
            self.user_id = user_id

    @property
    def keyword(self):
        """Gets the keyword of this FilteringBcAssetGet.  # noqa: E501

        Keyword filter for asset search.  # noqa: E501

        :return: The keyword of this FilteringBcAssetGet.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this FilteringBcAssetGet.

        Keyword filter for asset search.  # noqa: E501

        :param keyword: The keyword of this FilteringBcAssetGet.  # noqa: E501
        :type: str
        """

        self._keyword = keyword

    @property
    def user_email(self):
        """Gets the user_email of this FilteringBcAssetGet.  # noqa: E501

        User email filter.  # noqa: E501

        :return: The user_email of this FilteringBcAssetGet.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this FilteringBcAssetGet.

        User email filter.  # noqa: E501

        :param user_email: The user_email of this FilteringBcAssetGet.  # noqa: E501
        :type: str
        """

        self._user_email = user_email

    @property
    def user_id(self):
        """Gets the user_id of this FilteringBcAssetGet.  # noqa: E501

        User ID filter.  # noqa: E501

        :return: The user_id of this FilteringBcAssetGet.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this FilteringBcAssetGet.

        User ID filter.  # noqa: E501

        :param user_id: The user_id of this FilteringBcAssetGet.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilteringBcAssetGet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilteringBcAssetGet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
