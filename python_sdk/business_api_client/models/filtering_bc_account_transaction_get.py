# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class FilteringBcAccountTransactionGet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_ids': 'list[str]',
        'account_name': 'str',
        'billing_types': 'list[str]',
        'end_time': 'str',
        'owner_of_account': 'list[str]',
        'start_time': 'str',
        'transaction_types': 'list[str]'
    }

    attribute_map = {
        'account_ids': 'account_ids',
        'account_name': 'account_name',
        'billing_types': 'billing_types',
        'end_time': 'end_time',
        'owner_of_account': 'owner_of_account',
        'start_time': 'start_time',
        'transaction_types': 'transaction_types'
    }

    def __init__(self, account_ids=None, account_name=None, billing_types=None, end_time=None, owner_of_account=None, start_time=None, transaction_types=None):  # noqa: E501
        """FilteringBcAccountTransactionGet - a model defined in Swagger"""  # noqa: E501
        self._account_ids = None
        self._account_name = None
        self._billing_types = None
        self._end_time = None
        self._owner_of_account = None
        self._start_time = None
        self._transaction_types = None
        self.discriminator = None
        if account_ids is not None:
            self.account_ids = account_ids
        if account_name is not None:
            self.account_name = account_name
        if billing_types is not None:
            self.billing_types = billing_types
        if end_time is not None:
            self.end_time = end_time
        if owner_of_account is not None:
            self.owner_of_account = owner_of_account
        if start_time is not None:
            self.start_time = start_time
        if transaction_types is not None:
            self.transaction_types = transaction_types

    @property
    def account_ids(self):
        """Gets the account_ids of this FilteringBcAccountTransactionGet.  # noqa: E501

        List of account IDs.  # noqa: E501

        :return: The account_ids of this FilteringBcAccountTransactionGet.  # noqa: E501
        :rtype: list[str]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """Sets the account_ids of this FilteringBcAccountTransactionGet.

        List of account IDs.  # noqa: E501

        :param account_ids: The account_ids of this FilteringBcAccountTransactionGet.  # noqa: E501
        :type: list[str]
        """

        self._account_ids = account_ids

    @property
    def account_name(self):
        """Gets the account_name of this FilteringBcAccountTransactionGet.  # noqa: E501

        Account name.  # noqa: E501

        :return: The account_name of this FilteringBcAccountTransactionGet.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this FilteringBcAccountTransactionGet.

        Account name.  # noqa: E501

        :param account_name: The account_name of this FilteringBcAccountTransactionGet.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def billing_types(self):
        """Gets the billing_types of this FilteringBcAccountTransactionGet.  # noqa: E501

        Billing types.  # noqa: E501

        :return: The billing_types of this FilteringBcAccountTransactionGet.  # noqa: E501
        :rtype: list[str]
        """
        return self._billing_types

    @billing_types.setter
    def billing_types(self, billing_types):
        """Sets the billing_types of this FilteringBcAccountTransactionGet.

        Billing types.  # noqa: E501

        :param billing_types: The billing_types of this FilteringBcAccountTransactionGet.  # noqa: E501
        :type: list[str]
        """

        self._billing_types = billing_types

    @property
    def end_time(self):
        """Gets the end_time of this FilteringBcAccountTransactionGet.  # noqa: E501

        End time for filtering transactions.  # noqa: E501

        :return: The end_time of this FilteringBcAccountTransactionGet.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this FilteringBcAccountTransactionGet.

        End time for filtering transactions.  # noqa: E501

        :param end_time: The end_time of this FilteringBcAccountTransactionGet.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def owner_of_account(self):
        """Gets the owner_of_account of this FilteringBcAccountTransactionGet.  # noqa: E501

        Owners of the account.  # noqa: E501

        :return: The owner_of_account of this FilteringBcAccountTransactionGet.  # noqa: E501
        :rtype: list[str]
        """
        return self._owner_of_account

    @owner_of_account.setter
    def owner_of_account(self, owner_of_account):
        """Sets the owner_of_account of this FilteringBcAccountTransactionGet.

        Owners of the account.  # noqa: E501

        :param owner_of_account: The owner_of_account of this FilteringBcAccountTransactionGet.  # noqa: E501
        :type: list[str]
        """

        self._owner_of_account = owner_of_account

    @property
    def start_time(self):
        """Gets the start_time of this FilteringBcAccountTransactionGet.  # noqa: E501

        Start time for filtering transactions.  # noqa: E501

        :return: The start_time of this FilteringBcAccountTransactionGet.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this FilteringBcAccountTransactionGet.

        Start time for filtering transactions.  # noqa: E501

        :param start_time: The start_time of this FilteringBcAccountTransactionGet.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def transaction_types(self):
        """Gets the transaction_types of this FilteringBcAccountTransactionGet.  # noqa: E501

        Transaction types.  # noqa: E501

        :return: The transaction_types of this FilteringBcAccountTransactionGet.  # noqa: E501
        :rtype: list[str]
        """
        return self._transaction_types

    @transaction_types.setter
    def transaction_types(self, transaction_types):
        """Sets the transaction_types of this FilteringBcAccountTransactionGet.

        Transaction types.  # noqa: E501

        :param transaction_types: The transaction_types of this FilteringBcAccountTransactionGet.  # noqa: E501
        :type: list[str]
        """

        self._transaction_types = transaction_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilteringBcAccountTransactionGet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilteringBcAccountTransactionGet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
