# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class FileUploadBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'calculate_type': 'str',
        'context_info': 'OpenApiv13dmpcustomAudiencefileuploadContextInfo',
        'file': 'str',
        'file_name': 'str',
        'file_signature': 'str'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'calculate_type': 'calculate_type',
        'context_info': 'context_info',
        'file': 'file',
        'file_name': 'file_name',
        'file_signature': 'file_signature'
    }

    def __init__(self, advertiser_id=None, calculate_type=None, context_info=None, file=None, file_name=None, file_signature=None):  # noqa: E501
        """FileUploadBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._calculate_type = None
        self._context_info = None
        self._file = None
        self._file_name = None
        self._file_signature = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        self.calculate_type = calculate_type
        if context_info is not None:
            self.context_info = context_info
        self.file = file
        if file_name is not None:
            self.file_name = file_name
        self.file_signature = file_signature

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this FileUploadBody.  # noqa: E501

        Advertiser ID.  # noqa: E501

        :return: The advertiser_id of this FileUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this FileUploadBody.

        Advertiser ID.  # noqa: E501

        :param advertiser_id: The advertiser_id of this FileUploadBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def calculate_type(self):
        """Gets the calculate_type of this FileUploadBody.  # noqa: E501

        Encryption type. The value for this field must be consistent with the actual file data. Otherwise, your upload will fail or you will not be able to create a valid audience. For enum values, see Enumeration - Encryption Type.  # noqa: E501

        :return: The calculate_type of this FileUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._calculate_type

    @calculate_type.setter
    def calculate_type(self, calculate_type):
        """Sets the calculate_type of this FileUploadBody.

        Encryption type. The value for this field must be consistent with the actual file data. Otherwise, your upload will fail or you will not be able to create a valid audience. For enum values, see Enumeration - Encryption Type.  # noqa: E501

        :param calculate_type: The calculate_type of this FileUploadBody.  # noqa: E501
        :type: str
        """
        if calculate_type is None:
            raise ValueError("Invalid value for `calculate_type`, must not be `None`")  # noqa: E501

        self._calculate_type = calculate_type

    @property
    def context_info(self):
        """Gets the context_info of this FileUploadBody.  # noqa: E501


        :return: The context_info of this FileUploadBody.  # noqa: E501
        :rtype: OpenApiv13dmpcustomAudiencefileuploadContextInfo
        """
        return self._context_info

    @context_info.setter
    def context_info(self, context_info):
        """Sets the context_info of this FileUploadBody.


        :param context_info: The context_info of this FileUploadBody.  # noqa: E501
        :type: OpenApiv13dmpcustomAudiencefileuploadContextInfo
        """

        self._context_info = context_info

    @property
    def file(self):
        """Gets the file of this FileUploadBody.  # noqa: E501

        Data files. Only supports CSV and TXT files. The file suffixes should exactly be .csv or .txt.  # noqa: E501

        :return: The file of this FileUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this FileUploadBody.

        Data files. Only supports CSV and TXT files. The file suffixes should exactly be .csv or .txt.  # noqa: E501

        :param file: The file of this FileUploadBody.  # noqa: E501
        :type: str
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def file_name(self):
        """Gets the file_name of this FileUploadBody.  # noqa: E501

        FileName.  # noqa: E501

        :return: The file_name of this FileUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this FileUploadBody.

        FileName.  # noqa: E501

        :param file_name: The file_name of this FileUploadBody.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def file_signature(self):
        """Gets the file_signature of this FileUploadBody.  # noqa: E501

        The file's MD5, which is used for server-side verification.  # noqa: E501

        :return: The file_signature of this FileUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._file_signature

    @file_signature.setter
    def file_signature(self, file_signature):
        """Sets the file_signature of this FileUploadBody.

        The file's MD5, which is used for server-side verification.  # noqa: E501

        :param file_signature: The file_signature of this FileUploadBody.  # noqa: E501
        :type: str
        """
        if file_signature is None:
            raise ValueError("Invalid value for `file_signature`, must not be `None`")  # noqa: E501

        self._file_signature = file_signature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileUploadBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileUploadBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
