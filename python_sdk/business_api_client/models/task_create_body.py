# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class TaskCreateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'advertiser_ids': 'list[str]',
        'data_level': 'str',
        'dimensions': 'list[str]',
        'enable_report_title_translation': 'bool',
        'end_date': 'str',
        'file_name': 'str',
        'filtering': 'list[ReporttaskcreateFiltering]',
        'metrics': 'list[str]',
        'order_field': 'str',
        'order_type': 'str',
        'output_format': 'str',
        'query_lifetime': 'bool',
        'report_type': 'str',
        'service_type': 'str',
        'start_date': 'str'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'advertiser_ids': 'advertiser_ids',
        'data_level': 'data_level',
        'dimensions': 'dimensions',
        'enable_report_title_translation': 'enable_report_title_translation',
        'end_date': 'end_date',
        'file_name': 'file_name',
        'filtering': 'filtering',
        'metrics': 'metrics',
        'order_field': 'order_field',
        'order_type': 'order_type',
        'output_format': 'output_format',
        'query_lifetime': 'query_lifetime',
        'report_type': 'report_type',
        'service_type': 'service_type',
        'start_date': 'start_date'
    }

    def __init__(self, advertiser_id=None, advertiser_ids=None, data_level=None, dimensions=None, enable_report_title_translation=True, end_date=None, file_name=' ', filtering=None, metrics=None, order_field=None, order_type='DESC', output_format='CSV_STRING', query_lifetime=False, report_type=None, service_type='AUCTION', start_date=None):  # noqa: E501
        """TaskCreateBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._advertiser_ids = None
        self._data_level = None
        self._dimensions = None
        self._enable_report_title_translation = None
        self._end_date = None
        self._file_name = None
        self._filtering = None
        self._metrics = None
        self._order_field = None
        self._order_type = None
        self._output_format = None
        self._query_lifetime = None
        self._report_type = None
        self._service_type = None
        self._start_date = None
        self.discriminator = None
        if advertiser_id is not None:
            self.advertiser_id = advertiser_id
        if advertiser_ids is not None:
            self.advertiser_ids = advertiser_ids
        if data_level is not None:
            self.data_level = data_level
        self.dimensions = dimensions
        if enable_report_title_translation is not None:
            self.enable_report_title_translation = enable_report_title_translation
        if end_date is not None:
            self.end_date = end_date
        if file_name is not None:
            self.file_name = file_name
        if filtering is not None:
            self.filtering = filtering
        if metrics is not None:
            self.metrics = metrics
        if order_field is not None:
            self.order_field = order_field
        if order_type is not None:
            self.order_type = order_type
        if output_format is not None:
            self.output_format = output_format
        if query_lifetime is not None:
            self.query_lifetime = query_lifetime
        self.report_type = report_type
        if service_type is not None:
            self.service_type = service_type
        if start_date is not None:
            self.start_date = start_date

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this TaskCreateBody.  # noqa: E501


        :return: The advertiser_id of this TaskCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this TaskCreateBody.


        :param advertiser_id: The advertiser_id of this TaskCreateBody.  # noqa: E501
        :type: str
        """

        self._advertiser_id = advertiser_id

    @property
    def advertiser_ids(self):
        """Gets the advertiser_ids of this TaskCreateBody.  # noqa: E501


        :return: The advertiser_ids of this TaskCreateBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._advertiser_ids

    @advertiser_ids.setter
    def advertiser_ids(self, advertiser_ids):
        """Sets the advertiser_ids of this TaskCreateBody.


        :param advertiser_ids: The advertiser_ids of this TaskCreateBody.  # noqa: E501
        :type: list[str]
        """

        self._advertiser_ids = advertiser_ids

    @property
    def data_level(self):
        """Gets the data_level of this TaskCreateBody.  # noqa: E501


        :return: The data_level of this TaskCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._data_level

    @data_level.setter
    def data_level(self, data_level):
        """Sets the data_level of this TaskCreateBody.


        :param data_level: The data_level of this TaskCreateBody.  # noqa: E501
        :type: str
        """

        self._data_level = data_level

    @property
    def dimensions(self):
        """Gets the dimensions of this TaskCreateBody.  # noqa: E501


        :return: The dimensions of this TaskCreateBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this TaskCreateBody.


        :param dimensions: The dimensions of this TaskCreateBody.  # noqa: E501
        :type: list[str]
        """
        if dimensions is None:
            raise ValueError("Invalid value for `dimensions`, must not be `None`")  # noqa: E501

        self._dimensions = dimensions

    @property
    def enable_report_title_translation(self):
        """Gets the enable_report_title_translation of this TaskCreateBody.  # noqa: E501


        :return: The enable_report_title_translation of this TaskCreateBody.  # noqa: E501
        :rtype: bool
        """
        return self._enable_report_title_translation

    @enable_report_title_translation.setter
    def enable_report_title_translation(self, enable_report_title_translation):
        """Sets the enable_report_title_translation of this TaskCreateBody.


        :param enable_report_title_translation: The enable_report_title_translation of this TaskCreateBody.  # noqa: E501
        :type: bool
        """

        self._enable_report_title_translation = enable_report_title_translation

    @property
    def end_date(self):
        """Gets the end_date of this TaskCreateBody.  # noqa: E501


        :return: The end_date of this TaskCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this TaskCreateBody.


        :param end_date: The end_date of this TaskCreateBody.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def file_name(self):
        """Gets the file_name of this TaskCreateBody.  # noqa: E501


        :return: The file_name of this TaskCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this TaskCreateBody.


        :param file_name: The file_name of this TaskCreateBody.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def filtering(self):
        """Gets the filtering of this TaskCreateBody.  # noqa: E501


        :return: The filtering of this TaskCreateBody.  # noqa: E501
        :rtype: list[ReporttaskcreateFiltering]
        """
        return self._filtering

    @filtering.setter
    def filtering(self, filtering):
        """Sets the filtering of this TaskCreateBody.


        :param filtering: The filtering of this TaskCreateBody.  # noqa: E501
        :type: list[ReporttaskcreateFiltering]
        """

        self._filtering = filtering

    @property
    def metrics(self):
        """Gets the metrics of this TaskCreateBody.  # noqa: E501


        :return: The metrics of this TaskCreateBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this TaskCreateBody.


        :param metrics: The metrics of this TaskCreateBody.  # noqa: E501
        :type: list[str]
        """

        self._metrics = metrics

    @property
    def order_field(self):
        """Gets the order_field of this TaskCreateBody.  # noqa: E501


        :return: The order_field of this TaskCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._order_field

    @order_field.setter
    def order_field(self, order_field):
        """Sets the order_field of this TaskCreateBody.


        :param order_field: The order_field of this TaskCreateBody.  # noqa: E501
        :type: str
        """

        self._order_field = order_field

    @property
    def order_type(self):
        """Gets the order_type of this TaskCreateBody.  # noqa: E501


        :return: The order_type of this TaskCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this TaskCreateBody.


        :param order_type: The order_type of this TaskCreateBody.  # noqa: E501
        :type: str
        """

        self._order_type = order_type

    @property
    def output_format(self):
        """Gets the output_format of this TaskCreateBody.  # noqa: E501


        :return: The output_format of this TaskCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format):
        """Sets the output_format of this TaskCreateBody.


        :param output_format: The output_format of this TaskCreateBody.  # noqa: E501
        :type: str
        """

        self._output_format = output_format

    @property
    def query_lifetime(self):
        """Gets the query_lifetime of this TaskCreateBody.  # noqa: E501


        :return: The query_lifetime of this TaskCreateBody.  # noqa: E501
        :rtype: bool
        """
        return self._query_lifetime

    @query_lifetime.setter
    def query_lifetime(self, query_lifetime):
        """Sets the query_lifetime of this TaskCreateBody.


        :param query_lifetime: The query_lifetime of this TaskCreateBody.  # noqa: E501
        :type: bool
        """

        self._query_lifetime = query_lifetime

    @property
    def report_type(self):
        """Gets the report_type of this TaskCreateBody.  # noqa: E501


        :return: The report_type of this TaskCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this TaskCreateBody.


        :param report_type: The report_type of this TaskCreateBody.  # noqa: E501
        :type: str
        """
        if report_type is None:
            raise ValueError("Invalid value for `report_type`, must not be `None`")  # noqa: E501

        self._report_type = report_type

    @property
    def service_type(self):
        """Gets the service_type of this TaskCreateBody.  # noqa: E501


        :return: The service_type of this TaskCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this TaskCreateBody.


        :param service_type: The service_type of this TaskCreateBody.  # noqa: E501
        :type: str
        """

        self._service_type = service_type

    @property
    def start_date(self):
        """Gets the start_date of this TaskCreateBody.  # noqa: E501


        :return: The start_date of this TaskCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TaskCreateBody.


        :param start_date: The start_date of this TaskCreateBody.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskCreateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskCreateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
