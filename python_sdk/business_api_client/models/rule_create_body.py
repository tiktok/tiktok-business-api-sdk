# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class RuleCreateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'audience_sub_type': 'str',
        'audience_type': 'str',
        'custom_audience_name': 'str',
        'identity_authorized_bc_id': 'str',
        'identity_id': 'str',
        'identity_type': 'str',
        'is_auto_refresh': 'bool',
        'retention_in_days': 'int',
        'rule_spec': 'OpenApiv13dmpcustomAudiencerulecreateRuleSpec'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'audience_sub_type': 'audience_sub_type',
        'audience_type': 'audience_type',
        'custom_audience_name': 'custom_audience_name',
        'identity_authorized_bc_id': 'identity_authorized_bc_id',
        'identity_id': 'identity_id',
        'identity_type': 'identity_type',
        'is_auto_refresh': 'is_auto_refresh',
        'retention_in_days': 'retention_in_days',
        'rule_spec': 'rule_spec'
    }

    def __init__(self, advertiser_id=None, audience_sub_type=None, audience_type=None, custom_audience_name=None, identity_authorized_bc_id=None, identity_id=None, identity_type=None, is_auto_refresh=None, retention_in_days=None, rule_spec=None):  # noqa: E501
        """RuleCreateBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._audience_sub_type = None
        self._audience_type = None
        self._custom_audience_name = None
        self._identity_authorized_bc_id = None
        self._identity_id = None
        self._identity_type = None
        self._is_auto_refresh = None
        self._retention_in_days = None
        self._rule_spec = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        if audience_sub_type is not None:
            self.audience_sub_type = audience_sub_type
        self.audience_type = audience_type
        self.custom_audience_name = custom_audience_name
        if identity_authorized_bc_id is not None:
            self.identity_authorized_bc_id = identity_authorized_bc_id
        if identity_id is not None:
            self.identity_id = identity_id
        if identity_type is not None:
            self.identity_type = identity_type
        if is_auto_refresh is not None:
            self.is_auto_refresh = is_auto_refresh
        if retention_in_days is not None:
            self.retention_in_days = retention_in_days
        self.rule_spec = rule_spec

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this RuleCreateBody.  # noqa: E501

        Advertiser ID.  # noqa: E501

        :return: The advertiser_id of this RuleCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this RuleCreateBody.

        Advertiser ID.  # noqa: E501

        :param advertiser_id: The advertiser_id of this RuleCreateBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def audience_sub_type(self):
        """Gets the audience_sub_type of this RuleCreateBody.  # noqa: E501

        Audience sub type, indicating the type of ads that the audience can be used. Enum values: NORMAL: Audience for non-Reach & Frequency ads. REACH_FREQUENCY: Audience for Reach & Frequency ads. It can only be used in Reach & Frequency ads. Default value: NORMAL.  # noqa: E501

        :return: The audience_sub_type of this RuleCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._audience_sub_type

    @audience_sub_type.setter
    def audience_sub_type(self, audience_sub_type):
        """Sets the audience_sub_type of this RuleCreateBody.

        Audience sub type, indicating the type of ads that the audience can be used. Enum values: NORMAL: Audience for non-Reach & Frequency ads. REACH_FREQUENCY: Audience for Reach & Frequency ads. It can only be used in Reach & Frequency ads. Default value: NORMAL.  # noqa: E501

        :param audience_sub_type: The audience_sub_type of this RuleCreateBody.  # noqa: E501
        :type: str
        """

        self._audience_sub_type = audience_sub_type

    @property
    def audience_type(self):
        """Gets the audience_type of this RuleCreateBody.  # noqa: E501

        Audience type. Enum values: ENGAGEMENT: Engagement Audience (with asset type as ad groups). ENGAGEMENT_ORGANIC_VIDEO: Organic Engagement Audience (with asset type as public video). ENGAGEMENT_LIVE_VIDEO: Live Engagement Audience (with asset type as live video). APP: App Activity Audience. PIXEL: Website Traffic Audience. LEAD_GENERATION: Lead Generation Audience. BUSINESS_ACCOUNT: Business Account Audience. TIKTOK_SHOP: Shop Activity Audience. OFFLINE: Offline Activity Audience.  # noqa: E501

        :return: The audience_type of this RuleCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._audience_type

    @audience_type.setter
    def audience_type(self, audience_type):
        """Sets the audience_type of this RuleCreateBody.

        Audience type. Enum values: ENGAGEMENT: Engagement Audience (with asset type as ad groups). ENGAGEMENT_ORGANIC_VIDEO: Organic Engagement Audience (with asset type as public video). ENGAGEMENT_LIVE_VIDEO: Live Engagement Audience (with asset type as live video). APP: App Activity Audience. PIXEL: Website Traffic Audience. LEAD_GENERATION: Lead Generation Audience. BUSINESS_ACCOUNT: Business Account Audience. TIKTOK_SHOP: Shop Activity Audience. OFFLINE: Offline Activity Audience.  # noqa: E501

        :param audience_type: The audience_type of this RuleCreateBody.  # noqa: E501
        :type: str
        """
        if audience_type is None:
            raise ValueError("Invalid value for `audience_type`, must not be `None`")  # noqa: E501

        self._audience_type = audience_type

    @property
    def custom_audience_name(self):
        """Gets the custom_audience_name of this RuleCreateBody.  # noqa: E501

        Audience name. Length limit: 128 characters.  # noqa: E501

        :return: The custom_audience_name of this RuleCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._custom_audience_name

    @custom_audience_name.setter
    def custom_audience_name(self, custom_audience_name):
        """Sets the custom_audience_name of this RuleCreateBody.

        Audience name. Length limit: 128 characters.  # noqa: E501

        :param custom_audience_name: The custom_audience_name of this RuleCreateBody.  # noqa: E501
        :type: str
        """
        if custom_audience_name is None:
            raise ValueError("Invalid value for `custom_audience_name`, must not be `None`")  # noqa: E501

        self._custom_audience_name = custom_audience_name

    @property
    def identity_authorized_bc_id(self):
        """Gets the identity_authorized_bc_id of this RuleCreateBody.  # noqa: E501

        Required when identity_type is BC_AUTH_TT. ID of the Business Center that a TikTok Account User in Business Center identity is associated with.  # noqa: E501

        :return: The identity_authorized_bc_id of this RuleCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._identity_authorized_bc_id

    @identity_authorized_bc_id.setter
    def identity_authorized_bc_id(self, identity_authorized_bc_id):
        """Sets the identity_authorized_bc_id of this RuleCreateBody.

        Required when identity_type is BC_AUTH_TT. ID of the Business Center that a TikTok Account User in Business Center identity is associated with.  # noqa: E501

        :param identity_authorized_bc_id: The identity_authorized_bc_id of this RuleCreateBody.  # noqa: E501
        :type: str
        """

        self._identity_authorized_bc_id = identity_authorized_bc_id

    @property
    def identity_id(self):
        """Gets the identity_id of this RuleCreateBody.  # noqa: E501

        Required when audience_type is ENGAGEMENT_LIVE_VIDEO or ENGAGEMENT_ORGANIC_VIDEO. Identity ID.  # noqa: E501

        :return: The identity_id of this RuleCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._identity_id

    @identity_id.setter
    def identity_id(self, identity_id):
        """Sets the identity_id of this RuleCreateBody.

        Required when audience_type is ENGAGEMENT_LIVE_VIDEO or ENGAGEMENT_ORGANIC_VIDEO. Identity ID.  # noqa: E501

        :param identity_id: The identity_id of this RuleCreateBody.  # noqa: E501
        :type: str
        """

        self._identity_id = identity_id

    @property
    def identity_type(self):
        """Gets the identity_type of this RuleCreateBody.  # noqa: E501

        Required when audience_type is ENGAGEMENT_LIVE_VIDEO or ENGAGEMENT_ORGANIC_VIDEO. Identity type. Enum values: TT_USER, BC_AUTH_TT  # noqa: E501

        :return: The identity_type of this RuleCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._identity_type

    @identity_type.setter
    def identity_type(self, identity_type):
        """Sets the identity_type of this RuleCreateBody.

        Required when audience_type is ENGAGEMENT_LIVE_VIDEO or ENGAGEMENT_ORGANIC_VIDEO. Identity type. Enum values: TT_USER, BC_AUTH_TT  # noqa: E501

        :param identity_type: The identity_type of this RuleCreateBody.  # noqa: E501
        :type: str
        """

        self._identity_type = identity_type

    @property
    def is_auto_refresh(self):
        """Gets the is_auto_refresh of this RuleCreateBody.  # noqa: E501

        Whether to turn on the audience auto-refresh function. Supported values: true, false. Default value: true. If you enable this feature, your audience will automatically refresh to include the latest user data according to the lookback window you set. If you disable this feature, your audience will not automatically refresh.  # noqa: E501

        :return: The is_auto_refresh of this RuleCreateBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_refresh

    @is_auto_refresh.setter
    def is_auto_refresh(self, is_auto_refresh):
        """Sets the is_auto_refresh of this RuleCreateBody.

        Whether to turn on the audience auto-refresh function. Supported values: true, false. Default value: true. If you enable this feature, your audience will automatically refresh to include the latest user data according to the lookback window you set. If you disable this feature, your audience will not automatically refresh.  # noqa: E501

        :param is_auto_refresh: The is_auto_refresh of this RuleCreateBody.  # noqa: E501
        :type: bool
        """

        self._is_auto_refresh = is_auto_refresh

    @property
    def retention_in_days(self):
        """Gets the retention_in_days of this RuleCreateBody.  # noqa: E501

        Number of days to retain the audience. Value range: 1-365. Note: If this field is passed, the expiration date will be the specified number of retention days from the date when the audience was created. Any operations to the audience CANNOT reset the expiration date. If this field is not passed, the expiration date will be 365 days from the last time the audience was applied to an active ad group or modified. Applying the audience to an active ad group or modifying the audience will reset the expiration date. To learn about the actions that will reset the expiration date, refer to the Help Center article Audience Expiration Policy.  # noqa: E501

        :return: The retention_in_days of this RuleCreateBody.  # noqa: E501
        :rtype: int
        """
        return self._retention_in_days

    @retention_in_days.setter
    def retention_in_days(self, retention_in_days):
        """Sets the retention_in_days of this RuleCreateBody.

        Number of days to retain the audience. Value range: 1-365. Note: If this field is passed, the expiration date will be the specified number of retention days from the date when the audience was created. Any operations to the audience CANNOT reset the expiration date. If this field is not passed, the expiration date will be 365 days from the last time the audience was applied to an active ad group or modified. Applying the audience to an active ad group or modifying the audience will reset the expiration date. To learn about the actions that will reset the expiration date, refer to the Help Center article Audience Expiration Policy.  # noqa: E501

        :param retention_in_days: The retention_in_days of this RuleCreateBody.  # noqa: E501
        :type: int
        """

        self._retention_in_days = retention_in_days

    @property
    def rule_spec(self):
        """Gets the rule_spec of this RuleCreateBody.  # noqa: E501


        :return: The rule_spec of this RuleCreateBody.  # noqa: E501
        :rtype: OpenApiv13dmpcustomAudiencerulecreateRuleSpec
        """
        return self._rule_spec

    @rule_spec.setter
    def rule_spec(self, rule_spec):
        """Sets the rule_spec of this RuleCreateBody.


        :param rule_spec: The rule_spec of this RuleCreateBody.  # noqa: E501
        :type: OpenApiv13dmpcustomAudiencerulecreateRuleSpec
        """
        if rule_spec is None:
            raise ValueError("Invalid value for `rule_spec`, must not be `None`")  # noqa: E501

        self._rule_spec = rule_spec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleCreateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleCreateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
