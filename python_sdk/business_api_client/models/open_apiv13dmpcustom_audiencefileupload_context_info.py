# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class OpenApiv13dmpcustomAudiencefileuploadContextInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'int',
        'core_user_id': 'int',
        'developer_id': 'int',
        'x_forwarded_for': 'str',
        'x_real_ip': 'str'
    }

    attribute_map = {
        'app_id': 'app_id',
        'core_user_id': 'core_user_id',
        'developer_id': 'developer_id',
        'x_forwarded_for': 'x_forwarded_for',
        'x_real_ip': 'x_real_ip'
    }

    def __init__(self, app_id=None, core_user_id=None, developer_id=None, x_forwarded_for=None, x_real_ip=None):  # noqa: E501
        """OpenApiv13dmpcustomAudiencefileuploadContextInfo - a model defined in Swagger"""  # noqa: E501
        self._app_id = None
        self._core_user_id = None
        self._developer_id = None
        self._x_forwarded_for = None
        self._x_real_ip = None
        self.discriminator = None
        if app_id is not None:
            self.app_id = app_id
        if core_user_id is not None:
            self.core_user_id = core_user_id
        if developer_id is not None:
            self.developer_id = developer_id
        if x_forwarded_for is not None:
            self.x_forwarded_for = x_forwarded_for
        if x_real_ip is not None:
            self.x_real_ip = x_real_ip

    @property
    def app_id(self):
        """Gets the app_id of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.  # noqa: E501


        :return: The app_id of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.  # noqa: E501
        :rtype: int
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.


        :param app_id: The app_id of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.  # noqa: E501
        :type: int
        """

        self._app_id = app_id

    @property
    def core_user_id(self):
        """Gets the core_user_id of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.  # noqa: E501


        :return: The core_user_id of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.  # noqa: E501
        :rtype: int
        """
        return self._core_user_id

    @core_user_id.setter
    def core_user_id(self, core_user_id):
        """Sets the core_user_id of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.


        :param core_user_id: The core_user_id of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.  # noqa: E501
        :type: int
        """

        self._core_user_id = core_user_id

    @property
    def developer_id(self):
        """Gets the developer_id of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.  # noqa: E501


        :return: The developer_id of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.  # noqa: E501
        :rtype: int
        """
        return self._developer_id

    @developer_id.setter
    def developer_id(self, developer_id):
        """Sets the developer_id of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.


        :param developer_id: The developer_id of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.  # noqa: E501
        :type: int
        """

        self._developer_id = developer_id

    @property
    def x_forwarded_for(self):
        """Gets the x_forwarded_for of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.  # noqa: E501


        :return: The x_forwarded_for of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.  # noqa: E501
        :rtype: str
        """
        return self._x_forwarded_for

    @x_forwarded_for.setter
    def x_forwarded_for(self, x_forwarded_for):
        """Sets the x_forwarded_for of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.


        :param x_forwarded_for: The x_forwarded_for of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.  # noqa: E501
        :type: str
        """

        self._x_forwarded_for = x_forwarded_for

    @property
    def x_real_ip(self):
        """Gets the x_real_ip of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.  # noqa: E501


        :return: The x_real_ip of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.  # noqa: E501
        :rtype: str
        """
        return self._x_real_ip

    @x_real_ip.setter
    def x_real_ip(self, x_real_ip):
        """Sets the x_real_ip of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.


        :param x_real_ip: The x_real_ip of this OpenApiv13dmpcustomAudiencefileuploadContextInfo.  # noqa: E501
        :type: str
        """

        self._x_real_ip = x_real_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenApiv13dmpcustomAudiencefileuploadContextInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenApiv13dmpcustomAudiencefileuploadContextInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
