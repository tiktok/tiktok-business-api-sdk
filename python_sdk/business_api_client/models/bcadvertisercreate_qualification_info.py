# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class bcadvertisercreateQualificationInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'license_image_id': 'str',
        'license_no': 'str',
        'promotion_link': 'str',
        'qualification_image_ids': 'list[str]'
    }

    attribute_map = {
        'license_image_id': 'license_image_id',
        'license_no': 'license_no',
        'promotion_link': 'promotion_link',
        'qualification_image_ids': 'qualification_image_ids'
    }

    def __init__(self, license_image_id=None, license_no=None, promotion_link=None, qualification_image_ids=None):  # noqa: E501
        """bcadvertisercreateQualificationInfo - a model defined in Swagger"""  # noqa: E501
        self._license_image_id = None
        self._license_no = None
        self._promotion_link = None
        self._qualification_image_ids = None
        self.discriminator = None
        if license_image_id is not None:
            self.license_image_id = license_image_id
        if license_no is not None:
            self.license_no = license_no
        if promotion_link is not None:
            self.promotion_link = promotion_link
        if qualification_image_ids is not None:
            self.qualification_image_ids = qualification_image_ids

    @property
    def license_image_id(self):
        """Gets the license_image_id of this bcadvertisercreateQualificationInfo.  # noqa: E501

        Qualified Document picture ID, see [Upload a business certificate](https://ads.tiktok.com/marketing_api/docs?id=1739938996913218). Note: This field is required for ad accounts that are registered in the Chinese mainland or Hong Kong  # noqa: E501

        :return: The license_image_id of this bcadvertisercreateQualificationInfo.  # noqa: E501
        :rtype: str
        """
        return self._license_image_id

    @license_image_id.setter
    def license_image_id(self, license_image_id):
        """Sets the license_image_id of this bcadvertisercreateQualificationInfo.

        Qualified Document picture ID, see [Upload a business certificate](https://ads.tiktok.com/marketing_api/docs?id=1739938996913218). Note: This field is required for ad accounts that are registered in the Chinese mainland or Hong Kong  # noqa: E501

        :param license_image_id: The license_image_id of this bcadvertisercreateQualificationInfo.  # noqa: E501
        :type: str
        """

        self._license_image_id = license_image_id

    @property
    def license_no(self):
        """Gets the license_no of this bcadvertisercreateQualificationInfo.  # noqa: E501

        Business license number. This field is required for ad accounts that are registered in the Chinese mainland, Hong Kong, or in countries Brazil and Mexico  # noqa: E501

        :return: The license_no of this bcadvertisercreateQualificationInfo.  # noqa: E501
        :rtype: str
        """
        return self._license_no

    @license_no.setter
    def license_no(self, license_no):
        """Sets the license_no of this bcadvertisercreateQualificationInfo.

        Business license number. This field is required for ad accounts that are registered in the Chinese mainland, Hong Kong, or in countries Brazil and Mexico  # noqa: E501

        :param license_no: The license_no of this bcadvertisercreateQualificationInfo.  # noqa: E501
        :type: str
        """

        self._license_no = license_no

    @property
    def promotion_link(self):
        """Gets the promotion_link of this bcadvertisercreateQualificationInfo.  # noqa: E501

        Promotion link. Required when your Business Center type is `AGENCY`. Length cannot exceed 255 characters  # noqa: E501

        :return: The promotion_link of this bcadvertisercreateQualificationInfo.  # noqa: E501
        :rtype: str
        """
        return self._promotion_link

    @promotion_link.setter
    def promotion_link(self, promotion_link):
        """Sets the promotion_link of this bcadvertisercreateQualificationInfo.

        Promotion link. Required when your Business Center type is `AGENCY`. Length cannot exceed 255 characters  # noqa: E501

        :param promotion_link: The promotion_link of this bcadvertisercreateQualificationInfo.  # noqa: E501
        :type: str
        """

        self._promotion_link = promotion_link

    @property
    def qualification_image_ids(self):
        """Gets the qualification_image_ids of this bcadvertisercreateQualificationInfo.  # noqa: E501

        Other Qualified Documents picture ID. See [Upload a business certificate](https://ads.tiktok.com/marketing_api/docs?id=1739938996913218). Note: This field is required if the ad account or the Business Center is registered in France, Brazil, or Mexico  # noqa: E501

        :return: The qualification_image_ids of this bcadvertisercreateQualificationInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._qualification_image_ids

    @qualification_image_ids.setter
    def qualification_image_ids(self, qualification_image_ids):
        """Sets the qualification_image_ids of this bcadvertisercreateQualificationInfo.

        Other Qualified Documents picture ID. See [Upload a business certificate](https://ads.tiktok.com/marketing_api/docs?id=1739938996913218). Note: This field is required if the ad account or the Business Center is registered in France, Brazil, or Mexico  # noqa: E501

        :param qualification_image_ids: The qualification_image_ids of this bcadvertisercreateQualificationInfo.  # noqa: E501
        :type: list[str]
        """

        self._qualification_image_ids = qualification_image_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(bcadvertisercreateQualificationInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, bcadvertisercreateQualificationInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
