# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class CatalogfeedcreateScheduleParam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day_of_month': 'int',
        'hour': 'int',
        'interval_count': 'int',
        'interval_type': 'str',
        'minute': 'int',
        'source': 'CatalogfeedcreateScheduleParamSource',
        'timezone': 'str'
    }

    attribute_map = {
        'day_of_month': 'day_of_month',
        'hour': 'hour',
        'interval_count': 'interval_count',
        'interval_type': 'interval_type',
        'minute': 'minute',
        'source': 'source',
        'timezone': 'timezone'
    }

    def __init__(self, day_of_month=None, hour=None, interval_count=None, interval_type=None, minute=None, source=None, timezone=None):  # noqa: E501
        """CatalogfeedcreateScheduleParam - a model defined in Swagger"""  # noqa: E501
        self._day_of_month = None
        self._hour = None
        self._interval_count = None
        self._interval_type = None
        self._minute = None
        self._source = None
        self._timezone = None
        self.discriminator = None
        if day_of_month is not None:
            self.day_of_month = day_of_month
        if hour is not None:
            self.hour = hour
        if interval_count is not None:
            self.interval_count = interval_count
        if interval_type is not None:
            self.interval_type = interval_type
        if minute is not None:
            self.minute = minute
        if source is not None:
            self.source = source
        if timezone is not None:
            self.timezone = timezone

    @property
    def day_of_month(self):
        """Gets the day_of_month of this CatalogfeedcreateScheduleParam.  # noqa: E501


        :return: The day_of_month of this CatalogfeedcreateScheduleParam.  # noqa: E501
        :rtype: int
        """
        return self._day_of_month

    @day_of_month.setter
    def day_of_month(self, day_of_month):
        """Sets the day_of_month of this CatalogfeedcreateScheduleParam.


        :param day_of_month: The day_of_month of this CatalogfeedcreateScheduleParam.  # noqa: E501
        :type: int
        """

        self._day_of_month = day_of_month

    @property
    def hour(self):
        """Gets the hour of this CatalogfeedcreateScheduleParam.  # noqa: E501


        :return: The hour of this CatalogfeedcreateScheduleParam.  # noqa: E501
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this CatalogfeedcreateScheduleParam.


        :param hour: The hour of this CatalogfeedcreateScheduleParam.  # noqa: E501
        :type: int
        """

        self._hour = hour

    @property
    def interval_count(self):
        """Gets the interval_count of this CatalogfeedcreateScheduleParam.  # noqa: E501


        :return: The interval_count of this CatalogfeedcreateScheduleParam.  # noqa: E501
        :rtype: int
        """
        return self._interval_count

    @interval_count.setter
    def interval_count(self, interval_count):
        """Sets the interval_count of this CatalogfeedcreateScheduleParam.


        :param interval_count: The interval_count of this CatalogfeedcreateScheduleParam.  # noqa: E501
        :type: int
        """

        self._interval_count = interval_count

    @property
    def interval_type(self):
        """Gets the interval_type of this CatalogfeedcreateScheduleParam.  # noqa: E501


        :return: The interval_type of this CatalogfeedcreateScheduleParam.  # noqa: E501
        :rtype: str
        """
        return self._interval_type

    @interval_type.setter
    def interval_type(self, interval_type):
        """Sets the interval_type of this CatalogfeedcreateScheduleParam.


        :param interval_type: The interval_type of this CatalogfeedcreateScheduleParam.  # noqa: E501
        :type: str
        """

        self._interval_type = interval_type

    @property
    def minute(self):
        """Gets the minute of this CatalogfeedcreateScheduleParam.  # noqa: E501


        :return: The minute of this CatalogfeedcreateScheduleParam.  # noqa: E501
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this CatalogfeedcreateScheduleParam.


        :param minute: The minute of this CatalogfeedcreateScheduleParam.  # noqa: E501
        :type: int
        """

        self._minute = minute

    @property
    def source(self):
        """Gets the source of this CatalogfeedcreateScheduleParam.  # noqa: E501


        :return: The source of this CatalogfeedcreateScheduleParam.  # noqa: E501
        :rtype: CatalogfeedcreateScheduleParamSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CatalogfeedcreateScheduleParam.


        :param source: The source of this CatalogfeedcreateScheduleParam.  # noqa: E501
        :type: CatalogfeedcreateScheduleParamSource
        """

        self._source = source

    @property
    def timezone(self):
        """Gets the timezone of this CatalogfeedcreateScheduleParam.  # noqa: E501


        :return: The timezone of this CatalogfeedcreateScheduleParam.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this CatalogfeedcreateScheduleParam.


        :param timezone: The timezone of this CatalogfeedcreateScheduleParam.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CatalogfeedcreateScheduleParam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogfeedcreateScheduleParam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
