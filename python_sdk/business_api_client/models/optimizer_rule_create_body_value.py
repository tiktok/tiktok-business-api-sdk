# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class OptimizerRuleCreateBodyValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limit': 'float',
        'use_limit': 'bool',
        'value': 'float'
    }

    attribute_map = {
        'limit': 'limit',
        'use_limit': 'use_limit',
        'value': 'value'
    }

    def __init__(self, limit=None, use_limit=None, value=None):  # noqa: E501
        """OptimizerRuleCreateBodyValue - a model defined in Swagger"""  # noqa: E501
        self._limit = None
        self._use_limit = None
        self._value = None
        self.discriminator = None
        if limit is not None:
            self.limit = limit
        if use_limit is not None:
            self.use_limit = use_limit
        if value is not None:
            self.value = value

    @property
    def limit(self):
        """Gets the limit of this OptimizerRuleCreateBodyValue.  # noqa: E501


        :return: The limit of this OptimizerRuleCreateBodyValue.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this OptimizerRuleCreateBodyValue.


        :param limit: The limit of this OptimizerRuleCreateBodyValue.  # noqa: E501
        :type: float
        """

        self._limit = limit

    @property
    def use_limit(self):
        """Gets the use_limit of this OptimizerRuleCreateBodyValue.  # noqa: E501


        :return: The use_limit of this OptimizerRuleCreateBodyValue.  # noqa: E501
        :rtype: bool
        """
        return self._use_limit

    @use_limit.setter
    def use_limit(self, use_limit):
        """Sets the use_limit of this OptimizerRuleCreateBodyValue.


        :param use_limit: The use_limit of this OptimizerRuleCreateBodyValue.  # noqa: E501
        :type: bool
        """

        self._use_limit = use_limit

    @property
    def value(self):
        """Gets the value of this OptimizerRuleCreateBodyValue.  # noqa: E501


        :return: The value of this OptimizerRuleCreateBodyValue.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this OptimizerRuleCreateBodyValue.


        :param value: The value of this OptimizerRuleCreateBodyValue.  # noqa: E501
        :type: float
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptimizerRuleCreateBodyValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizerRuleCreateBodyValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
