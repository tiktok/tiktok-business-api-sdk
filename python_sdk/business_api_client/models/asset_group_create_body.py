# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class AssetGroupCreateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_group_name': 'str',
        'assets': 'list[BcassetGroupcreateAssets]',
        'bc_id': 'str',
        'members': 'list[BcassetGroupcreateMembers]'
    }

    attribute_map = {
        'asset_group_name': 'asset_group_name',
        'assets': 'assets',
        'bc_id': 'bc_id',
        'members': 'members'
    }

    def __init__(self, asset_group_name=None, assets=None, bc_id=None, members=None):  # noqa: E501
        """AssetGroupCreateBody - a model defined in Swagger"""  # noqa: E501
        self._asset_group_name = None
        self._assets = None
        self._bc_id = None
        self._members = None
        self.discriminator = None
        self.asset_group_name = asset_group_name
        self.assets = assets
        self.bc_id = bc_id
        self.members = members

    @property
    def asset_group_name(self):
        """Gets the asset_group_name of this AssetGroupCreateBody.  # noqa: E501


        :return: The asset_group_name of this AssetGroupCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._asset_group_name

    @asset_group_name.setter
    def asset_group_name(self, asset_group_name):
        """Sets the asset_group_name of this AssetGroupCreateBody.


        :param asset_group_name: The asset_group_name of this AssetGroupCreateBody.  # noqa: E501
        :type: str
        """
        if asset_group_name is None:
            raise ValueError("Invalid value for `asset_group_name`, must not be `None`")  # noqa: E501

        self._asset_group_name = asset_group_name

    @property
    def assets(self):
        """Gets the assets of this AssetGroupCreateBody.  # noqa: E501


        :return: The assets of this AssetGroupCreateBody.  # noqa: E501
        :rtype: list[BcassetGroupcreateAssets]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this AssetGroupCreateBody.


        :param assets: The assets of this AssetGroupCreateBody.  # noqa: E501
        :type: list[BcassetGroupcreateAssets]
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")  # noqa: E501

        self._assets = assets

    @property
    def bc_id(self):
        """Gets the bc_id of this AssetGroupCreateBody.  # noqa: E501


        :return: The bc_id of this AssetGroupCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._bc_id

    @bc_id.setter
    def bc_id(self, bc_id):
        """Sets the bc_id of this AssetGroupCreateBody.


        :param bc_id: The bc_id of this AssetGroupCreateBody.  # noqa: E501
        :type: str
        """
        if bc_id is None:
            raise ValueError("Invalid value for `bc_id`, must not be `None`")  # noqa: E501

        self._bc_id = bc_id

    @property
    def members(self):
        """Gets the members of this AssetGroupCreateBody.  # noqa: E501


        :return: The members of this AssetGroupCreateBody.  # noqa: E501
        :rtype: list[BcassetGroupcreateMembers]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this AssetGroupCreateBody.


        :param members: The members of this AssetGroupCreateBody.  # noqa: E501
        :type: list[BcassetGroupcreateMembers]
        """
        if members is None:
            raise ValueError("Invalid value for `members`, must not be `None`")  # noqa: E501

        self._members = members

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetGroupCreateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetGroupCreateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
