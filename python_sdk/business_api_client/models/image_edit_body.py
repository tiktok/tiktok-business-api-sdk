# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class ImageEditBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'edit_method': 'str',
        'height': 'int',
        'image_id': 'str',
        'image_name': 'str',
        'width': 'int'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'edit_method': 'edit_method',
        'height': 'height',
        'image_id': 'image_id',
        'image_name': 'image_name',
        'width': 'width'
    }

    def __init__(self, advertiser_id=None, edit_method='fix_size', height=None, image_id=None, image_name=None, width=None):  # noqa: E501
        """ImageEditBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._edit_method = None
        self._height = None
        self._image_id = None
        self._image_name = None
        self._width = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        if edit_method is not None:
            self.edit_method = edit_method
        self.height = height
        self.image_id = image_id
        if image_name is not None:
            self.image_name = image_name
        self.width = width

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this ImageEditBody.  # noqa: E501


        :return: The advertiser_id of this ImageEditBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this ImageEditBody.


        :param advertiser_id: The advertiser_id of this ImageEditBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def edit_method(self):
        """Gets the edit_method of this ImageEditBody.  # noqa: E501


        :return: The edit_method of this ImageEditBody.  # noqa: E501
        :rtype: str
        """
        return self._edit_method

    @edit_method.setter
    def edit_method(self, edit_method):
        """Sets the edit_method of this ImageEditBody.


        :param edit_method: The edit_method of this ImageEditBody.  # noqa: E501
        :type: str
        """

        self._edit_method = edit_method

    @property
    def height(self):
        """Gets the height of this ImageEditBody.  # noqa: E501


        :return: The height of this ImageEditBody.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ImageEditBody.


        :param height: The height of this ImageEditBody.  # noqa: E501
        :type: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def image_id(self):
        """Gets the image_id of this ImageEditBody.  # noqa: E501


        :return: The image_id of this ImageEditBody.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this ImageEditBody.


        :param image_id: The image_id of this ImageEditBody.  # noqa: E501
        :type: str
        """
        if image_id is None:
            raise ValueError("Invalid value for `image_id`, must not be `None`")  # noqa: E501

        self._image_id = image_id

    @property
    def image_name(self):
        """Gets the image_name of this ImageEditBody.  # noqa: E501


        :return: The image_name of this ImageEditBody.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this ImageEditBody.


        :param image_name: The image_name of this ImageEditBody.  # noqa: E501
        :type: str
        """

        self._image_name = image_name

    @property
    def width(self):
        """Gets the width of this ImageEditBody.  # noqa: E501


        :return: The width of this ImageEditBody.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ImageEditBody.


        :param width: The width of this ImageEditBody.  # noqa: E501
        :type: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")  # noqa: E501

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageEditBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageEditBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
