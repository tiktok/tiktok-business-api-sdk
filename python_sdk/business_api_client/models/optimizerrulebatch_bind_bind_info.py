# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class OptimizerrulebatchBindBindInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bind_type': 'str',
        'dimension': 'str',
        'dimension_ids': 'list[str]',
        'rule_id': 'str'
    }

    attribute_map = {
        'bind_type': 'bind_type',
        'dimension': 'dimension',
        'dimension_ids': 'dimension_ids',
        'rule_id': 'rule_id'
    }

    def __init__(self, bind_type=None, dimension=None, dimension_ids=None, rule_id=None):  # noqa: E501
        """OptimizerrulebatchBindBindInfo - a model defined in Swagger"""  # noqa: E501
        self._bind_type = None
        self._dimension = None
        self._dimension_ids = None
        self._rule_id = None
        self.discriminator = None
        self.bind_type = bind_type
        self.dimension = dimension
        self.dimension_ids = dimension_ids
        self.rule_id = rule_id

    @property
    def bind_type(self):
        """Gets the bind_type of this OptimizerrulebatchBindBindInfo.  # noqa: E501


        :return: The bind_type of this OptimizerrulebatchBindBindInfo.  # noqa: E501
        :rtype: str
        """
        return self._bind_type

    @bind_type.setter
    def bind_type(self, bind_type):
        """Sets the bind_type of this OptimizerrulebatchBindBindInfo.


        :param bind_type: The bind_type of this OptimizerrulebatchBindBindInfo.  # noqa: E501
        :type: str
        """
        if bind_type is None:
            raise ValueError("Invalid value for `bind_type`, must not be `None`")  # noqa: E501

        self._bind_type = bind_type

    @property
    def dimension(self):
        """Gets the dimension of this OptimizerrulebatchBindBindInfo.  # noqa: E501


        :return: The dimension of this OptimizerrulebatchBindBindInfo.  # noqa: E501
        :rtype: str
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this OptimizerrulebatchBindBindInfo.


        :param dimension: The dimension of this OptimizerrulebatchBindBindInfo.  # noqa: E501
        :type: str
        """
        if dimension is None:
            raise ValueError("Invalid value for `dimension`, must not be `None`")  # noqa: E501

        self._dimension = dimension

    @property
    def dimension_ids(self):
        """Gets the dimension_ids of this OptimizerrulebatchBindBindInfo.  # noqa: E501


        :return: The dimension_ids of this OptimizerrulebatchBindBindInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._dimension_ids

    @dimension_ids.setter
    def dimension_ids(self, dimension_ids):
        """Sets the dimension_ids of this OptimizerrulebatchBindBindInfo.


        :param dimension_ids: The dimension_ids of this OptimizerrulebatchBindBindInfo.  # noqa: E501
        :type: list[str]
        """
        if dimension_ids is None:
            raise ValueError("Invalid value for `dimension_ids`, must not be `None`")  # noqa: E501

        self._dimension_ids = dimension_ids

    @property
    def rule_id(self):
        """Gets the rule_id of this OptimizerrulebatchBindBindInfo.  # noqa: E501


        :return: The rule_id of this OptimizerrulebatchBindBindInfo.  # noqa: E501
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this OptimizerrulebatchBindBindInfo.


        :param rule_id: The rule_id of this OptimizerrulebatchBindBindInfo.  # noqa: E501
        :type: str
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")  # noqa: E501

        self._rule_id = rule_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptimizerrulebatchBindBindInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizerrulebatchBindBindInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
