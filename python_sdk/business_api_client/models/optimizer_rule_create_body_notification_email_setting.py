# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class OptimizerRuleCreateBodyNotificationEmailSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_exec_time': 'list[str]',
        'mute_option': 'str',
        'no_result_notification': 'bool',
        'notification_period': 'str'
    }

    attribute_map = {
        'email_exec_time': 'email_exec_time',
        'mute_option': 'mute_option',
        'no_result_notification': 'no_result_notification',
        'notification_period': 'notification_period'
    }

    def __init__(self, email_exec_time=None, mute_option=None, no_result_notification=None, notification_period=None):  # noqa: E501
        """OptimizerRuleCreateBodyNotificationEmailSetting - a model defined in Swagger"""  # noqa: E501
        self._email_exec_time = None
        self._mute_option = None
        self._no_result_notification = None
        self._notification_period = None
        self.discriminator = None
        if email_exec_time is not None:
            self.email_exec_time = email_exec_time
        if mute_option is not None:
            self.mute_option = mute_option
        if no_result_notification is not None:
            self.no_result_notification = no_result_notification
        if notification_period is not None:
            self.notification_period = notification_period

    @property
    def email_exec_time(self):
        """Gets the email_exec_time of this OptimizerRuleCreateBodyNotificationEmailSetting.  # noqa: E501


        :return: The email_exec_time of this OptimizerRuleCreateBodyNotificationEmailSetting.  # noqa: E501
        :rtype: list[str]
        """
        return self._email_exec_time

    @email_exec_time.setter
    def email_exec_time(self, email_exec_time):
        """Sets the email_exec_time of this OptimizerRuleCreateBodyNotificationEmailSetting.


        :param email_exec_time: The email_exec_time of this OptimizerRuleCreateBodyNotificationEmailSetting.  # noqa: E501
        :type: list[str]
        """

        self._email_exec_time = email_exec_time

    @property
    def mute_option(self):
        """Gets the mute_option of this OptimizerRuleCreateBodyNotificationEmailSetting.  # noqa: E501


        :return: The mute_option of this OptimizerRuleCreateBodyNotificationEmailSetting.  # noqa: E501
        :rtype: str
        """
        return self._mute_option

    @mute_option.setter
    def mute_option(self, mute_option):
        """Sets the mute_option of this OptimizerRuleCreateBodyNotificationEmailSetting.


        :param mute_option: The mute_option of this OptimizerRuleCreateBodyNotificationEmailSetting.  # noqa: E501
        :type: str
        """

        self._mute_option = mute_option

    @property
    def no_result_notification(self):
        """Gets the no_result_notification of this OptimizerRuleCreateBodyNotificationEmailSetting.  # noqa: E501


        :return: The no_result_notification of this OptimizerRuleCreateBodyNotificationEmailSetting.  # noqa: E501
        :rtype: bool
        """
        return self._no_result_notification

    @no_result_notification.setter
    def no_result_notification(self, no_result_notification):
        """Sets the no_result_notification of this OptimizerRuleCreateBodyNotificationEmailSetting.


        :param no_result_notification: The no_result_notification of this OptimizerRuleCreateBodyNotificationEmailSetting.  # noqa: E501
        :type: bool
        """

        self._no_result_notification = no_result_notification

    @property
    def notification_period(self):
        """Gets the notification_period of this OptimizerRuleCreateBodyNotificationEmailSetting.  # noqa: E501


        :return: The notification_period of this OptimizerRuleCreateBodyNotificationEmailSetting.  # noqa: E501
        :rtype: str
        """
        return self._notification_period

    @notification_period.setter
    def notification_period(self, notification_period):
        """Sets the notification_period of this OptimizerRuleCreateBodyNotificationEmailSetting.


        :param notification_period: The notification_period of this OptimizerRuleCreateBodyNotificationEmailSetting.  # noqa: E501
        :type: str
        """

        self._notification_period = notification_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptimizerRuleCreateBodyNotificationEmailSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizerRuleCreateBodyNotificationEmailSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
