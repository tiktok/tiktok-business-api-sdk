# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class MemberDeleteBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bc_id': 'str',
        'child_bc_id': 'str',
        'user_email': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'bc_id': 'bc_id',
        'child_bc_id': 'child_bc_id',
        'user_email': 'user_email',
        'user_id': 'user_id'
    }

    def __init__(self, bc_id=None, child_bc_id=None, user_email=None, user_id=None):  # noqa: E501
        """MemberDeleteBody - a model defined in Swagger"""  # noqa: E501
        self._bc_id = None
        self._child_bc_id = None
        self._user_email = None
        self._user_id = None
        self.discriminator = None
        self.bc_id = bc_id
        if child_bc_id is not None:
            self.child_bc_id = child_bc_id
        if user_email is not None:
            self.user_email = user_email
        if user_id is not None:
            self.user_id = user_id

    @property
    def bc_id(self):
        """Gets the bc_id of this MemberDeleteBody.  # noqa: E501


        :return: The bc_id of this MemberDeleteBody.  # noqa: E501
        :rtype: str
        """
        return self._bc_id

    @bc_id.setter
    def bc_id(self, bc_id):
        """Sets the bc_id of this MemberDeleteBody.


        :param bc_id: The bc_id of this MemberDeleteBody.  # noqa: E501
        :type: str
        """
        if bc_id is None:
            raise ValueError("Invalid value for `bc_id`, must not be `None`")  # noqa: E501

        self._bc_id = bc_id

    @property
    def child_bc_id(self):
        """Gets the child_bc_id of this MemberDeleteBody.  # noqa: E501


        :return: The child_bc_id of this MemberDeleteBody.  # noqa: E501
        :rtype: str
        """
        return self._child_bc_id

    @child_bc_id.setter
    def child_bc_id(self, child_bc_id):
        """Sets the child_bc_id of this MemberDeleteBody.


        :param child_bc_id: The child_bc_id of this MemberDeleteBody.  # noqa: E501
        :type: str
        """

        self._child_bc_id = child_bc_id

    @property
    def user_email(self):
        """Gets the user_email of this MemberDeleteBody.  # noqa: E501


        :return: The user_email of this MemberDeleteBody.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this MemberDeleteBody.


        :param user_email: The user_email of this MemberDeleteBody.  # noqa: E501
        :type: str
        """

        self._user_email = user_email

    @property
    def user_id(self):
        """Gets the user_id of this MemberDeleteBody.  # noqa: E501


        :return: The user_id of this MemberDeleteBody.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MemberDeleteBody.


        :param user_id: The user_id of this MemberDeleteBody.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemberDeleteBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberDeleteBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
