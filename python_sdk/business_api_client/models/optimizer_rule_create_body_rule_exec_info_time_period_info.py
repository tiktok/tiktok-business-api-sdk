# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_type': 'str',
        'end_time': 'str',
        'num': 'list[int]',
        'start_time': 'str'
    }

    attribute_map = {
        'date_type': 'date_type',
        'end_time': 'end_time',
        'num': 'num',
        'start_time': 'start_time'
    }

    def __init__(self, date_type=None, end_time=None, num=None, start_time=None):  # noqa: E501
        """OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo - a model defined in Swagger"""  # noqa: E501
        self._date_type = None
        self._end_time = None
        self._num = None
        self._start_time = None
        self.discriminator = None
        self.date_type = date_type
        self.end_time = end_time
        self.num = num
        self.start_time = start_time

    @property
    def date_type(self):
        """Gets the date_type of this OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo.  # noqa: E501


        :return: The date_type of this OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo.  # noqa: E501
        :rtype: str
        """
        return self._date_type

    @date_type.setter
    def date_type(self, date_type):
        """Sets the date_type of this OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo.


        :param date_type: The date_type of this OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo.  # noqa: E501
        :type: str
        """
        if date_type is None:
            raise ValueError("Invalid value for `date_type`, must not be `None`")  # noqa: E501

        self._date_type = date_type

    @property
    def end_time(self):
        """Gets the end_time of this OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo.  # noqa: E501


        :return: The end_time of this OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo.


        :param end_time: The end_time of this OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo.  # noqa: E501
        :type: str
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def num(self):
        """Gets the num of this OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo.  # noqa: E501


        :return: The num of this OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo.  # noqa: E501
        :rtype: list[int]
        """
        return self._num

    @num.setter
    def num(self, num):
        """Sets the num of this OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo.


        :param num: The num of this OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo.  # noqa: E501
        :type: list[int]
        """
        if num is None:
            raise ValueError("Invalid value for `num`, must not be `None`")  # noqa: E501

        self._num = num

    @property
    def start_time(self):
        """Gets the start_time of this OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo.  # noqa: E501


        :return: The start_time of this OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo.


        :param start_time: The start_time of this OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo.  # noqa: E501
        :type: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizerRuleCreateBodyRuleExecInfoTimePeriodInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
