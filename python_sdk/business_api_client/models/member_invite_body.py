# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class MemberInviteBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_role': 'str',
        'asset_ids': 'list[str]',
        'asset_type': 'str',
        'bc_id': 'str',
        'emails': 'list[str]',
        'ext_user_role': 'BcmemberinviteExtUserRole',
        'user_role': 'str'
    }

    attribute_map = {
        'advertiser_role': 'advertiser_role',
        'asset_ids': 'asset_ids',
        'asset_type': 'asset_type',
        'bc_id': 'bc_id',
        'emails': 'emails',
        'ext_user_role': 'ext_user_role',
        'user_role': 'user_role'
    }

    def __init__(self, advertiser_role='ANALYST', asset_ids=None, asset_type='ADVERTISER', bc_id=None, emails=None, ext_user_role=None, user_role='STANDARD'):  # noqa: E501
        """MemberInviteBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_role = None
        self._asset_ids = None
        self._asset_type = None
        self._bc_id = None
        self._emails = None
        self._ext_user_role = None
        self._user_role = None
        self.discriminator = None
        if advertiser_role is not None:
            self.advertiser_role = advertiser_role
        self.asset_ids = asset_ids
        if asset_type is not None:
            self.asset_type = asset_type
        self.bc_id = bc_id
        self.emails = emails
        if ext_user_role is not None:
            self.ext_user_role = ext_user_role
        if user_role is not None:
            self.user_role = user_role

    @property
    def advertiser_role(self):
        """Gets the advertiser_role of this MemberInviteBody.  # noqa: E501


        :return: The advertiser_role of this MemberInviteBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_role

    @advertiser_role.setter
    def advertiser_role(self, advertiser_role):
        """Sets the advertiser_role of this MemberInviteBody.


        :param advertiser_role: The advertiser_role of this MemberInviteBody.  # noqa: E501
        :type: str
        """

        self._advertiser_role = advertiser_role

    @property
    def asset_ids(self):
        """Gets the asset_ids of this MemberInviteBody.  # noqa: E501


        :return: The asset_ids of this MemberInviteBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._asset_ids

    @asset_ids.setter
    def asset_ids(self, asset_ids):
        """Sets the asset_ids of this MemberInviteBody.


        :param asset_ids: The asset_ids of this MemberInviteBody.  # noqa: E501
        :type: list[str]
        """
        if asset_ids is None:
            raise ValueError("Invalid value for `asset_ids`, must not be `None`")  # noqa: E501

        self._asset_ids = asset_ids

    @property
    def asset_type(self):
        """Gets the asset_type of this MemberInviteBody.  # noqa: E501


        :return: The asset_type of this MemberInviteBody.  # noqa: E501
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this MemberInviteBody.


        :param asset_type: The asset_type of this MemberInviteBody.  # noqa: E501
        :type: str
        """

        self._asset_type = asset_type

    @property
    def bc_id(self):
        """Gets the bc_id of this MemberInviteBody.  # noqa: E501


        :return: The bc_id of this MemberInviteBody.  # noqa: E501
        :rtype: str
        """
        return self._bc_id

    @bc_id.setter
    def bc_id(self, bc_id):
        """Sets the bc_id of this MemberInviteBody.


        :param bc_id: The bc_id of this MemberInviteBody.  # noqa: E501
        :type: str
        """
        if bc_id is None:
            raise ValueError("Invalid value for `bc_id`, must not be `None`")  # noqa: E501

        self._bc_id = bc_id

    @property
    def emails(self):
        """Gets the emails of this MemberInviteBody.  # noqa: E501


        :return: The emails of this MemberInviteBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this MemberInviteBody.


        :param emails: The emails of this MemberInviteBody.  # noqa: E501
        :type: list[str]
        """
        if emails is None:
            raise ValueError("Invalid value for `emails`, must not be `None`")  # noqa: E501

        self._emails = emails

    @property
    def ext_user_role(self):
        """Gets the ext_user_role of this MemberInviteBody.  # noqa: E501


        :return: The ext_user_role of this MemberInviteBody.  # noqa: E501
        :rtype: BcmemberinviteExtUserRole
        """
        return self._ext_user_role

    @ext_user_role.setter
    def ext_user_role(self, ext_user_role):
        """Sets the ext_user_role of this MemberInviteBody.


        :param ext_user_role: The ext_user_role of this MemberInviteBody.  # noqa: E501
        :type: BcmemberinviteExtUserRole
        """

        self._ext_user_role = ext_user_role

    @property
    def user_role(self):
        """Gets the user_role of this MemberInviteBody.  # noqa: E501


        :return: The user_role of this MemberInviteBody.  # noqa: E501
        :rtype: str
        """
        return self._user_role

    @user_role.setter
    def user_role(self, user_role):
        """Sets the user_role of this MemberInviteBody.


        :param user_role: The user_role of this MemberInviteBody.  # noqa: E501
        :type: str
        """

        self._user_role = user_role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemberInviteBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberInviteBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
