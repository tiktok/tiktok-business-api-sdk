# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class bcadvertisercreateAdvertiserInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'name': 'str',
        'timezone': 'str',
        'type': 'str'
    }

    attribute_map = {
        'currency': 'currency',
        'name': 'name',
        'timezone': 'timezone',
        'type': 'type'
    }

    def __init__(self, currency=None, name=None, timezone=None, type=None):  # noqa: E501
        """bcadvertisercreateAdvertiserInfo - a model defined in Swagger"""  # noqa: E501
        self._currency = None
        self._name = None
        self._timezone = None
        self._type = None
        self.discriminator = None
        if currency is not None:
            self.currency = currency
        if name is not None:
            self.name = name
        if timezone is not None:
            self.timezone = timezone
        if type is not None:
            self.type = type

    @property
    def currency(self):
        """Gets the currency of this bcadvertisercreateAdvertiserInfo.  # noqa: E501

        Ad Account currency, note: need to be consistent with the Business Center, the value range is shown in [Appendix-Currency](https://ads.tiktok.com/marketing_api/docs?id=1737585839634433)  # noqa: E501

        :return: The currency of this bcadvertisercreateAdvertiserInfo.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this bcadvertisercreateAdvertiserInfo.

        Ad Account currency, note: need to be consistent with the Business Center, the value range is shown in [Appendix-Currency](https://ads.tiktok.com/marketing_api/docs?id=1737585839634433)  # noqa: E501

        :param currency: The currency of this bcadvertisercreateAdvertiserInfo.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def name(self):
        """Gets the name of this bcadvertisercreateAdvertiserInfo.  # noqa: E501

        Ad Account name, length cannot exceed 100 characters  # noqa: E501

        :return: The name of this bcadvertisercreateAdvertiserInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this bcadvertisercreateAdvertiserInfo.

        Ad Account name, length cannot exceed 100 characters  # noqa: E501

        :param name: The name of this bcadvertisercreateAdvertiserInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def timezone(self):
        """Gets the timezone of this bcadvertisercreateAdvertiserInfo.  # noqa: E501

        Ad Account time zone code, the value range is shown in  [Appendix-Time Zone](https://ads.tiktok.com/marketing_api/docs?id=1737586324313089)  # noqa: E501

        :return: The timezone of this bcadvertisercreateAdvertiserInfo.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this bcadvertisercreateAdvertiserInfo.

        Ad Account time zone code, the value range is shown in  [Appendix-Time Zone](https://ads.tiktok.com/marketing_api/docs?id=1737586324313089)  # noqa: E501

        :param timezone: The timezone of this bcadvertisercreateAdvertiserInfo.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def type(self):
        """Gets the type of this bcadvertisercreateAdvertiserInfo.  # noqa: E501

        Type of ad account that you want to create. Enum values: `RESERVATION`, `AUCTION` (default).Note: `DIRECT` Business Centers can only create an ad account of `AUCTION` type  # noqa: E501

        :return: The type of this bcadvertisercreateAdvertiserInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this bcadvertisercreateAdvertiserInfo.

        Type of ad account that you want to create. Enum values: `RESERVATION`, `AUCTION` (default).Note: `DIRECT` Business Centers can only create an ad account of `AUCTION` type  # noqa: E501

        :param type: The type of this bcadvertisercreateAdvertiserInfo.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(bcadvertisercreateAdvertiserInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, bcadvertisercreateAdvertiserInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
