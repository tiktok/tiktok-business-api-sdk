# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class CustomAudienceUpdateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'advertiser_id': 'str',
        'audience_enhancement': 'bool',
        'audience_sub_type': 'str',
        'context_info': 'OpenApiv13dmpcustomAudienceapplyContextInfo',
        'custom_audience_id': 'str',
        'custom_audience_name': 'str',
        'file_paths': 'list[str]'
    }

    attribute_map = {
        'action': 'action',
        'advertiser_id': 'advertiser_id',
        'audience_enhancement': 'audience_enhancement',
        'audience_sub_type': 'audience_sub_type',
        'context_info': 'context_info',
        'custom_audience_id': 'custom_audience_id',
        'custom_audience_name': 'custom_audience_name',
        'file_paths': 'file_paths'
    }

    def __init__(self, action='REPLACE', advertiser_id=None, audience_enhancement=None, audience_sub_type=None, context_info=None, custom_audience_id=None, custom_audience_name=None, file_paths=None):  # noqa: E501
        """CustomAudienceUpdateBody - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._advertiser_id = None
        self._audience_enhancement = None
        self._audience_sub_type = None
        self._context_info = None
        self._custom_audience_id = None
        self._custom_audience_name = None
        self._file_paths = None
        self.discriminator = None
        if action is not None:
            self.action = action
        self.advertiser_id = advertiser_id
        if audience_enhancement is not None:
            self.audience_enhancement = audience_enhancement
        if audience_sub_type is not None:
            self.audience_sub_type = audience_sub_type
        if context_info is not None:
            self.context_info = context_info
        self.custom_audience_id = custom_audience_id
        if custom_audience_name is not None:
            self.custom_audience_name = custom_audience_name
        if file_paths is not None:
            self.file_paths = file_paths

    @property
    def action(self):
        """Gets the action of this CustomAudienceUpdateBody.  # noqa: E501

        Modification type. This field is valid when file_paths is passed. Enum values: APPEND: Upload files to expand the Customer File audience. Only data not included in the original file will be added. REMOVE: Upload files to remove the Customer File audience. Only the data that coincide with the original file will be removed. REPLACE: Upload files to replace the Customer File audience. All the data in the original file will be replaced. Default value: REPLACE. Note: The APPEND, REMOVE and REPLACE operations will fail if the audience size is less than 1,000 after the operation.  # noqa: E501

        :return: The action of this CustomAudienceUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CustomAudienceUpdateBody.

        Modification type. This field is valid when file_paths is passed. Enum values: APPEND: Upload files to expand the Customer File audience. Only data not included in the original file will be added. REMOVE: Upload files to remove the Customer File audience. Only the data that coincide with the original file will be removed. REPLACE: Upload files to replace the Customer File audience. All the data in the original file will be replaced. Default value: REPLACE. Note: The APPEND, REMOVE and REPLACE operations will fail if the audience size is less than 1,000 after the operation.  # noqa: E501

        :param action: The action of this CustomAudienceUpdateBody.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this CustomAudienceUpdateBody.  # noqa: E501

        Advertiser ID.  # noqa: E501

        :return: The advertiser_id of this CustomAudienceUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this CustomAudienceUpdateBody.

        Advertiser ID.  # noqa: E501

        :param advertiser_id: The advertiser_id of this CustomAudienceUpdateBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def audience_enhancement(self):
        """Gets the audience_enhancement of this CustomAudienceUpdateBody.  # noqa: E501


        :return: The audience_enhancement of this CustomAudienceUpdateBody.  # noqa: E501
        :rtype: bool
        """
        return self._audience_enhancement

    @audience_enhancement.setter
    def audience_enhancement(self, audience_enhancement):
        """Sets the audience_enhancement of this CustomAudienceUpdateBody.


        :param audience_enhancement: The audience_enhancement of this CustomAudienceUpdateBody.  # noqa: E501
        :type: bool
        """

        self._audience_enhancement = audience_enhancement

    @property
    def audience_sub_type(self):
        """Gets the audience_sub_type of this CustomAudienceUpdateBody.  # noqa: E501

        Audience sub type, indicating the type of ads that the audience can be used for. The allowed enum value: REACH_FREQUENCY(To enable the audience to be used in Reach & Frequency campaigns). It means you can only convert audience sub type from NORMAL to REACH_FREQUENCY, but not the other way round. Note: If you update this field, changes to other data fields will be ignored. If you want to update a Lookalike audience, you cannot change the audience_sub_type to REACH_FREQUENCY. Otherwise, an error will occur.  # noqa: E501

        :return: The audience_sub_type of this CustomAudienceUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._audience_sub_type

    @audience_sub_type.setter
    def audience_sub_type(self, audience_sub_type):
        """Sets the audience_sub_type of this CustomAudienceUpdateBody.

        Audience sub type, indicating the type of ads that the audience can be used for. The allowed enum value: REACH_FREQUENCY(To enable the audience to be used in Reach & Frequency campaigns). It means you can only convert audience sub type from NORMAL to REACH_FREQUENCY, but not the other way round. Note: If you update this field, changes to other data fields will be ignored. If you want to update a Lookalike audience, you cannot change the audience_sub_type to REACH_FREQUENCY. Otherwise, an error will occur.  # noqa: E501

        :param audience_sub_type: The audience_sub_type of this CustomAudienceUpdateBody.  # noqa: E501
        :type: str
        """

        self._audience_sub_type = audience_sub_type

    @property
    def context_info(self):
        """Gets the context_info of this CustomAudienceUpdateBody.  # noqa: E501


        :return: The context_info of this CustomAudienceUpdateBody.  # noqa: E501
        :rtype: OpenApiv13dmpcustomAudienceapplyContextInfo
        """
        return self._context_info

    @context_info.setter
    def context_info(self, context_info):
        """Sets the context_info of this CustomAudienceUpdateBody.


        :param context_info: The context_info of this CustomAudienceUpdateBody.  # noqa: E501
        :type: OpenApiv13dmpcustomAudienceapplyContextInfo
        """

        self._context_info = context_info

    @property
    def custom_audience_id(self):
        """Gets the custom_audience_id of this CustomAudienceUpdateBody.  # noqa: E501

        Custom audience ID.  # noqa: E501

        :return: The custom_audience_id of this CustomAudienceUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._custom_audience_id

    @custom_audience_id.setter
    def custom_audience_id(self, custom_audience_id):
        """Sets the custom_audience_id of this CustomAudienceUpdateBody.

        Custom audience ID.  # noqa: E501

        :param custom_audience_id: The custom_audience_id of this CustomAudienceUpdateBody.  # noqa: E501
        :type: str
        """
        if custom_audience_id is None:
            raise ValueError("Invalid value for `custom_audience_id`, must not be `None`")  # noqa: E501

        self._custom_audience_id = custom_audience_id

    @property
    def custom_audience_name(self):
        """Gets the custom_audience_name of this CustomAudienceUpdateBody.  # noqa: E501

        New name for the audience. Length limit: 128 characters. You must pass in either this field or file_paths.  # noqa: E501

        :return: The custom_audience_name of this CustomAudienceUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._custom_audience_name

    @custom_audience_name.setter
    def custom_audience_name(self, custom_audience_name):
        """Sets the custom_audience_name of this CustomAudienceUpdateBody.

        New name for the audience. Length limit: 128 characters. You must pass in either this field or file_paths.  # noqa: E501

        :param custom_audience_name: The custom_audience_name of this CustomAudienceUpdateBody.  # noqa: E501
        :type: str
        """

        self._custom_audience_name = custom_audience_name

    @property
    def file_paths(self):
        """Gets the file_paths of this CustomAudienceUpdateBody.  # noqa: E501

        The files you upload to update the Customer File audience. You must pass in either this field or custom_audience_name. The recommended size is <50 per request to ensure stability. Once you pass in this field, you can specify the modification type (APPEND, REMOVE or REPLACE) via action. The files must be encrypted with the same encryption method/type with the audience that you want to update.  # noqa: E501

        :return: The file_paths of this CustomAudienceUpdateBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_paths

    @file_paths.setter
    def file_paths(self, file_paths):
        """Sets the file_paths of this CustomAudienceUpdateBody.

        The files you upload to update the Customer File audience. You must pass in either this field or custom_audience_name. The recommended size is <50 per request to ensure stability. Once you pass in this field, you can specify the modification type (APPEND, REMOVE or REPLACE) via action. The files must be encrypted with the same encryption method/type with the audience that you want to update.  # noqa: E501

        :param file_paths: The file_paths of this CustomAudienceUpdateBody.  # noqa: E501
        :type: list[str]
        """

        self._file_paths = file_paths

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomAudienceUpdateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomAudienceUpdateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
