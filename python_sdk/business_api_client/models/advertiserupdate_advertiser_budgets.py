# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class AdvertiserupdateAdvertiserBudgets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'int',
        'budget': 'float',
        'budget_mode': 'str'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'budget': 'budget',
        'budget_mode': 'budget_mode'
    }

    def __init__(self, advertiser_id=None, budget=None, budget_mode=None):  # noqa: E501
        """AdvertiserupdateAdvertiserBudgets - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._budget = None
        self._budget_mode = None
        self.discriminator = None
        if advertiser_id is not None:
            self.advertiser_id = advertiser_id
        if budget is not None:
            self.budget = budget
        if budget_mode is not None:
            self.budget_mode = budget_mode

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this AdvertiserupdateAdvertiserBudgets.  # noqa: E501


        :return: The advertiser_id of this AdvertiserupdateAdvertiserBudgets.  # noqa: E501
        :rtype: int
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this AdvertiserupdateAdvertiserBudgets.


        :param advertiser_id: The advertiser_id of this AdvertiserupdateAdvertiserBudgets.  # noqa: E501
        :type: int
        """

        self._advertiser_id = advertiser_id

    @property
    def budget(self):
        """Gets the budget of this AdvertiserupdateAdvertiserBudgets.  # noqa: E501


        :return: The budget of this AdvertiserupdateAdvertiserBudgets.  # noqa: E501
        :rtype: float
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this AdvertiserupdateAdvertiserBudgets.


        :param budget: The budget of this AdvertiserupdateAdvertiserBudgets.  # noqa: E501
        :type: float
        """

        self._budget = budget

    @property
    def budget_mode(self):
        """Gets the budget_mode of this AdvertiserupdateAdvertiserBudgets.  # noqa: E501


        :return: The budget_mode of this AdvertiserupdateAdvertiserBudgets.  # noqa: E501
        :rtype: str
        """
        return self._budget_mode

    @budget_mode.setter
    def budget_mode(self, budget_mode):
        """Sets the budget_mode of this AdvertiserupdateAdvertiserBudgets.


        :param budget_mode: The budget_mode of this AdvertiserupdateAdvertiserBudgets.  # noqa: E501
        :type: str
        """

        self._budget_mode = budget_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdvertiserupdateAdvertiserBudgets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvertiserupdateAdvertiserBudgets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
