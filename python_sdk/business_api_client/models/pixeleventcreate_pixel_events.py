# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class PixeleventcreatePixelEvents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'currency_value': 'str',
        'event_code': 'str',
        'event_id': 'str',
        'event_name': 'str',
        'event_type': 'str',
        'rules': 'list[PixeleventcreateRules]',
        'statistic_type': 'str'
    }

    attribute_map = {
        'currency': 'currency',
        'currency_value': 'currency_value',
        'event_code': 'event_code',
        'event_id': 'event_id',
        'event_name': 'event_name',
        'event_type': 'event_type',
        'rules': 'rules',
        'statistic_type': 'statistic_type'
    }

    def __init__(self, currency=None, currency_value=None, event_code=None, event_id=None, event_name=None, event_type=None, rules=None, statistic_type=None):  # noqa: E501
        """PixeleventcreatePixelEvents - a model defined in Swagger"""  # noqa: E501
        self._currency = None
        self._currency_value = None
        self._event_code = None
        self._event_id = None
        self._event_name = None
        self._event_type = None
        self._rules = None
        self._statistic_type = None
        self.discriminator = None
        if currency is not None:
            self.currency = currency
        if currency_value is not None:
            self.currency_value = currency_value
        if event_code is not None:
            self.event_code = event_code
        if event_id is not None:
            self.event_id = event_id
        if event_name is not None:
            self.event_name = event_name
        if event_type is not None:
            self.event_type = event_type
        if rules is not None:
            self.rules = rules
        if statistic_type is not None:
            self.statistic_type = statistic_type

    @property
    def currency(self):
        """Gets the currency of this PixeleventcreatePixelEvents.  # noqa: E501


        :return: The currency of this PixeleventcreatePixelEvents.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PixeleventcreatePixelEvents.


        :param currency: The currency of this PixeleventcreatePixelEvents.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def currency_value(self):
        """Gets the currency_value of this PixeleventcreatePixelEvents.  # noqa: E501


        :return: The currency_value of this PixeleventcreatePixelEvents.  # noqa: E501
        :rtype: str
        """
        return self._currency_value

    @currency_value.setter
    def currency_value(self, currency_value):
        """Sets the currency_value of this PixeleventcreatePixelEvents.


        :param currency_value: The currency_value of this PixeleventcreatePixelEvents.  # noqa: E501
        :type: str
        """

        self._currency_value = currency_value

    @property
    def event_code(self):
        """Gets the event_code of this PixeleventcreatePixelEvents.  # noqa: E501


        :return: The event_code of this PixeleventcreatePixelEvents.  # noqa: E501
        :rtype: str
        """
        return self._event_code

    @event_code.setter
    def event_code(self, event_code):
        """Sets the event_code of this PixeleventcreatePixelEvents.


        :param event_code: The event_code of this PixeleventcreatePixelEvents.  # noqa: E501
        :type: str
        """

        self._event_code = event_code

    @property
    def event_id(self):
        """Gets the event_id of this PixeleventcreatePixelEvents.  # noqa: E501


        :return: The event_id of this PixeleventcreatePixelEvents.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this PixeleventcreatePixelEvents.


        :param event_id: The event_id of this PixeleventcreatePixelEvents.  # noqa: E501
        :type: str
        """

        self._event_id = event_id

    @property
    def event_name(self):
        """Gets the event_name of this PixeleventcreatePixelEvents.  # noqa: E501


        :return: The event_name of this PixeleventcreatePixelEvents.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this PixeleventcreatePixelEvents.


        :param event_name: The event_name of this PixeleventcreatePixelEvents.  # noqa: E501
        :type: str
        """

        self._event_name = event_name

    @property
    def event_type(self):
        """Gets the event_type of this PixeleventcreatePixelEvents.  # noqa: E501


        :return: The event_type of this PixeleventcreatePixelEvents.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this PixeleventcreatePixelEvents.


        :param event_type: The event_type of this PixeleventcreatePixelEvents.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def rules(self):
        """Gets the rules of this PixeleventcreatePixelEvents.  # noqa: E501


        :return: The rules of this PixeleventcreatePixelEvents.  # noqa: E501
        :rtype: list[PixeleventcreateRules]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this PixeleventcreatePixelEvents.


        :param rules: The rules of this PixeleventcreatePixelEvents.  # noqa: E501
        :type: list[PixeleventcreateRules]
        """

        self._rules = rules

    @property
    def statistic_type(self):
        """Gets the statistic_type of this PixeleventcreatePixelEvents.  # noqa: E501


        :return: The statistic_type of this PixeleventcreatePixelEvents.  # noqa: E501
        :rtype: str
        """
        return self._statistic_type

    @statistic_type.setter
    def statistic_type(self, statistic_type):
        """Sets the statistic_type of this PixeleventcreatePixelEvents.


        :param statistic_type: The statistic_type of this PixeleventcreatePixelEvents.  # noqa: E501
        :type: str
        """

        self._statistic_type = statistic_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PixeleventcreatePixelEvents, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PixeleventcreatePixelEvents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
