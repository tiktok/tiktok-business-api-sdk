# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class AssetGroupUpdateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'asset_group_id': 'str',
        'asset_group_name': 'str',
        'assets': 'list[BcassetGroupcreateAssets]',
        'bc_id': 'str',
        'members': 'list[BcassetGroupcreateMembers]',
        'update_entity': 'str'
    }

    attribute_map = {
        'action': 'action',
        'asset_group_id': 'asset_group_id',
        'asset_group_name': 'asset_group_name',
        'assets': 'assets',
        'bc_id': 'bc_id',
        'members': 'members',
        'update_entity': 'update_entity'
    }

    def __init__(self, action=None, asset_group_id=None, asset_group_name=None, assets=None, bc_id=None, members=None, update_entity=None):  # noqa: E501
        """AssetGroupUpdateBody - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._asset_group_id = None
        self._asset_group_name = None
        self._assets = None
        self._bc_id = None
        self._members = None
        self._update_entity = None
        self.discriminator = None
        if action is not None:
            self.action = action
        self.asset_group_id = asset_group_id
        if asset_group_name is not None:
            self.asset_group_name = asset_group_name
        if assets is not None:
            self.assets = assets
        self.bc_id = bc_id
        if members is not None:
            self.members = members
        self.update_entity = update_entity

    @property
    def action(self):
        """Gets the action of this AssetGroupUpdateBody.  # noqa: E501


        :return: The action of this AssetGroupUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AssetGroupUpdateBody.


        :param action: The action of this AssetGroupUpdateBody.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def asset_group_id(self):
        """Gets the asset_group_id of this AssetGroupUpdateBody.  # noqa: E501


        :return: The asset_group_id of this AssetGroupUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._asset_group_id

    @asset_group_id.setter
    def asset_group_id(self, asset_group_id):
        """Sets the asset_group_id of this AssetGroupUpdateBody.


        :param asset_group_id: The asset_group_id of this AssetGroupUpdateBody.  # noqa: E501
        :type: str
        """
        if asset_group_id is None:
            raise ValueError("Invalid value for `asset_group_id`, must not be `None`")  # noqa: E501

        self._asset_group_id = asset_group_id

    @property
    def asset_group_name(self):
        """Gets the asset_group_name of this AssetGroupUpdateBody.  # noqa: E501


        :return: The asset_group_name of this AssetGroupUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._asset_group_name

    @asset_group_name.setter
    def asset_group_name(self, asset_group_name):
        """Sets the asset_group_name of this AssetGroupUpdateBody.


        :param asset_group_name: The asset_group_name of this AssetGroupUpdateBody.  # noqa: E501
        :type: str
        """

        self._asset_group_name = asset_group_name

    @property
    def assets(self):
        """Gets the assets of this AssetGroupUpdateBody.  # noqa: E501


        :return: The assets of this AssetGroupUpdateBody.  # noqa: E501
        :rtype: list[BcassetGroupcreateAssets]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this AssetGroupUpdateBody.


        :param assets: The assets of this AssetGroupUpdateBody.  # noqa: E501
        :type: list[BcassetGroupcreateAssets]
        """

        self._assets = assets

    @property
    def bc_id(self):
        """Gets the bc_id of this AssetGroupUpdateBody.  # noqa: E501


        :return: The bc_id of this AssetGroupUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._bc_id

    @bc_id.setter
    def bc_id(self, bc_id):
        """Sets the bc_id of this AssetGroupUpdateBody.


        :param bc_id: The bc_id of this AssetGroupUpdateBody.  # noqa: E501
        :type: str
        """
        if bc_id is None:
            raise ValueError("Invalid value for `bc_id`, must not be `None`")  # noqa: E501

        self._bc_id = bc_id

    @property
    def members(self):
        """Gets the members of this AssetGroupUpdateBody.  # noqa: E501


        :return: The members of this AssetGroupUpdateBody.  # noqa: E501
        :rtype: list[BcassetGroupcreateMembers]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this AssetGroupUpdateBody.


        :param members: The members of this AssetGroupUpdateBody.  # noqa: E501
        :type: list[BcassetGroupcreateMembers]
        """

        self._members = members

    @property
    def update_entity(self):
        """Gets the update_entity of this AssetGroupUpdateBody.  # noqa: E501


        :return: The update_entity of this AssetGroupUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._update_entity

    @update_entity.setter
    def update_entity(self, update_entity):
        """Sets the update_entity of this AssetGroupUpdateBody.


        :param update_entity: The update_entity of this AssetGroupUpdateBody.  # noqa: E501
        :type: str
        """
        if update_entity is None:
            raise ValueError("Invalid value for `update_entity`, must not be `None`")  # noqa: E501

        self._update_entity = update_entity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetGroupUpdateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetGroupUpdateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
