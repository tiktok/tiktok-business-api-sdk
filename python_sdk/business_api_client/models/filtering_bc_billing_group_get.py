# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class FilteringBcBillingGroupGet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billed_to_type': 'str',
        'billing_group_id': 'str',
        'billing_group_name': 'str',
        'billing_group_type': 'str',
        'invoice_group_by': 'str',
        'status': 'int'
    }

    attribute_map = {
        'billed_to_type': 'billed_to_type',
        'billing_group_id': 'billing_group_id',
        'billing_group_name': 'billing_group_name',
        'billing_group_type': 'billing_group_type',
        'invoice_group_by': 'invoice_group_by',
        'status': 'status'
    }

    def __init__(self, billed_to_type=None, billing_group_id=None, billing_group_name=None, billing_group_type=None, invoice_group_by=None, status=None):  # noqa: E501
        """FilteringBcBillingGroupGet - a model defined in Swagger"""  # noqa: E501
        self._billed_to_type = None
        self._billing_group_id = None
        self._billing_group_name = None
        self._billing_group_type = None
        self._invoice_group_by = None
        self._status = None
        self.discriminator = None
        if billed_to_type is not None:
            self.billed_to_type = billed_to_type
        if billing_group_id is not None:
            self.billing_group_id = billing_group_id
        if billing_group_name is not None:
            self.billing_group_name = billing_group_name
        if billing_group_type is not None:
            self.billing_group_type = billing_group_type
        if invoice_group_by is not None:
            self.invoice_group_by = invoice_group_by
        if status is not None:
            self.status = status

    @property
    def billed_to_type(self):
        """Gets the billed_to_type of this FilteringBcBillingGroupGet.  # noqa: E501


        :return: The billed_to_type of this FilteringBcBillingGroupGet.  # noqa: E501
        :rtype: str
        """
        return self._billed_to_type

    @billed_to_type.setter
    def billed_to_type(self, billed_to_type):
        """Sets the billed_to_type of this FilteringBcBillingGroupGet.


        :param billed_to_type: The billed_to_type of this FilteringBcBillingGroupGet.  # noqa: E501
        :type: str
        """

        self._billed_to_type = billed_to_type

    @property
    def billing_group_id(self):
        """Gets the billing_group_id of this FilteringBcBillingGroupGet.  # noqa: E501


        :return: The billing_group_id of this FilteringBcBillingGroupGet.  # noqa: E501
        :rtype: str
        """
        return self._billing_group_id

    @billing_group_id.setter
    def billing_group_id(self, billing_group_id):
        """Sets the billing_group_id of this FilteringBcBillingGroupGet.


        :param billing_group_id: The billing_group_id of this FilteringBcBillingGroupGet.  # noqa: E501
        :type: str
        """

        self._billing_group_id = billing_group_id

    @property
    def billing_group_name(self):
        """Gets the billing_group_name of this FilteringBcBillingGroupGet.  # noqa: E501


        :return: The billing_group_name of this FilteringBcBillingGroupGet.  # noqa: E501
        :rtype: str
        """
        return self._billing_group_name

    @billing_group_name.setter
    def billing_group_name(self, billing_group_name):
        """Sets the billing_group_name of this FilteringBcBillingGroupGet.


        :param billing_group_name: The billing_group_name of this FilteringBcBillingGroupGet.  # noqa: E501
        :type: str
        """

        self._billing_group_name = billing_group_name

    @property
    def billing_group_type(self):
        """Gets the billing_group_type of this FilteringBcBillingGroupGet.  # noqa: E501


        :return: The billing_group_type of this FilteringBcBillingGroupGet.  # noqa: E501
        :rtype: str
        """
        return self._billing_group_type

    @billing_group_type.setter
    def billing_group_type(self, billing_group_type):
        """Sets the billing_group_type of this FilteringBcBillingGroupGet.


        :param billing_group_type: The billing_group_type of this FilteringBcBillingGroupGet.  # noqa: E501
        :type: str
        """

        self._billing_group_type = billing_group_type

    @property
    def invoice_group_by(self):
        """Gets the invoice_group_by of this FilteringBcBillingGroupGet.  # noqa: E501


        :return: The invoice_group_by of this FilteringBcBillingGroupGet.  # noqa: E501
        :rtype: str
        """
        return self._invoice_group_by

    @invoice_group_by.setter
    def invoice_group_by(self, invoice_group_by):
        """Sets the invoice_group_by of this FilteringBcBillingGroupGet.


        :param invoice_group_by: The invoice_group_by of this FilteringBcBillingGroupGet.  # noqa: E501
        :type: str
        """

        self._invoice_group_by = invoice_group_by

    @property
    def status(self):
        """Gets the status of this FilteringBcBillingGroupGet.  # noqa: E501


        :return: The status of this FilteringBcBillingGroupGet.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FilteringBcBillingGroupGet.


        :param status: The status of this FilteringBcBillingGroupGet.  # noqa: E501
        :type: int
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilteringBcBillingGroupGet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilteringBcBillingGroupGet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
