# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class SmartTextGenerateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adgroup_id': 'str',
        'advertiser_id': 'str',
        'industry_id': 'str',
        'keywords': 'list[str]',
        'language': 'str',
        'limit': 'int',
        'param_type': 'str'
    }

    attribute_map = {
        'adgroup_id': 'adgroup_id',
        'advertiser_id': 'advertiser_id',
        'industry_id': 'industry_id',
        'keywords': 'keywords',
        'language': 'language',
        'limit': 'limit',
        'param_type': 'param_type'
    }

    def __init__(self, adgroup_id=None, advertiser_id=None, industry_id=None, keywords=None, language=None, limit=10, param_type='CUSTOMIZED'):  # noqa: E501
        """SmartTextGenerateBody - a model defined in Swagger"""  # noqa: E501
        self._adgroup_id = None
        self._advertiser_id = None
        self._industry_id = None
        self._keywords = None
        self._language = None
        self._limit = None
        self._param_type = None
        self.discriminator = None
        self.adgroup_id = adgroup_id
        self.advertiser_id = advertiser_id
        if industry_id is not None:
            self.industry_id = industry_id
        if keywords is not None:
            self.keywords = keywords
        if language is not None:
            self.language = language
        if limit is not None:
            self.limit = limit
        if param_type is not None:
            self.param_type = param_type

    @property
    def adgroup_id(self):
        """Gets the adgroup_id of this SmartTextGenerateBody.  # noqa: E501


        :return: The adgroup_id of this SmartTextGenerateBody.  # noqa: E501
        :rtype: str
        """
        return self._adgroup_id

    @adgroup_id.setter
    def adgroup_id(self, adgroup_id):
        """Sets the adgroup_id of this SmartTextGenerateBody.


        :param adgroup_id: The adgroup_id of this SmartTextGenerateBody.  # noqa: E501
        :type: str
        """
        if adgroup_id is None:
            raise ValueError("Invalid value for `adgroup_id`, must not be `None`")  # noqa: E501

        self._adgroup_id = adgroup_id

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this SmartTextGenerateBody.  # noqa: E501


        :return: The advertiser_id of this SmartTextGenerateBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this SmartTextGenerateBody.


        :param advertiser_id: The advertiser_id of this SmartTextGenerateBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def industry_id(self):
        """Gets the industry_id of this SmartTextGenerateBody.  # noqa: E501


        :return: The industry_id of this SmartTextGenerateBody.  # noqa: E501
        :rtype: str
        """
        return self._industry_id

    @industry_id.setter
    def industry_id(self, industry_id):
        """Sets the industry_id of this SmartTextGenerateBody.


        :param industry_id: The industry_id of this SmartTextGenerateBody.  # noqa: E501
        :type: str
        """

        self._industry_id = industry_id

    @property
    def keywords(self):
        """Gets the keywords of this SmartTextGenerateBody.  # noqa: E501


        :return: The keywords of this SmartTextGenerateBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this SmartTextGenerateBody.


        :param keywords: The keywords of this SmartTextGenerateBody.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def language(self):
        """Gets the language of this SmartTextGenerateBody.  # noqa: E501


        :return: The language of this SmartTextGenerateBody.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SmartTextGenerateBody.


        :param language: The language of this SmartTextGenerateBody.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def limit(self):
        """Gets the limit of this SmartTextGenerateBody.  # noqa: E501


        :return: The limit of this SmartTextGenerateBody.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SmartTextGenerateBody.


        :param limit: The limit of this SmartTextGenerateBody.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def param_type(self):
        """Gets the param_type of this SmartTextGenerateBody.  # noqa: E501


        :return: The param_type of this SmartTextGenerateBody.  # noqa: E501
        :rtype: str
        """
        return self._param_type

    @param_type.setter
    def param_type(self, param_type):
        """Sets the param_type of this SmartTextGenerateBody.


        :param param_type: The param_type of this SmartTextGenerateBody.  # noqa: E501
        :type: str
        """

        self._param_type = param_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmartTextGenerateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartTextGenerateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
