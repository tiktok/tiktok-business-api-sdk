# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class CreativeportfoliocreateStickerParam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'str',
        'cutoff_time': 'str',
        'display_angle': 'int',
        'giftcode': 'str',
        'landing_page_url': 'str',
        'live_tiktok_user_id': 'str',
        'opacity': 'str',
        'position_x': 'int',
        'position_y': 'int',
        'predefined_placement': 'str',
        'reminder_time': 'str',
        'size': 'str',
        'sticker_type': 'str',
        'title': 'str'
    }

    attribute_map = {
        'color': 'color',
        'cutoff_time': 'cutoff_time',
        'display_angle': 'display_angle',
        'giftcode': 'giftcode',
        'landing_page_url': 'landing_page_url',
        'live_tiktok_user_id': 'live_tiktok_user_id',
        'opacity': 'opacity',
        'position_x': 'position_x',
        'position_y': 'position_y',
        'predefined_placement': 'predefined_placement',
        'reminder_time': 'reminder_time',
        'size': 'size',
        'sticker_type': 'sticker_type',
        'title': 'title'
    }

    def __init__(self, color=None, cutoff_time=None, display_angle=None, giftcode=None, landing_page_url=None, live_tiktok_user_id=None, opacity=None, position_x=None, position_y=None, predefined_placement=None, reminder_time=None, size=None, sticker_type='COUNTDOWN', title=None):  # noqa: E501
        """CreativeportfoliocreateStickerParam - a model defined in Swagger"""  # noqa: E501
        self._color = None
        self._cutoff_time = None
        self._display_angle = None
        self._giftcode = None
        self._landing_page_url = None
        self._live_tiktok_user_id = None
        self._opacity = None
        self._position_x = None
        self._position_y = None
        self._predefined_placement = None
        self._reminder_time = None
        self._size = None
        self._sticker_type = None
        self._title = None
        self.discriminator = None
        self.color = color
        if cutoff_time is not None:
            self.cutoff_time = cutoff_time
        if display_angle is not None:
            self.display_angle = display_angle
        if giftcode is not None:
            self.giftcode = giftcode
        if landing_page_url is not None:
            self.landing_page_url = landing_page_url
        if live_tiktok_user_id is not None:
            self.live_tiktok_user_id = live_tiktok_user_id
        if opacity is not None:
            self.opacity = opacity
        if position_x is not None:
            self.position_x = position_x
        if position_y is not None:
            self.position_y = position_y
        if predefined_placement is not None:
            self.predefined_placement = predefined_placement
        if reminder_time is not None:
            self.reminder_time = reminder_time
        if size is not None:
            self.size = size
        if sticker_type is not None:
            self.sticker_type = sticker_type
        self.title = title

    @property
    def color(self):
        """Gets the color of this CreativeportfoliocreateStickerParam.  # noqa: E501


        :return: The color of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CreativeportfoliocreateStickerParam.


        :param color: The color of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")  # noqa: E501

        self._color = color

    @property
    def cutoff_time(self):
        """Gets the cutoff_time of this CreativeportfoliocreateStickerParam.  # noqa: E501


        :return: The cutoff_time of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._cutoff_time

    @cutoff_time.setter
    def cutoff_time(self, cutoff_time):
        """Sets the cutoff_time of this CreativeportfoliocreateStickerParam.


        :param cutoff_time: The cutoff_time of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """

        self._cutoff_time = cutoff_time

    @property
    def display_angle(self):
        """Gets the display_angle of this CreativeportfoliocreateStickerParam.  # noqa: E501


        :return: The display_angle of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: int
        """
        return self._display_angle

    @display_angle.setter
    def display_angle(self, display_angle):
        """Sets the display_angle of this CreativeportfoliocreateStickerParam.


        :param display_angle: The display_angle of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :type: int
        """

        self._display_angle = display_angle

    @property
    def giftcode(self):
        """Gets the giftcode of this CreativeportfoliocreateStickerParam.  # noqa: E501


        :return: The giftcode of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._giftcode

    @giftcode.setter
    def giftcode(self, giftcode):
        """Sets the giftcode of this CreativeportfoliocreateStickerParam.


        :param giftcode: The giftcode of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """

        self._giftcode = giftcode

    @property
    def landing_page_url(self):
        """Gets the landing_page_url of this CreativeportfoliocreateStickerParam.  # noqa: E501


        :return: The landing_page_url of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._landing_page_url

    @landing_page_url.setter
    def landing_page_url(self, landing_page_url):
        """Sets the landing_page_url of this CreativeportfoliocreateStickerParam.


        :param landing_page_url: The landing_page_url of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """

        self._landing_page_url = landing_page_url

    @property
    def live_tiktok_user_id(self):
        """Gets the live_tiktok_user_id of this CreativeportfoliocreateStickerParam.  # noqa: E501


        :return: The live_tiktok_user_id of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._live_tiktok_user_id

    @live_tiktok_user_id.setter
    def live_tiktok_user_id(self, live_tiktok_user_id):
        """Sets the live_tiktok_user_id of this CreativeportfoliocreateStickerParam.


        :param live_tiktok_user_id: The live_tiktok_user_id of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """

        self._live_tiktok_user_id = live_tiktok_user_id

    @property
    def opacity(self):
        """Gets the opacity of this CreativeportfoliocreateStickerParam.  # noqa: E501


        :return: The opacity of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._opacity

    @opacity.setter
    def opacity(self, opacity):
        """Sets the opacity of this CreativeportfoliocreateStickerParam.


        :param opacity: The opacity of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """

        self._opacity = opacity

    @property
    def position_x(self):
        """Gets the position_x of this CreativeportfoliocreateStickerParam.  # noqa: E501


        :return: The position_x of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: int
        """
        return self._position_x

    @position_x.setter
    def position_x(self, position_x):
        """Sets the position_x of this CreativeportfoliocreateStickerParam.


        :param position_x: The position_x of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :type: int
        """

        self._position_x = position_x

    @property
    def position_y(self):
        """Gets the position_y of this CreativeportfoliocreateStickerParam.  # noqa: E501


        :return: The position_y of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: int
        """
        return self._position_y

    @position_y.setter
    def position_y(self, position_y):
        """Sets the position_y of this CreativeportfoliocreateStickerParam.


        :param position_y: The position_y of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :type: int
        """

        self._position_y = position_y

    @property
    def predefined_placement(self):
        """Gets the predefined_placement of this CreativeportfoliocreateStickerParam.  # noqa: E501


        :return: The predefined_placement of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._predefined_placement

    @predefined_placement.setter
    def predefined_placement(self, predefined_placement):
        """Sets the predefined_placement of this CreativeportfoliocreateStickerParam.


        :param predefined_placement: The predefined_placement of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """

        self._predefined_placement = predefined_placement

    @property
    def reminder_time(self):
        """Gets the reminder_time of this CreativeportfoliocreateStickerParam.  # noqa: E501


        :return: The reminder_time of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._reminder_time

    @reminder_time.setter
    def reminder_time(self, reminder_time):
        """Sets the reminder_time of this CreativeportfoliocreateStickerParam.


        :param reminder_time: The reminder_time of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """

        self._reminder_time = reminder_time

    @property
    def size(self):
        """Gets the size of this CreativeportfoliocreateStickerParam.  # noqa: E501


        :return: The size of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this CreativeportfoliocreateStickerParam.


        :param size: The size of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def sticker_type(self):
        """Gets the sticker_type of this CreativeportfoliocreateStickerParam.  # noqa: E501


        :return: The sticker_type of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._sticker_type

    @sticker_type.setter
    def sticker_type(self, sticker_type):
        """Sets the sticker_type of this CreativeportfoliocreateStickerParam.


        :param sticker_type: The sticker_type of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """

        self._sticker_type = sticker_type

    @property
    def title(self):
        """Gets the title of this CreativeportfoliocreateStickerParam.  # noqa: E501


        :return: The title of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreativeportfoliocreateStickerParam.


        :param title: The title of this CreativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreativeportfoliocreateStickerParam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreativeportfoliocreateStickerParam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
