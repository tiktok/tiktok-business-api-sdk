# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class creativeportfoliocreateStickerParam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'str',
        'cutoff_time': 'str',
        'display_angle': 'int',
        'landing_page_url': 'str',
        'live_tiktok_user_id': 'str',
        'opacity': 'str',
        'position_x': 'int',
        'position_y': 'int',
        'reminder_time': 'str',
        'size': 'str',
        'sticker_type': 'str',
        'title': 'str'
    }

    attribute_map = {
        'color': 'color',
        'cutoff_time': 'cutoff_time',
        'display_angle': 'display_angle',
        'landing_page_url': 'landing_page_url',
        'live_tiktok_user_id': 'live_tiktok_user_id',
        'opacity': 'opacity',
        'position_x': 'position_x',
        'position_y': 'position_y',
        'reminder_time': 'reminder_time',
        'size': 'size',
        'sticker_type': 'sticker_type',
        'title': 'title'
    }

    def __init__(self, color=None, cutoff_time=None, display_angle=None, landing_page_url=None, live_tiktok_user_id=None, opacity=None, position_x=None, position_y=None, reminder_time=None, size=None, sticker_type=None, title=None):  # noqa: E501
        """creativeportfoliocreateStickerParam - a model defined in Swagger"""  # noqa: E501
        self._color = None
        self._cutoff_time = None
        self._display_angle = None
        self._landing_page_url = None
        self._live_tiktok_user_id = None
        self._opacity = None
        self._position_x = None
        self._position_y = None
        self._reminder_time = None
        self._size = None
        self._sticker_type = None
        self._title = None
        self.discriminator = None
        if color is not None:
            self.color = color
        if cutoff_time is not None:
            self.cutoff_time = cutoff_time
        if display_angle is not None:
            self.display_angle = display_angle
        if landing_page_url is not None:
            self.landing_page_url = landing_page_url
        if live_tiktok_user_id is not None:
            self.live_tiktok_user_id = live_tiktok_user_id
        if opacity is not None:
            self.opacity = opacity
        if position_x is not None:
            self.position_x = position_x
        if position_y is not None:
            self.position_y = position_y
        if reminder_time is not None:
            self.reminder_time = reminder_time
        if size is not None:
            self.size = size
        if sticker_type is not None:
            self.sticker_type = sticker_type
        if title is not None:
            self.title = title

    @property
    def color(self):
        """Gets the color of this creativeportfoliocreateStickerParam.  # noqa: E501

        Background color of the sticker. Enum values: `ORANGE`(orange), `BLACK`(black), `RED`(red), `BLUE`(blue)  # noqa: E501

        :return: The color of this creativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this creativeportfoliocreateStickerParam.

        Background color of the sticker. Enum values: `ORANGE`(orange), `BLACK`(black), `RED`(red), `BLUE`(blue)  # noqa: E501

        :param color: The color of this creativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def cutoff_time(self):
        """Gets the cutoff_time of this creativeportfoliocreateStickerParam.  # noqa: E501

        Countdown deadline (when `sticker_type`= `COUNTDOWN` or `REMINDER_COUNTDOWN`) or LIVE start time (when `sticker_type`=`LIVE_REMINDER_COUNTDOWN`) for the Countdown Sticker, in the format of \"2022-10-30 00:00:00\" (UTC+0 Time). Note: The time you pass in via this field is regarded as UTC+0 time by default and you cannot modify the default time zone  # noqa: E501

        :return: The cutoff_time of this creativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._cutoff_time

    @cutoff_time.setter
    def cutoff_time(self, cutoff_time):
        """Sets the cutoff_time of this creativeportfoliocreateStickerParam.

        Countdown deadline (when `sticker_type`= `COUNTDOWN` or `REMINDER_COUNTDOWN`) or LIVE start time (when `sticker_type`=`LIVE_REMINDER_COUNTDOWN`) for the Countdown Sticker, in the format of \"2022-10-30 00:00:00\" (UTC+0 Time). Note: The time you pass in via this field is regarded as UTC+0 time by default and you cannot modify the default time zone  # noqa: E501

        :param cutoff_time: The cutoff_time of this creativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """

        self._cutoff_time = cutoff_time

    @property
    def display_angle(self):
        """Gets the display_angle of this creativeportfoliocreateStickerParam.  # noqa: E501

        Sticker display angle. Value range: `[-180, +180]`. `+90` means to rotate the sticker clockwise by 90 degrees  # noqa: E501

        :return: The display_angle of this creativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: int
        """
        return self._display_angle

    @display_angle.setter
    def display_angle(self, display_angle):
        """Sets the display_angle of this creativeportfoliocreateStickerParam.

        Sticker display angle. Value range: `[-180, +180]`. `+90` means to rotate the sticker clockwise by 90 degrees  # noqa: E501

        :param display_angle: The display_angle of this creativeportfoliocreateStickerParam.  # noqa: E501
        :type: int
        """

        self._display_angle = display_angle

    @property
    def landing_page_url(self):
        """Gets the landing_page_url of this creativeportfoliocreateStickerParam.  # noqa: E501

        The landing page URL you will be redirected to when you click the reminder after the countdown for an non-LIVE event ends. Required when `sticker_type` is `REMINDER_COUNTDOWN`  # noqa: E501

        :return: The landing_page_url of this creativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._landing_page_url

    @landing_page_url.setter
    def landing_page_url(self, landing_page_url):
        """Sets the landing_page_url of this creativeportfoliocreateStickerParam.

        The landing page URL you will be redirected to when you click the reminder after the countdown for an non-LIVE event ends. Required when `sticker_type` is `REMINDER_COUNTDOWN`  # noqa: E501

        :param landing_page_url: The landing_page_url of this creativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """

        self._landing_page_url = landing_page_url

    @property
    def live_tiktok_user_id(self):
        """Gets the live_tiktok_user_id of this creativeportfoliocreateStickerParam.  # noqa: E501

        TikTok user ID of the LIVE event host. Required when `sticker_type` is `LIVE_REMINDER_COUNTDOWN`. After specifying this field, you will be redirected to the host LIVE room when you click the reminder for a LIVE event  # noqa: E501

        :return: The live_tiktok_user_id of this creativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._live_tiktok_user_id

    @live_tiktok_user_id.setter
    def live_tiktok_user_id(self, live_tiktok_user_id):
        """Sets the live_tiktok_user_id of this creativeportfoliocreateStickerParam.

        TikTok user ID of the LIVE event host. Required when `sticker_type` is `LIVE_REMINDER_COUNTDOWN`. After specifying this field, you will be redirected to the host LIVE room when you click the reminder for a LIVE event  # noqa: E501

        :param live_tiktok_user_id: The live_tiktok_user_id of this creativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """

        self._live_tiktok_user_id = live_tiktok_user_id

    @property
    def opacity(self):
        """Gets the opacity of this creativeportfoliocreateStickerParam.  # noqa: E501

        Sticker opacity. Enum values: `0.7`, `0.8`, `0.9`, `1`. The lower the value, the more transparent the sticker will be  # noqa: E501

        :return: The opacity of this creativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._opacity

    @opacity.setter
    def opacity(self, opacity):
        """Sets the opacity of this creativeportfoliocreateStickerParam.

        Sticker opacity. Enum values: `0.7`, `0.8`, `0.9`, `1`. The lower the value, the more transparent the sticker will be  # noqa: E501

        :param opacity: The opacity of this creativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """

        self._opacity = opacity

    @property
    def position_x(self):
        """Gets the position_x of this creativeportfoliocreateStickerParam.  # noqa: E501

        The x-axis coordinate relative to the top-left corner of the screen. Value range: 50-109  # noqa: E501

        :return: The position_x of this creativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: int
        """
        return self._position_x

    @position_x.setter
    def position_x(self, position_x):
        """Sets the position_x of this creativeportfoliocreateStickerParam.

        The x-axis coordinate relative to the top-left corner of the screen. Value range: 50-109  # noqa: E501

        :param position_x: The position_x of this creativeportfoliocreateStickerParam.  # noqa: E501
        :type: int
        """

        self._position_x = position_x

    @property
    def position_y(self):
        """Gets the position_y of this creativeportfoliocreateStickerParam.  # noqa: E501

        The y-axis coordinate relative to the top-left corner of the screen. Value range: 141-506  # noqa: E501

        :return: The position_y of this creativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: int
        """
        return self._position_y

    @position_y.setter
    def position_y(self, position_y):
        """Sets the position_y of this creativeportfoliocreateStickerParam.

        The y-axis coordinate relative to the top-left corner of the screen. Value range: 141-506  # noqa: E501

        :param position_y: The position_y of this creativeportfoliocreateStickerParam.  # noqa: E501
        :type: int
        """

        self._position_y = position_y

    @property
    def reminder_time(self):
        """Gets the reminder_time of this creativeportfoliocreateStickerParam.  # noqa: E501

        The time set for the reminder. Required when `sticker_type`= `REMINDER_COUNTDOWN` or `LIVE_REMINDER_COUNTDOWN`.For non-LIVE stickers (when `sticker_type`= `REMINDER_COUNTDOWN`), the enum values are:`ONE_MINUTE_EARLIER`: send the reminder one minute before the non-LIVE event.`ONE_HOUR_EARLIER `: send the reminder one hour before the non-LIVE event.`ONE_DAY_EARLIER`: send the reminder one day before the non-LIVE event.For LIVE stickers (when `sticker_type`= `LIVE_REMINDER_COUNTDOWN`), the enum values are: `ONE_MINUTE_AFTER`: send the reminder one minute after the LIVE event starts.`FIVE_MINUTES_AFTER`: send the reminder five minutes after the LIVE event starts.`TEN_MINUTES_AFTER`: send the reminder ten minutes after the LIVE event starts.   # noqa: E501

        :return: The reminder_time of this creativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._reminder_time

    @reminder_time.setter
    def reminder_time(self, reminder_time):
        """Sets the reminder_time of this creativeportfoliocreateStickerParam.

        The time set for the reminder. Required when `sticker_type`= `REMINDER_COUNTDOWN` or `LIVE_REMINDER_COUNTDOWN`.For non-LIVE stickers (when `sticker_type`= `REMINDER_COUNTDOWN`), the enum values are:`ONE_MINUTE_EARLIER`: send the reminder one minute before the non-LIVE event.`ONE_HOUR_EARLIER `: send the reminder one hour before the non-LIVE event.`ONE_DAY_EARLIER`: send the reminder one day before the non-LIVE event.For LIVE stickers (when `sticker_type`= `LIVE_REMINDER_COUNTDOWN`), the enum values are: `ONE_MINUTE_AFTER`: send the reminder one minute after the LIVE event starts.`FIVE_MINUTES_AFTER`: send the reminder five minutes after the LIVE event starts.`TEN_MINUTES_AFTER`: send the reminder ten minutes after the LIVE event starts.   # noqa: E501

        :param reminder_time: The reminder_time of this creativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """

        self._reminder_time = reminder_time

    @property
    def size(self):
        """Gets the size of this creativeportfoliocreateStickerParam.  # noqa: E501


        :return: The size of this creativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this creativeportfoliocreateStickerParam.


        :param size: The size of this creativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def sticker_type(self):
        """Gets the sticker_type of this creativeportfoliocreateStickerParam.  # noqa: E501

        Sticker type. Default value: `COUNTDOWN`. Enum values: `COUNTDOWN`: A Countdown Sticker with no reminder.`REMINDER_COUNTDOWN`: A Countdown Sticker with reminder for a non-LIVE event.`LIVE_REMINDER_COUNTDOWN`: A Countdown Sticker with reminder for a LIVE event.  # noqa: E501

        :return: The sticker_type of this creativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._sticker_type

    @sticker_type.setter
    def sticker_type(self, sticker_type):
        """Sets the sticker_type of this creativeportfoliocreateStickerParam.

        Sticker type. Default value: `COUNTDOWN`. Enum values: `COUNTDOWN`: A Countdown Sticker with no reminder.`REMINDER_COUNTDOWN`: A Countdown Sticker with reminder for a non-LIVE event.`LIVE_REMINDER_COUNTDOWN`: A Countdown Sticker with reminder for a LIVE event.  # noqa: E501

        :param sticker_type: The sticker_type of this creativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """

        self._sticker_type = sticker_type

    @property
    def title(self):
        """Gets the title of this creativeportfoliocreateStickerParam.  # noqa: E501

        Sticker title. The maximum length is 54, in UTF-8 bytes (54 English letters or 18 Chinese characters), and the hashtag symbol (#) is not supported  # noqa: E501

        :return: The title of this creativeportfoliocreateStickerParam.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this creativeportfoliocreateStickerParam.

        Sticker title. The maximum length is 54, in UTF-8 bytes (54 English letters or 18 Chinese characters), and the hashtag symbol (#) is not supported  # noqa: E501

        :param title: The title of this creativeportfoliocreateStickerParam.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(creativeportfoliocreateStickerParam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, creativeportfoliocreateStickerParam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
