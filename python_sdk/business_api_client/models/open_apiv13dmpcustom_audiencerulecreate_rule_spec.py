# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class OpenApiv13dmpcustomAudiencerulecreateRuleSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exclusion_rule_set': 'OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSet',
        'inclusion_rule_set': 'OpenApiv13dmpcustomAudiencerulecreateRuleSpecInclusionRuleSet'
    }

    attribute_map = {
        'exclusion_rule_set': 'exclusion_rule_set',
        'inclusion_rule_set': 'inclusion_rule_set'
    }

    def __init__(self, exclusion_rule_set=None, inclusion_rule_set=None):  # noqa: E501
        """OpenApiv13dmpcustomAudiencerulecreateRuleSpec - a model defined in Swagger"""  # noqa: E501
        self._exclusion_rule_set = None
        self._inclusion_rule_set = None
        self.discriminator = None
        if exclusion_rule_set is not None:
            self.exclusion_rule_set = exclusion_rule_set
        self.inclusion_rule_set = inclusion_rule_set

    @property
    def exclusion_rule_set(self):
        """Gets the exclusion_rule_set of this OpenApiv13dmpcustomAudiencerulecreateRuleSpec.  # noqa: E501


        :return: The exclusion_rule_set of this OpenApiv13dmpcustomAudiencerulecreateRuleSpec.  # noqa: E501
        :rtype: OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSet
        """
        return self._exclusion_rule_set

    @exclusion_rule_set.setter
    def exclusion_rule_set(self, exclusion_rule_set):
        """Sets the exclusion_rule_set of this OpenApiv13dmpcustomAudiencerulecreateRuleSpec.


        :param exclusion_rule_set: The exclusion_rule_set of this OpenApiv13dmpcustomAudiencerulecreateRuleSpec.  # noqa: E501
        :type: OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSet
        """

        self._exclusion_rule_set = exclusion_rule_set

    @property
    def inclusion_rule_set(self):
        """Gets the inclusion_rule_set of this OpenApiv13dmpcustomAudiencerulecreateRuleSpec.  # noqa: E501


        :return: The inclusion_rule_set of this OpenApiv13dmpcustomAudiencerulecreateRuleSpec.  # noqa: E501
        :rtype: OpenApiv13dmpcustomAudiencerulecreateRuleSpecInclusionRuleSet
        """
        return self._inclusion_rule_set

    @inclusion_rule_set.setter
    def inclusion_rule_set(self, inclusion_rule_set):
        """Sets the inclusion_rule_set of this OpenApiv13dmpcustomAudiencerulecreateRuleSpec.


        :param inclusion_rule_set: The inclusion_rule_set of this OpenApiv13dmpcustomAudiencerulecreateRuleSpec.  # noqa: E501
        :type: OpenApiv13dmpcustomAudiencerulecreateRuleSpecInclusionRuleSet
        """
        if inclusion_rule_set is None:
            raise ValueError("Invalid value for `inclusion_rule_set`, must not be `None`")  # noqa: E501

        self._inclusion_rule_set = inclusion_rule_set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenApiv13dmpcustomAudiencerulecreateRuleSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenApiv13dmpcustomAudiencerulecreateRuleSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
