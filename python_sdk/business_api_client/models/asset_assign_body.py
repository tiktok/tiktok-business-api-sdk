# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class AssetAssignBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_role': 'str',
        'asset_id': 'str',
        'asset_type': 'str',
        'bc_id': 'str',
        'catalog_role': 'str',
        'form_library_role': 'str',
        'store_role': 'str',
        'tt_account_roles': 'list[str]',
        'user_id': 'str'
    }

    attribute_map = {
        'advertiser_role': 'advertiser_role',
        'asset_id': 'asset_id',
        'asset_type': 'asset_type',
        'bc_id': 'bc_id',
        'catalog_role': 'catalog_role',
        'form_library_role': 'form_library_role',
        'store_role': 'store_role',
        'tt_account_roles': 'tt_account_roles',
        'user_id': 'user_id'
    }

    def __init__(self, advertiser_role=None, asset_id=None, asset_type=None, bc_id=None, catalog_role=None, form_library_role=None, store_role=None, tt_account_roles=None, user_id=None):  # noqa: E501
        """AssetAssignBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_role = None
        self._asset_id = None
        self._asset_type = None
        self._bc_id = None
        self._catalog_role = None
        self._form_library_role = None
        self._store_role = None
        self._tt_account_roles = None
        self._user_id = None
        self.discriminator = None
        if advertiser_role is not None:
            self.advertiser_role = advertiser_role
        self.asset_id = asset_id
        self.asset_type = asset_type
        self.bc_id = bc_id
        if catalog_role is not None:
            self.catalog_role = catalog_role
        if form_library_role is not None:
            self.form_library_role = form_library_role
        if store_role is not None:
            self.store_role = store_role
        if tt_account_roles is not None:
            self.tt_account_roles = tt_account_roles
        self.user_id = user_id

    @property
    def advertiser_role(self):
        """Gets the advertiser_role of this AssetAssignBody.  # noqa: E501


        :return: The advertiser_role of this AssetAssignBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_role

    @advertiser_role.setter
    def advertiser_role(self, advertiser_role):
        """Sets the advertiser_role of this AssetAssignBody.


        :param advertiser_role: The advertiser_role of this AssetAssignBody.  # noqa: E501
        :type: str
        """

        self._advertiser_role = advertiser_role

    @property
    def asset_id(self):
        """Gets the asset_id of this AssetAssignBody.  # noqa: E501


        :return: The asset_id of this AssetAssignBody.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this AssetAssignBody.


        :param asset_id: The asset_id of this AssetAssignBody.  # noqa: E501
        :type: str
        """
        if asset_id is None:
            raise ValueError("Invalid value for `asset_id`, must not be `None`")  # noqa: E501

        self._asset_id = asset_id

    @property
    def asset_type(self):
        """Gets the asset_type of this AssetAssignBody.  # noqa: E501


        :return: The asset_type of this AssetAssignBody.  # noqa: E501
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this AssetAssignBody.


        :param asset_type: The asset_type of this AssetAssignBody.  # noqa: E501
        :type: str
        """
        if asset_type is None:
            raise ValueError("Invalid value for `asset_type`, must not be `None`")  # noqa: E501

        self._asset_type = asset_type

    @property
    def bc_id(self):
        """Gets the bc_id of this AssetAssignBody.  # noqa: E501


        :return: The bc_id of this AssetAssignBody.  # noqa: E501
        :rtype: str
        """
        return self._bc_id

    @bc_id.setter
    def bc_id(self, bc_id):
        """Sets the bc_id of this AssetAssignBody.


        :param bc_id: The bc_id of this AssetAssignBody.  # noqa: E501
        :type: str
        """
        if bc_id is None:
            raise ValueError("Invalid value for `bc_id`, must not be `None`")  # noqa: E501

        self._bc_id = bc_id

    @property
    def catalog_role(self):
        """Gets the catalog_role of this AssetAssignBody.  # noqa: E501


        :return: The catalog_role of this AssetAssignBody.  # noqa: E501
        :rtype: str
        """
        return self._catalog_role

    @catalog_role.setter
    def catalog_role(self, catalog_role):
        """Sets the catalog_role of this AssetAssignBody.


        :param catalog_role: The catalog_role of this AssetAssignBody.  # noqa: E501
        :type: str
        """

        self._catalog_role = catalog_role

    @property
    def form_library_role(self):
        """Gets the form_library_role of this AssetAssignBody.  # noqa: E501


        :return: The form_library_role of this AssetAssignBody.  # noqa: E501
        :rtype: str
        """
        return self._form_library_role

    @form_library_role.setter
    def form_library_role(self, form_library_role):
        """Sets the form_library_role of this AssetAssignBody.


        :param form_library_role: The form_library_role of this AssetAssignBody.  # noqa: E501
        :type: str
        """

        self._form_library_role = form_library_role

    @property
    def store_role(self):
        """Gets the store_role of this AssetAssignBody.  # noqa: E501


        :return: The store_role of this AssetAssignBody.  # noqa: E501
        :rtype: str
        """
        return self._store_role

    @store_role.setter
    def store_role(self, store_role):
        """Sets the store_role of this AssetAssignBody.


        :param store_role: The store_role of this AssetAssignBody.  # noqa: E501
        :type: str
        """

        self._store_role = store_role

    @property
    def tt_account_roles(self):
        """Gets the tt_account_roles of this AssetAssignBody.  # noqa: E501


        :return: The tt_account_roles of this AssetAssignBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._tt_account_roles

    @tt_account_roles.setter
    def tt_account_roles(self, tt_account_roles):
        """Sets the tt_account_roles of this AssetAssignBody.


        :param tt_account_roles: The tt_account_roles of this AssetAssignBody.  # noqa: E501
        :type: list[str]
        """

        self._tt_account_roles = tt_account_roles

    @property
    def user_id(self):
        """Gets the user_id of this AssetAssignBody.  # noqa: E501


        :return: The user_id of this AssetAssignBody.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AssetAssignBody.


        :param user_id: The user_id of this AssetAssignBody.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetAssignBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetAssignBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
