# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class OptimizerRuleCreateBodyRules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actions': 'list[OptimizerRuleCreateBodyActions]',
        'apply_objects': 'list[OptimizerRuleCreateBodyApplyObjects]',
        'conditions': 'list[OptimizerRuleCreateBodyConditions]',
        'name': 'str',
        'notification': 'OptimizerRuleCreateBodyNotification',
        'rule_exec_info': 'OptimizerRuleCreateBodyRuleExecInfo',
        'tzone': 'str'
    }

    attribute_map = {
        'actions': 'actions',
        'apply_objects': 'apply_objects',
        'conditions': 'conditions',
        'name': 'name',
        'notification': 'notification',
        'rule_exec_info': 'rule_exec_info',
        'tzone': 'tzone'
    }

    def __init__(self, actions=None, apply_objects=None, conditions=None, name=None, notification=None, rule_exec_info=None, tzone=None):  # noqa: E501
        """OptimizerRuleCreateBodyRules - a model defined in Swagger"""  # noqa: E501
        self._actions = None
        self._apply_objects = None
        self._conditions = None
        self._name = None
        self._notification = None
        self._rule_exec_info = None
        self._tzone = None
        self.discriminator = None
        self.actions = actions
        self.apply_objects = apply_objects
        self.conditions = conditions
        self.name = name
        self.notification = notification
        self.rule_exec_info = rule_exec_info
        if tzone is not None:
            self.tzone = tzone

    @property
    def actions(self):
        """Gets the actions of this OptimizerRuleCreateBodyRules.  # noqa: E501


        :return: The actions of this OptimizerRuleCreateBodyRules.  # noqa: E501
        :rtype: list[OptimizerRuleCreateBodyActions]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this OptimizerRuleCreateBodyRules.


        :param actions: The actions of this OptimizerRuleCreateBodyRules.  # noqa: E501
        :type: list[OptimizerRuleCreateBodyActions]
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")  # noqa: E501

        self._actions = actions

    @property
    def apply_objects(self):
        """Gets the apply_objects of this OptimizerRuleCreateBodyRules.  # noqa: E501


        :return: The apply_objects of this OptimizerRuleCreateBodyRules.  # noqa: E501
        :rtype: list[OptimizerRuleCreateBodyApplyObjects]
        """
        return self._apply_objects

    @apply_objects.setter
    def apply_objects(self, apply_objects):
        """Sets the apply_objects of this OptimizerRuleCreateBodyRules.


        :param apply_objects: The apply_objects of this OptimizerRuleCreateBodyRules.  # noqa: E501
        :type: list[OptimizerRuleCreateBodyApplyObjects]
        """
        if apply_objects is None:
            raise ValueError("Invalid value for `apply_objects`, must not be `None`")  # noqa: E501

        self._apply_objects = apply_objects

    @property
    def conditions(self):
        """Gets the conditions of this OptimizerRuleCreateBodyRules.  # noqa: E501


        :return: The conditions of this OptimizerRuleCreateBodyRules.  # noqa: E501
        :rtype: list[OptimizerRuleCreateBodyConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this OptimizerRuleCreateBodyRules.


        :param conditions: The conditions of this OptimizerRuleCreateBodyRules.  # noqa: E501
        :type: list[OptimizerRuleCreateBodyConditions]
        """
        if conditions is None:
            raise ValueError("Invalid value for `conditions`, must not be `None`")  # noqa: E501

        self._conditions = conditions

    @property
    def name(self):
        """Gets the name of this OptimizerRuleCreateBodyRules.  # noqa: E501


        :return: The name of this OptimizerRuleCreateBodyRules.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OptimizerRuleCreateBodyRules.


        :param name: The name of this OptimizerRuleCreateBodyRules.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def notification(self):
        """Gets the notification of this OptimizerRuleCreateBodyRules.  # noqa: E501


        :return: The notification of this OptimizerRuleCreateBodyRules.  # noqa: E501
        :rtype: OptimizerRuleCreateBodyNotification
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this OptimizerRuleCreateBodyRules.


        :param notification: The notification of this OptimizerRuleCreateBodyRules.  # noqa: E501
        :type: OptimizerRuleCreateBodyNotification
        """
        if notification is None:
            raise ValueError("Invalid value for `notification`, must not be `None`")  # noqa: E501

        self._notification = notification

    @property
    def rule_exec_info(self):
        """Gets the rule_exec_info of this OptimizerRuleCreateBodyRules.  # noqa: E501


        :return: The rule_exec_info of this OptimizerRuleCreateBodyRules.  # noqa: E501
        :rtype: OptimizerRuleCreateBodyRuleExecInfo
        """
        return self._rule_exec_info

    @rule_exec_info.setter
    def rule_exec_info(self, rule_exec_info):
        """Sets the rule_exec_info of this OptimizerRuleCreateBodyRules.


        :param rule_exec_info: The rule_exec_info of this OptimizerRuleCreateBodyRules.  # noqa: E501
        :type: OptimizerRuleCreateBodyRuleExecInfo
        """
        if rule_exec_info is None:
            raise ValueError("Invalid value for `rule_exec_info`, must not be `None`")  # noqa: E501

        self._rule_exec_info = rule_exec_info

    @property
    def tzone(self):
        """Gets the tzone of this OptimizerRuleCreateBodyRules.  # noqa: E501


        :return: The tzone of this OptimizerRuleCreateBodyRules.  # noqa: E501
        :rtype: str
        """
        return self._tzone

    @tzone.setter
    def tzone(self, tzone):
        """Sets the tzone of this OptimizerRuleCreateBodyRules.


        :param tzone: The tzone of this OptimizerRuleCreateBodyRules.  # noqa: E501
        :type: str
        """

        self._tzone = tzone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptimizerRuleCreateBodyRules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizerRuleCreateBodyRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
