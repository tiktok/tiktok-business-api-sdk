# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class adupdateCreatives(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ad_format': 'str',
        'ad_id': 'str',
        'ad_name': 'str',
        'ad_text': 'str',
        'app_name': 'str',
        'avatar_icon_web_uri': 'str',
        'brand_safety_postbid_partner': 'str',
        'brand_safety_vast_url': 'str',
        'call_to_action': 'str',
        'call_to_action_id': 'str',
        'card_id': 'str',
        'card_image_id': 'str',
        'card_image_index': 'int',
        'card_show_price': 'bool',
        'card_tags': 'list[str]',
        'card_type': 'str',
        'catalog_id': 'str',
        'click_tracking_url': 'str',
        'creative_authorized': 'bool',
        'creative_type': 'str',
        'dark_post_status': 'str',
        'deeplink': 'str',
        'deeplink_type': 'str',
        'disclaimer_clickable_texts': 'list[adcreateDisclaimerClickableTexts]',
        'disclaimer_text': 'adcreateDisclaimerText',
        'disclaimer_type': 'str',
        'display_name': 'str',
        'dynamic_destination': 'str',
        'dynamic_format': 'str',
        'fallback_type': 'str',
        'identity_authorized_bc_id': 'str',
        'identity_id': 'str',
        'identity_type': 'str',
        'image_ids': 'list[str]',
        'impression_tracking_url': 'str',
        'instant_product_page_used': 'bool',
        'interactive_motion_id': 'str',
        'item_duet_status': 'str',
        'item_group_ids': 'list[str]',
        'item_stitch_status': 'str',
        'landing_page_url': 'str',
        'operation_status': 'str',
        'page_id': 'int',
        'page_image_index': 'int',
        'playable_url': 'str',
        'product_set_id': 'str',
        'product_specific_type': 'str',
        'promotional_music_disabled': 'bool',
        'shopping_ads_deeplink_type': 'str',
        'shopping_ads_fallback_type': 'str',
        'shopping_ads_video_package_id': 'str',
        'sku_ids': 'list[str]',
        'tiktok_item_id': 'str',
        'tracking_pixel_id': 'int',
        'vast_moat_enabled': 'bool',
        'vertical_video_strategy': 'str',
        'video_id': 'str',
        'video_view_tracking_url': 'str',
        'viewability_postbid_partner': 'str',
        'viewability_vast_url': 'str'
    }

    attribute_map = {
        'ad_format': 'ad_format',
        'ad_id': 'ad_id',
        'ad_name': 'ad_name',
        'ad_text': 'ad_text',
        'app_name': 'app_name',
        'avatar_icon_web_uri': 'avatar_icon_web_uri',
        'brand_safety_postbid_partner': 'brand_safety_postbid_partner',
        'brand_safety_vast_url': 'brand_safety_vast_url',
        'call_to_action': 'call_to_action',
        'call_to_action_id': 'call_to_action_id',
        'card_id': 'card_id',
        'card_image_id': 'card_image_id',
        'card_image_index': 'card_image_index',
        'card_show_price': 'card_show_price',
        'card_tags': 'card_tags',
        'card_type': 'card_type',
        'catalog_id': 'catalog_id',
        'click_tracking_url': 'click_tracking_url',
        'creative_authorized': 'creative_authorized',
        'creative_type': 'creative_type',
        'dark_post_status': 'dark_post_status',
        'deeplink': 'deeplink',
        'deeplink_type': 'deeplink_type',
        'disclaimer_clickable_texts': 'disclaimer_clickable_texts',
        'disclaimer_text': 'disclaimer_text',
        'disclaimer_type': 'disclaimer_type',
        'display_name': 'display_name',
        'dynamic_destination': 'dynamic_destination',
        'dynamic_format': 'dynamic_format',
        'fallback_type': 'fallback_type',
        'identity_authorized_bc_id': 'identity_authorized_bc_id',
        'identity_id': 'identity_id',
        'identity_type': 'identity_type',
        'image_ids': 'image_ids',
        'impression_tracking_url': 'impression_tracking_url',
        'instant_product_page_used': 'instant_product_page_used',
        'interactive_motion_id': 'interactive_motion_id',
        'item_duet_status': 'item_duet_status',
        'item_group_ids': 'item_group_ids',
        'item_stitch_status': 'item_stitch_status',
        'landing_page_url': 'landing_page_url',
        'operation_status': 'operation_status',
        'page_id': 'page_id',
        'page_image_index': 'page_image_index',
        'playable_url': 'playable_url',
        'product_set_id': 'product_set_id',
        'product_specific_type': 'product_specific_type',
        'promotional_music_disabled': 'promotional_music_disabled',
        'shopping_ads_deeplink_type': 'shopping_ads_deeplink_type',
        'shopping_ads_fallback_type': 'shopping_ads_fallback_type',
        'shopping_ads_video_package_id': 'shopping_ads_video_package_id',
        'sku_ids': 'sku_ids',
        'tiktok_item_id': 'tiktok_item_id',
        'tracking_pixel_id': 'tracking_pixel_id',
        'vast_moat_enabled': 'vast_moat_enabled',
        'vertical_video_strategy': 'vertical_video_strategy',
        'video_id': 'video_id',
        'video_view_tracking_url': 'video_view_tracking_url',
        'viewability_postbid_partner': 'viewability_postbid_partner',
        'viewability_vast_url': 'viewability_vast_url'
    }

    def __init__(self, ad_format=None, ad_id=None, ad_name=None, ad_text=None, app_name=None, avatar_icon_web_uri=None, brand_safety_postbid_partner=None, brand_safety_vast_url=None, call_to_action=None, call_to_action_id=None, card_id=None, card_image_id=None, card_image_index=None, card_show_price=None, card_tags=None, card_type=None, catalog_id=None, click_tracking_url=None, creative_authorized=None, creative_type=None, dark_post_status=None, deeplink=None, deeplink_type=None, disclaimer_clickable_texts=None, disclaimer_text=None, disclaimer_type=None, display_name=None, dynamic_destination=None, dynamic_format=None, fallback_type=None, identity_authorized_bc_id=None, identity_id=None, identity_type=None, image_ids=None, impression_tracking_url=None, instant_product_page_used=None, interactive_motion_id=None, item_duet_status=None, item_group_ids=None, item_stitch_status=None, landing_page_url=None, operation_status=None, page_id=None, page_image_index=None, playable_url=None, product_set_id=None, product_specific_type=None, promotional_music_disabled=None, shopping_ads_deeplink_type=None, shopping_ads_fallback_type=None, shopping_ads_video_package_id=None, sku_ids=None, tiktok_item_id=None, tracking_pixel_id=None, vast_moat_enabled=None, vertical_video_strategy=None, video_id=None, video_view_tracking_url=None, viewability_postbid_partner=None, viewability_vast_url=None):  # noqa: E501
        """adupdateCreatives - a model defined in Swagger"""  # noqa: E501
        self._ad_format = None
        self._ad_id = None
        self._ad_name = None
        self._ad_text = None
        self._app_name = None
        self._avatar_icon_web_uri = None
        self._brand_safety_postbid_partner = None
        self._brand_safety_vast_url = None
        self._call_to_action = None
        self._call_to_action_id = None
        self._card_id = None
        self._card_image_id = None
        self._card_image_index = None
        self._card_show_price = None
        self._card_tags = None
        self._card_type = None
        self._catalog_id = None
        self._click_tracking_url = None
        self._creative_authorized = None
        self._creative_type = None
        self._dark_post_status = None
        self._deeplink = None
        self._deeplink_type = None
        self._disclaimer_clickable_texts = None
        self._disclaimer_text = None
        self._disclaimer_type = None
        self._display_name = None
        self._dynamic_destination = None
        self._dynamic_format = None
        self._fallback_type = None
        self._identity_authorized_bc_id = None
        self._identity_id = None
        self._identity_type = None
        self._image_ids = None
        self._impression_tracking_url = None
        self._instant_product_page_used = None
        self._interactive_motion_id = None
        self._item_duet_status = None
        self._item_group_ids = None
        self._item_stitch_status = None
        self._landing_page_url = None
        self._operation_status = None
        self._page_id = None
        self._page_image_index = None
        self._playable_url = None
        self._product_set_id = None
        self._product_specific_type = None
        self._promotional_music_disabled = None
        self._shopping_ads_deeplink_type = None
        self._shopping_ads_fallback_type = None
        self._shopping_ads_video_package_id = None
        self._sku_ids = None
        self._tiktok_item_id = None
        self._tracking_pixel_id = None
        self._vast_moat_enabled = None
        self._vertical_video_strategy = None
        self._video_id = None
        self._video_view_tracking_url = None
        self._viewability_postbid_partner = None
        self._viewability_vast_url = None
        self.discriminator = None
        if ad_format is not None:
            self.ad_format = ad_format
        if ad_id is not None:
            self.ad_id = ad_id
        if ad_name is not None:
            self.ad_name = ad_name
        if ad_text is not None:
            self.ad_text = ad_text
        if app_name is not None:
            self.app_name = app_name
        if avatar_icon_web_uri is not None:
            self.avatar_icon_web_uri = avatar_icon_web_uri
        if brand_safety_postbid_partner is not None:
            self.brand_safety_postbid_partner = brand_safety_postbid_partner
        if brand_safety_vast_url is not None:
            self.brand_safety_vast_url = brand_safety_vast_url
        if call_to_action is not None:
            self.call_to_action = call_to_action
        if call_to_action_id is not None:
            self.call_to_action_id = call_to_action_id
        if card_id is not None:
            self.card_id = card_id
        if card_image_id is not None:
            self.card_image_id = card_image_id
        if card_image_index is not None:
            self.card_image_index = card_image_index
        if card_show_price is not None:
            self.card_show_price = card_show_price
        if card_tags is not None:
            self.card_tags = card_tags
        if card_type is not None:
            self.card_type = card_type
        if catalog_id is not None:
            self.catalog_id = catalog_id
        if click_tracking_url is not None:
            self.click_tracking_url = click_tracking_url
        if creative_authorized is not None:
            self.creative_authorized = creative_authorized
        if creative_type is not None:
            self.creative_type = creative_type
        if dark_post_status is not None:
            self.dark_post_status = dark_post_status
        if deeplink is not None:
            self.deeplink = deeplink
        if deeplink_type is not None:
            self.deeplink_type = deeplink_type
        if disclaimer_clickable_texts is not None:
            self.disclaimer_clickable_texts = disclaimer_clickable_texts
        if disclaimer_text is not None:
            self.disclaimer_text = disclaimer_text
        if disclaimer_type is not None:
            self.disclaimer_type = disclaimer_type
        if display_name is not None:
            self.display_name = display_name
        if dynamic_destination is not None:
            self.dynamic_destination = dynamic_destination
        if dynamic_format is not None:
            self.dynamic_format = dynamic_format
        if fallback_type is not None:
            self.fallback_type = fallback_type
        if identity_authorized_bc_id is not None:
            self.identity_authorized_bc_id = identity_authorized_bc_id
        if identity_id is not None:
            self.identity_id = identity_id
        if identity_type is not None:
            self.identity_type = identity_type
        if image_ids is not None:
            self.image_ids = image_ids
        if impression_tracking_url is not None:
            self.impression_tracking_url = impression_tracking_url
        if instant_product_page_used is not None:
            self.instant_product_page_used = instant_product_page_used
        if interactive_motion_id is not None:
            self.interactive_motion_id = interactive_motion_id
        if item_duet_status is not None:
            self.item_duet_status = item_duet_status
        if item_group_ids is not None:
            self.item_group_ids = item_group_ids
        if item_stitch_status is not None:
            self.item_stitch_status = item_stitch_status
        if landing_page_url is not None:
            self.landing_page_url = landing_page_url
        if operation_status is not None:
            self.operation_status = operation_status
        if page_id is not None:
            self.page_id = page_id
        if page_image_index is not None:
            self.page_image_index = page_image_index
        if playable_url is not None:
            self.playable_url = playable_url
        if product_set_id is not None:
            self.product_set_id = product_set_id
        if product_specific_type is not None:
            self.product_specific_type = product_specific_type
        if promotional_music_disabled is not None:
            self.promotional_music_disabled = promotional_music_disabled
        if shopping_ads_deeplink_type is not None:
            self.shopping_ads_deeplink_type = shopping_ads_deeplink_type
        if shopping_ads_fallback_type is not None:
            self.shopping_ads_fallback_type = shopping_ads_fallback_type
        if shopping_ads_video_package_id is not None:
            self.shopping_ads_video_package_id = shopping_ads_video_package_id
        if sku_ids is not None:
            self.sku_ids = sku_ids
        if tiktok_item_id is not None:
            self.tiktok_item_id = tiktok_item_id
        if tracking_pixel_id is not None:
            self.tracking_pixel_id = tracking_pixel_id
        if vast_moat_enabled is not None:
            self.vast_moat_enabled = vast_moat_enabled
        if vertical_video_strategy is not None:
            self.vertical_video_strategy = vertical_video_strategy
        if video_id is not None:
            self.video_id = video_id
        if video_view_tracking_url is not None:
            self.video_view_tracking_url = video_view_tracking_url
        if viewability_postbid_partner is not None:
            self.viewability_postbid_partner = viewability_postbid_partner
        if viewability_vast_url is not None:
            self.viewability_vast_url = viewability_vast_url

    @property
    def ad_format(self):
        """Gets the ad_format of this adupdateCreatives.  # noqa: E501

        The creative type. Enum values- SINGLE_IMAGE, SINGLE_VIDEO, LIVE_CONTENT. For in-feed ads on TikTok, set this field to SINGLE_VIDEO. For live shopping events on TikTok, set this field to LIVE_CONTENT.  # noqa: E501

        :return: The ad_format of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._ad_format

    @ad_format.setter
    def ad_format(self, ad_format):
        """Sets the ad_format of this adupdateCreatives.

        The creative type. Enum values- SINGLE_IMAGE, SINGLE_VIDEO, LIVE_CONTENT. For in-feed ads on TikTok, set this field to SINGLE_VIDEO. For live shopping events on TikTok, set this field to LIVE_CONTENT.  # noqa: E501

        :param ad_format: The ad_format of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._ad_format = ad_format

    @property
    def ad_id(self):
        """Gets the ad_id of this adupdateCreatives.  # noqa: E501

        Ad ID  # noqa: E501

        :return: The ad_id of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._ad_id

    @ad_id.setter
    def ad_id(self, ad_id):
        """Sets the ad_id of this adupdateCreatives.

        Ad ID  # noqa: E501

        :param ad_id: The ad_id of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._ad_id = ad_id

    @property
    def ad_name(self):
        """Gets the ad_name of this adupdateCreatives.  # noqa: E501

        Ad name. Set as \" \" (Empty string) for it to be automatically generated. The format of auto-generated ad name is- creative name + creation time (e.g. adcreative20210111190739). Character limit is 512 and cannot contain emoji. Note- Each word in Chinese or Japanese counts as two characters, while each letter in English counts as one character.  # noqa: E501

        :return: The ad_name of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._ad_name

    @ad_name.setter
    def ad_name(self, ad_name):
        """Sets the ad_name of this adupdateCreatives.

        Ad name. Set as \" \" (Empty string) for it to be automatically generated. The format of auto-generated ad name is- creative name + creation time (e.g. adcreative20210111190739). Character limit is 512 and cannot contain emoji. Note- Each word in Chinese or Japanese counts as two characters, while each letter in English counts as one character.  # noqa: E501

        :param ad_name: The ad_name of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._ad_name = ad_name

    @property
    def ad_text(self):
        """Gets the ad_text of this adupdateCreatives.  # noqa: E501

        An ad text. It is shown to your audience as part of your ad creative, to deliver the message you intend to communicate to them. If you don't know how to create effective ad texts, you can try the Smart Text feature, which generates ad text recommendations based on the industry and language.This field is required for image or video ads (ad_format is SINGLE_IMAGE or SINGLE_VIDEO)Ad text must be 1-100 characters long and cannot contain emoji.Each word in Chinese or Japanese counts as two characters, while each letter in English counts as one character.  # noqa: E501

        :return: The ad_text of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._ad_text

    @ad_text.setter
    def ad_text(self, ad_text):
        """Sets the ad_text of this adupdateCreatives.

        An ad text. It is shown to your audience as part of your ad creative, to deliver the message you intend to communicate to them. If you don't know how to create effective ad texts, you can try the Smart Text feature, which generates ad text recommendations based on the industry and language.This field is required for image or video ads (ad_format is SINGLE_IMAGE or SINGLE_VIDEO)Ad text must be 1-100 characters long and cannot contain emoji.Each word in Chinese or Japanese counts as two characters, while each letter in English counts as one character.  # noqa: E501

        :param ad_text: The ad_text of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._ad_text = ad_text

    @property
    def app_name(self):
        """Gets the app_name of this adupdateCreatives.  # noqa: E501

        App name that is displayed in the ad.  If not specified, the name in the app store will be used. Number of characters allowed- 1-40. If the name in the app store exceeds 40 characters, you must pass in a new app name with this field.  # noqa: E501

        :return: The app_name of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this adupdateCreatives.

        App name that is displayed in the ad.  If not specified, the name in the app store will be used. Number of characters allowed- 1-40. If the name in the app store exceeds 40 characters, you must pass in a new app name with this field.  # noqa: E501

        :param app_name: The app_name of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def avatar_icon_web_uri(self):
        """Gets the avatar_icon_web_uri of this adupdateCreatives.  # noqa: E501

        ID of the avatar image. It can be uploaded through the [Upload an image](https://ads.tiktok.com/marketing_api/docs?id=1739067433456642) endpoint (picture ratio requirement is 1- 1  # noqa: E501

        :return: The avatar_icon_web_uri of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._avatar_icon_web_uri

    @avatar_icon_web_uri.setter
    def avatar_icon_web_uri(self, avatar_icon_web_uri):
        """Sets the avatar_icon_web_uri of this adupdateCreatives.

        ID of the avatar image. It can be uploaded through the [Upload an image](https://ads.tiktok.com/marketing_api/docs?id=1739067433456642) endpoint (picture ratio requirement is 1- 1  # noqa: E501

        :param avatar_icon_web_uri: The avatar_icon_web_uri of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._avatar_icon_web_uri = avatar_icon_web_uri

    @property
    def brand_safety_postbid_partner(self):
        """Gets the brand_safety_postbid_partner of this adupdateCreatives.  # noqa: E501

        Post-bid third-party brand safety measurement partner. Enum values- `DOUBLE_VERIFY`, `IAS`, `ZEFR`. You can use [/tool/vast_option/](https://ads.tiktok.com/marketing_api/docs?id=1755436556897281) to get available post-bid third-party measurement partners.  # noqa: E501

        :return: The brand_safety_postbid_partner of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._brand_safety_postbid_partner

    @brand_safety_postbid_partner.setter
    def brand_safety_postbid_partner(self, brand_safety_postbid_partner):
        """Sets the brand_safety_postbid_partner of this adupdateCreatives.

        Post-bid third-party brand safety measurement partner. Enum values- `DOUBLE_VERIFY`, `IAS`, `ZEFR`. You can use [/tool/vast_option/](https://ads.tiktok.com/marketing_api/docs?id=1755436556897281) to get available post-bid third-party measurement partners.  # noqa: E501

        :param brand_safety_postbid_partner: The brand_safety_postbid_partner of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._brand_safety_postbid_partner = brand_safety_postbid_partner

    @property
    def brand_safety_vast_url(self):
        """Gets the brand_safety_vast_url of this adupdateCreatives.  # noqa: E501

        The wrapped VAST URL used by the post-bid third-party partner to measure brand safety. Required when `brand_safety_postbid_partner` = `IAS`. You need to get the URL from the measurement partner IAS  # noqa: E501

        :return: The brand_safety_vast_url of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._brand_safety_vast_url

    @brand_safety_vast_url.setter
    def brand_safety_vast_url(self, brand_safety_vast_url):
        """Sets the brand_safety_vast_url of this adupdateCreatives.

        The wrapped VAST URL used by the post-bid third-party partner to measure brand safety. Required when `brand_safety_postbid_partner` = `IAS`. You need to get the URL from the measurement partner IAS  # noqa: E501

        :param brand_safety_vast_url: The brand_safety_vast_url of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._brand_safety_vast_url = brand_safety_vast_url

    @property
    def call_to_action(self):
        """Gets the call_to_action of this adupdateCreatives.  # noqa: E501

        Call-to-action text. For TikTok ads, either this field or `call_to_action_id` must be specified. If both are specified, this field will be ignored. For enum values, see [Enumeration - Call-to-Action](https://ads.tiktok.com/marketing_api/docs?id=1737174886619138). For live shopping events, the call to action must be `WATCH_LIVE`.  # noqa: E501

        :return: The call_to_action of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._call_to_action

    @call_to_action.setter
    def call_to_action(self, call_to_action):
        """Sets the call_to_action of this adupdateCreatives.

        Call-to-action text. For TikTok ads, either this field or `call_to_action_id` must be specified. If both are specified, this field will be ignored. For enum values, see [Enumeration - Call-to-Action](https://ads.tiktok.com/marketing_api/docs?id=1737174886619138). For live shopping events, the call to action must be `WATCH_LIVE`.  # noqa: E501

        :param call_to_action: The call_to_action of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._call_to_action = call_to_action

    @property
    def call_to_action_id(self):
        """Gets the call_to_action_id of this adupdateCreatives.  # noqa: E501

        The ID of the CTA portfolio that you want to use in your ads. A CTA portfolio is a group of auto-optimized CTAs. If both this field and `call_to_action` are specified, this field will be used, and `call_to_action` will be ignored. For details about auto-optimized CTAs, see [CTA Recommendations - Auto-Optimized CTAs](https://ads.tiktok.com/marketing_api/docs?id=1740307296329730).  # noqa: E501

        :return: The call_to_action_id of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._call_to_action_id

    @call_to_action_id.setter
    def call_to_action_id(self, call_to_action_id):
        """Sets the call_to_action_id of this adupdateCreatives.

        The ID of the CTA portfolio that you want to use in your ads. A CTA portfolio is a group of auto-optimized CTAs. If both this field and `call_to_action` are specified, this field will be used, and `call_to_action` will be ignored. For details about auto-optimized CTAs, see [CTA Recommendations - Auto-Optimized CTAs](https://ads.tiktok.com/marketing_api/docs?id=1740307296329730).  # noqa: E501

        :param call_to_action_id: The call_to_action_id of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._call_to_action_id = call_to_action_id

    @property
    def card_id(self):
        """Gets the card_id of this adupdateCreatives.  # noqa: E501

        Image card ID, gift code card ID, premium badge ID, Countdown Sticker ID, or Download Card ID. To learn about how to get an image card ID or gift card ID, please see [Use Cards in Ads]  # noqa: E501

        :return: The card_id of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this adupdateCreatives.

        Image card ID, gift code card ID, premium badge ID, Countdown Sticker ID, or Download Card ID. To learn about how to get an image card ID or gift card ID, please see [Use Cards in Ads]  # noqa: E501

        :param card_id: The card_id of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._card_id = card_id

    @property
    def card_image_id(self):
        """Gets the card_image_id of this adupdateCreatives.  # noqa: E501

        Required if card_type=IMAGE  # noqa: E501

        :return: The card_image_id of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._card_image_id

    @card_image_id.setter
    def card_image_id(self, card_image_id):
        """Sets the card_image_id of this adupdateCreatives.

        Required if card_type=IMAGE  # noqa: E501

        :param card_image_id: The card_image_id of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._card_image_id = card_image_id

    @property
    def card_image_index(self):
        """Gets the card_image_index of this adupdateCreatives.  # noqa: E501

        The index of product additional image list. The clients can use it to specify card image of product cards.  # noqa: E501

        :return: The card_image_index of this adupdateCreatives.  # noqa: E501
        :rtype: int
        """
        return self._card_image_index

    @card_image_index.setter
    def card_image_index(self, card_image_index):
        """Sets the card_image_index of this adupdateCreatives.

        The index of product additional image list. The clients can use it to specify card image of product cards.  # noqa: E501

        :param card_image_index: The card_image_index of this adupdateCreatives.  # noqa: E501
        :type: int
        """

        self._card_image_index = card_image_index

    @property
    def card_show_price(self):
        """Gets the card_show_price of this adupdateCreatives.  # noqa: E501

        Whether to show price on card or not  # noqa: E501

        :return: The card_show_price of this adupdateCreatives.  # noqa: E501
        :rtype: bool
        """
        return self._card_show_price

    @card_show_price.setter
    def card_show_price(self, card_show_price):
        """Sets the card_show_price of this adupdateCreatives.

        Whether to show price on card or not  # noqa: E501

        :param card_show_price: The card_show_price of this adupdateCreatives.  # noqa: E501
        :type: bool
        """

        self._card_show_price = card_show_price

    @property
    def card_tags(self):
        """Gets the card_tags of this adupdateCreatives.  # noqa: E501

        Enum values- `BRAND`,  `DESC`. Max size = 2.  # noqa: E501

        :return: The card_tags of this adupdateCreatives.  # noqa: E501
        :rtype: list[str]
        """
        return self._card_tags

    @card_tags.setter
    def card_tags(self, card_tags):
        """Sets the card_tags of this adupdateCreatives.

        Enum values- `BRAND`,  `DESC`. Max size = 2.  # noqa: E501

        :param card_tags: The card_tags of this adupdateCreatives.  # noqa: E501
        :type: list[str]
        """

        self._card_tags = card_tags

    @property
    def card_type(self):
        """Gets the card_type of this adupdateCreatives.  # noqa: E501

        Enum values- `IMAGE`, `PRODUCT`  # noqa: E501

        :return: The card_type of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this adupdateCreatives.

        Enum values- `IMAGE`, `PRODUCT`  # noqa: E501

        :param card_type: The card_type of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._card_type = card_type

    @property
    def catalog_id(self):
        """Gets the catalog_id of this adupdateCreatives.  # noqa: E501

        Product catalog ID. Required for shop purchases ads. Products whose links are shown in the ad are from this catalog.  # noqa: E501

        :return: The catalog_id of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this adupdateCreatives.

        Product catalog ID. Required for shop purchases ads. Products whose links are shown in the ad are from this catalog.  # noqa: E501

        :param catalog_id: The catalog_id of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._catalog_id = catalog_id

    @property
    def click_tracking_url(self):
        """Gets the click_tracking_url of this adupdateCreatives.  # noqa: E501

        Click monitoring URL. Currently Pangle does not support DCM, Sizmek or Flashtalking.  # noqa: E501

        :return: The click_tracking_url of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._click_tracking_url

    @click_tracking_url.setter
    def click_tracking_url(self, click_tracking_url):
        """Sets the click_tracking_url of this adupdateCreatives.

        Click monitoring URL. Currently Pangle does not support DCM, Sizmek or Flashtalking.  # noqa: E501

        :param click_tracking_url: The click_tracking_url of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._click_tracking_url = click_tracking_url

    @property
    def creative_authorized(self):
        """Gets the creative_authorized of this adupdateCreatives.  # noqa: E501

        Whether you grant displaying some of your ads in our TikTok For Business Creative Center. Only valid for non-US advertisers, the default value is `false`.  # noqa: E501

        :return: The creative_authorized of this adupdateCreatives.  # noqa: E501
        :rtype: bool
        """
        return self._creative_authorized

    @creative_authorized.setter
    def creative_authorized(self, creative_authorized):
        """Sets the creative_authorized of this adupdateCreatives.

        Whether you grant displaying some of your ads in our TikTok For Business Creative Center. Only valid for non-US advertisers, the default value is `false`.  # noqa: E501

        :param creative_authorized: The creative_authorized of this adupdateCreatives.  # noqa: E501
        :type: bool
        """

        self._creative_authorized = creative_authorized

    @property
    def creative_type(self):
        """Gets the creative_type of this adupdateCreatives.  # noqa: E501

        Creative type for Shop Purchases or Product Sales scenarios. Required when `objective_type` is `SHOP_PURCHASES` or `PRODUCT_SALES.  # noqa: E501

        :return: The creative_type of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._creative_type

    @creative_type.setter
    def creative_type(self, creative_type):
        """Sets the creative_type of this adupdateCreatives.

        Creative type for Shop Purchases or Product Sales scenarios. Required when `objective_type` is `SHOP_PURCHASES` or `PRODUCT_SALES.  # noqa: E501

        :param creative_type: The creative_type of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._creative_type = creative_type

    @property
    def dark_post_status(self):
        """Gets the dark_post_status of this adupdateCreatives.  # noqa: E501

        You can set this field to either `ON` or `OFF`. Default is `OFF`. If the ad is created as a dark post, it will not appear in the creator's homepage.  # noqa: E501

        :return: The dark_post_status of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._dark_post_status

    @dark_post_status.setter
    def dark_post_status(self, dark_post_status):
        """Sets the dark_post_status of this adupdateCreatives.

        You can set this field to either `ON` or `OFF`. Default is `OFF`. If the ad is created as a dark post, it will not appear in the creator's homepage.  # noqa: E501

        :param dark_post_status: The dark_post_status of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._dark_post_status = dark_post_status

    @property
    def deeplink(self):
        """Gets the deeplink of this adupdateCreatives.  # noqa: E501

        The specific location where you want your audience to go if they have your app installed. See `deeplink_type` for more.  # noqa: E501

        :return: The deeplink of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._deeplink

    @deeplink.setter
    def deeplink(self, deeplink):
        """Sets the deeplink of this adupdateCreatives.

        The specific location where you want your audience to go if they have your app installed. See `deeplink_type` for more.  # noqa: E501

        :param deeplink: The deeplink of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._deeplink = deeplink

    @property
    def deeplink_type(self):
        """Gets the deeplink_type of this adupdateCreatives.  # noqa: E501

        The open URL type. Allowed values differs based on campaign objectives. Allowed values- `NORMAL`(supported in Traffic, Conversion), `DEFERRED_DEEPLINK`(supported in App Install). The default value is `NORMAL`. For an ad that will be included in an iOS 14 campaign, this field cannot be set to `DEFERRED_DEEPLINK`.  # noqa: E501

        :return: The deeplink_type of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._deeplink_type

    @deeplink_type.setter
    def deeplink_type(self, deeplink_type):
        """Sets the deeplink_type of this adupdateCreatives.

        The open URL type. Allowed values differs based on campaign objectives. Allowed values- `NORMAL`(supported in Traffic, Conversion), `DEFERRED_DEEPLINK`(supported in App Install). The default value is `NORMAL`. For an ad that will be included in an iOS 14 campaign, this field cannot be set to `DEFERRED_DEEPLINK`.  # noqa: E501

        :param deeplink_type: The deeplink_type of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._deeplink_type = deeplink_type

    @property
    def disclaimer_clickable_texts(self):
        """Gets the disclaimer_clickable_texts of this adupdateCreatives.  # noqa: E501

        The clickable disclaimer or clickable disclaimers that you want to add to the ad. Required when `disclaimer_type` = `TEXT_LINK`. Max size- 3. If you use multiple clickable disclaimers, both the overall length for all the texts you pass in and the length of individual text need to be no more than 40 characters.  # noqa: E501

        :return: The disclaimer_clickable_texts of this adupdateCreatives.  # noqa: E501
        :rtype: list[adcreateDisclaimerClickableTexts]
        """
        return self._disclaimer_clickable_texts

    @disclaimer_clickable_texts.setter
    def disclaimer_clickable_texts(self, disclaimer_clickable_texts):
        """Sets the disclaimer_clickable_texts of this adupdateCreatives.

        The clickable disclaimer or clickable disclaimers that you want to add to the ad. Required when `disclaimer_type` = `TEXT_LINK`. Max size- 3. If you use multiple clickable disclaimers, both the overall length for all the texts you pass in and the length of individual text need to be no more than 40 characters.  # noqa: E501

        :param disclaimer_clickable_texts: The disclaimer_clickable_texts of this adupdateCreatives.  # noqa: E501
        :type: list[adcreateDisclaimerClickableTexts]
        """

        self._disclaimer_clickable_texts = disclaimer_clickable_texts

    @property
    def disclaimer_text(self):
        """Gets the disclaimer_text of this adupdateCreatives.  # noqa: E501


        :return: The disclaimer_text of this adupdateCreatives.  # noqa: E501
        :rtype: adcreateDisclaimerText
        """
        return self._disclaimer_text

    @disclaimer_text.setter
    def disclaimer_text(self, disclaimer_text):
        """Sets the disclaimer_text of this adupdateCreatives.


        :param disclaimer_text: The disclaimer_text of this adupdateCreatives.  # noqa: E501
        :type: adcreateDisclaimerText
        """

        self._disclaimer_text = disclaimer_text

    @property
    def disclaimer_type(self):
        """Gets the disclaimer_type of this adupdateCreatives.  # noqa: E501

        Type of disclaimer that you want to add to the ad. Enum values- `TEXT_LINK`(clickable disclaimers), `TEXT_ONLY`(text-only disclaimers). See [Include disclaimers in ads](https://ads.tiktok.com/marketing_api/docs?id=1739953274550273) to learn about how to configure disclaimer settings. Disclaimers are currently an allowlist-only feature for advertisers not registered in Canada and America using auction ad objectives, and for all advertisers using Reach & Frequency ad objectives. If you would like to access it, please contact your TikTok representative. The disclaimer feature only supports the following advertising objectives- `APP_PROMOTION`, `WEB_CONVERSIONS`, `APP_INSTALL`, `CONVERSIONS`, `REACH`, `TRAFFIC`, `VIDEO_VIEWS`, `ENGAGEMENT`, `LEAD_GENERATION`, `RF_REACH`, `RF_TRAFFIC`, `RF_VIDEO_VIEW`.  The disclaimer feature only supports TikTok placement. The disclaimer feature is not supported for Automated Creative Optimization ads. Once added to your ads, the disclaimer cannot be deleted.  # noqa: E501

        :return: The disclaimer_type of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._disclaimer_type

    @disclaimer_type.setter
    def disclaimer_type(self, disclaimer_type):
        """Sets the disclaimer_type of this adupdateCreatives.

        Type of disclaimer that you want to add to the ad. Enum values- `TEXT_LINK`(clickable disclaimers), `TEXT_ONLY`(text-only disclaimers). See [Include disclaimers in ads](https://ads.tiktok.com/marketing_api/docs?id=1739953274550273) to learn about how to configure disclaimer settings. Disclaimers are currently an allowlist-only feature for advertisers not registered in Canada and America using auction ad objectives, and for all advertisers using Reach & Frequency ad objectives. If you would like to access it, please contact your TikTok representative. The disclaimer feature only supports the following advertising objectives- `APP_PROMOTION`, `WEB_CONVERSIONS`, `APP_INSTALL`, `CONVERSIONS`, `REACH`, `TRAFFIC`, `VIDEO_VIEWS`, `ENGAGEMENT`, `LEAD_GENERATION`, `RF_REACH`, `RF_TRAFFIC`, `RF_VIDEO_VIEW`.  The disclaimer feature only supports TikTok placement. The disclaimer feature is not supported for Automated Creative Optimization ads. Once added to your ads, the disclaimer cannot be deleted.  # noqa: E501

        :param disclaimer_type: The disclaimer_type of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._disclaimer_type = disclaimer_type

    @property
    def display_name(self):
        """Gets the display_name of this adupdateCreatives.  # noqa: E501

        The display name of landing page or pure exposure ad, length limit- 1-40 English characters, or 1-20 Chinese/Japanese/Korean characters, required when the promotion type is landing page or pure exposure  # noqa: E501

        :return: The display_name of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this adupdateCreatives.

        The display name of landing page or pure exposure ad, length limit- 1-40 English characters, or 1-20 Chinese/Japanese/Korean characters, required when the promotion type is landing page or pure exposure  # noqa: E501

        :param display_name: The display_name of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def dynamic_destination(self):
        """Gets the dynamic_destination of this adupdateCreatives.  # noqa: E501

        Enum values- `UNSET`, `DLP`(Dynamic Landing Page)  # noqa: E501

        :return: The dynamic_destination of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_destination

    @dynamic_destination.setter
    def dynamic_destination(self, dynamic_destination):
        """Sets the dynamic_destination of this adupdateCreatives.

        Enum values- `UNSET`, `DLP`(Dynamic Landing Page)  # noqa: E501

        :param dynamic_destination: The dynamic_destination of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._dynamic_destination = dynamic_destination

    @property
    def dynamic_format(self):
        """Gets the dynamic_format of this adupdateCreatives.  # noqa: E501

        Enum values- `UNSET`, `DYNAMIC_CREATIVE`(smart creative).  # noqa: E501

        :return: The dynamic_format of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_format

    @dynamic_format.setter
    def dynamic_format(self, dynamic_format):
        """Sets the dynamic_format of this adupdateCreatives.

        Enum values- `UNSET`, `DYNAMIC_CREATIVE`(smart creative).  # noqa: E501

        :param dynamic_format: The dynamic_format of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._dynamic_format = dynamic_format

    @property
    def fallback_type(self):
        """Gets the fallback_type of this adupdateCreatives.  # noqa: E501

        Fallback Type. If the audience do not have the app installed, you can have them fall back to install the app, or to view a specific web page. Allowed values- `APP_INSTALL`, `WEBSITE`, `UNSET`. If website is chosen, you need to specify the url via `landing_page_url` field.  # noqa: E501

        :return: The fallback_type of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._fallback_type

    @fallback_type.setter
    def fallback_type(self, fallback_type):
        """Sets the fallback_type of this adupdateCreatives.

        Fallback Type. If the audience do not have the app installed, you can have them fall back to install the app, or to view a specific web page. Allowed values- `APP_INSTALL`, `WEBSITE`, `UNSET`. If website is chosen, you need to specify the url via `landing_page_url` field.  # noqa: E501

        :param fallback_type: The fallback_type of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._fallback_type = fallback_type

    @property
    def identity_authorized_bc_id(self):
        """Gets the identity_authorized_bc_id of this adupdateCreatives.  # noqa: E501

        ID of the Business Center that a TikTok Account User in Business Center identity is associated with. Required when `identity_type` is `BC_AUTH_TT`.  # noqa: E501

        :return: The identity_authorized_bc_id of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._identity_authorized_bc_id

    @identity_authorized_bc_id.setter
    def identity_authorized_bc_id(self, identity_authorized_bc_id):
        """Sets the identity_authorized_bc_id of this adupdateCreatives.

        ID of the Business Center that a TikTok Account User in Business Center identity is associated with. Required when `identity_type` is `BC_AUTH_TT`.  # noqa: E501

        :param identity_authorized_bc_id: The identity_authorized_bc_id of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._identity_authorized_bc_id = identity_authorized_bc_id

    @property
    def identity_id(self):
        """Gets the identity_id of this adupdateCreatives.  # noqa: E501

        Identity ID, required when you use Spark Ads (`tiktok_item_id`). If you are not using Spark Ads, we still highly recommend you to pass in `ideneity_id` and `identity_type` (`CUSTOMIZED_USER`) for better management of ads information.  # noqa: E501

        :return: The identity_id of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._identity_id

    @identity_id.setter
    def identity_id(self, identity_id):
        """Sets the identity_id of this adupdateCreatives.

        Identity ID, required when you use Spark Ads (`tiktok_item_id`). If you are not using Spark Ads, we still highly recommend you to pass in `ideneity_id` and `identity_type` (`CUSTOMIZED_USER`) for better management of ads information.  # noqa: E501

        :param identity_id: The identity_id of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._identity_id = identity_id

    @property
    def identity_type(self):
        """Gets the identity_type of this adupdateCreatives.  # noqa: E501

        Identity type. Enum- `CUSTOMIZED_USER`, `AUTH_CODE`, `TT_USER`, `BC_AUTH_TT`.  For details about identities, see [Identities](https://ads.tiktok.com/marketing_api/docs?id=1738958351620097).  # noqa: E501

        :return: The identity_type of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._identity_type

    @identity_type.setter
    def identity_type(self, identity_type):
        """Sets the identity_type of this adupdateCreatives.

        Identity type. Enum- `CUSTOMIZED_USER`, `AUTH_CODE`, `TT_USER`, `BC_AUTH_TT`.  For details about identities, see [Identities](https://ads.tiktok.com/marketing_api/docs?id=1738958351620097).  # noqa: E501

        :param identity_type: The identity_type of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._identity_type = identity_type

    @property
    def image_ids(self):
        """Gets the image_ids of this adupdateCreatives.  # noqa: E501

        A list of image IDs (image used in an ad or as a video cover). You can get the image ID when you upload an image using the [/file/image/ad/upload/](https://ads.tiktok.com/marketing_api/docs?id=1739067433456642) endpoint. When the ad_format is `SINGLE_VIDEO`, the value of this field will be used as the video cover (thumbnail) (only one value is allowed), and the aspect ratio of the image should be the same as the video.  # noqa: E501

        :return: The image_ids of this adupdateCreatives.  # noqa: E501
        :rtype: list[str]
        """
        return self._image_ids

    @image_ids.setter
    def image_ids(self, image_ids):
        """Sets the image_ids of this adupdateCreatives.

        A list of image IDs (image used in an ad or as a video cover). You can get the image ID when you upload an image using the [/file/image/ad/upload/](https://ads.tiktok.com/marketing_api/docs?id=1739067433456642) endpoint. When the ad_format is `SINGLE_VIDEO`, the value of this field will be used as the video cover (thumbnail) (only one value is allowed), and the aspect ratio of the image should be the same as the video.  # noqa: E501

        :param image_ids: The image_ids of this adupdateCreatives.  # noqa: E501
        :type: list[str]
        """

        self._image_ids = image_ids

    @property
    def impression_tracking_url(self):
        """Gets the impression_tracking_url of this adupdateCreatives.  # noqa: E501

        Display monitoring URL  # noqa: E501

        :return: The impression_tracking_url of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._impression_tracking_url

    @impression_tracking_url.setter
    def impression_tracking_url(self, impression_tracking_url):
        """Sets the impression_tracking_url of this adupdateCreatives.

        Display monitoring URL  # noqa: E501

        :param impression_tracking_url: The impression_tracking_url of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._impression_tracking_url = impression_tracking_url

    @property
    def instant_product_page_used(self):
        """Gets the instant_product_page_used of this adupdateCreatives.  # noqa: E501

        Using TikTok instant page or not. When dynamic_destination = DLP, you don't need this parameter.When dynamic_destination = UNSET, you need to turn on this parameter to use instant page and pass page id.  # noqa: E501

        :return: The instant_product_page_used of this adupdateCreatives.  # noqa: E501
        :rtype: bool
        """
        return self._instant_product_page_used

    @instant_product_page_used.setter
    def instant_product_page_used(self, instant_product_page_used):
        """Sets the instant_product_page_used of this adupdateCreatives.

        Using TikTok instant page or not. When dynamic_destination = DLP, you don't need this parameter.When dynamic_destination = UNSET, you need to turn on this parameter to use instant page and pass page id.  # noqa: E501

        :param instant_product_page_used: The instant_product_page_used of this adupdateCreatives.  # noqa: E501
        :type: bool
        """

        self._instant_product_page_used = instant_product_page_used

    @property
    def interactive_motion_id(self):
        """Gets the interactive_motion_id of this adupdateCreatives.  # noqa: E501

        Interactive motion id.  # noqa: E501

        :return: The interactive_motion_id of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._interactive_motion_id

    @interactive_motion_id.setter
    def interactive_motion_id(self, interactive_motion_id):
        """Sets the interactive_motion_id of this adupdateCreatives.

        Interactive motion id.  # noqa: E501

        :param interactive_motion_id: The interactive_motion_id of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._interactive_motion_id = interactive_motion_id

    @property
    def item_duet_status(self):
        """Gets the item_duet_status of this adupdateCreatives.  # noqa: E501

        Whether to enable dueting for the Spark Ad. This field is valid only when `promotional_music_disabled` is set to `false`. Enum values- `ENABLE`, `DISABLE`. This field is only valid for Spark Ad posts.  # noqa: E501

        :return: The item_duet_status of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._item_duet_status

    @item_duet_status.setter
    def item_duet_status(self, item_duet_status):
        """Sets the item_duet_status of this adupdateCreatives.

        Whether to enable dueting for the Spark Ad. This field is valid only when `promotional_music_disabled` is set to `false`. Enum values- `ENABLE`, `DISABLE`. This field is only valid for Spark Ad posts.  # noqa: E501

        :param item_duet_status: The item_duet_status of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._item_duet_status = item_duet_status

    @property
    def item_group_ids(self):
        """Gets the item_group_ids of this adupdateCreatives.  # noqa: E501

        Product SPU ID  # noqa: E501

        :return: The item_group_ids of this adupdateCreatives.  # noqa: E501
        :rtype: list[str]
        """
        return self._item_group_ids

    @item_group_ids.setter
    def item_group_ids(self, item_group_ids):
        """Sets the item_group_ids of this adupdateCreatives.

        Product SPU ID  # noqa: E501

        :param item_group_ids: The item_group_ids of this adupdateCreatives.  # noqa: E501
        :type: list[str]
        """

        self._item_group_ids = item_group_ids

    @property
    def item_stitch_status(self):
        """Gets the item_stitch_status of this adupdateCreatives.  # noqa: E501

        Whether to enable stitching for the Spark Ad. This field is valid only when `promotional_music_disabled` is set to `false`. Enum values- `ENABLE`, `DISABLE`. This field is only valid for Spark Ad posts.  # noqa: E501

        :return: The item_stitch_status of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._item_stitch_status

    @item_stitch_status.setter
    def item_stitch_status(self, item_stitch_status):
        """Sets the item_stitch_status of this adupdateCreatives.

        Whether to enable stitching for the Spark Ad. This field is valid only when `promotional_music_disabled` is set to `false`. Enum values- `ENABLE`, `DISABLE`. This field is only valid for Spark Ad posts.  # noqa: E501

        :param item_stitch_status: The item_stitch_status of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._item_stitch_status = item_stitch_status

    @property
    def landing_page_url(self):
        """Gets the landing_page_url of this adupdateCreatives.  # noqa: E501

        Landing page URL.  # noqa: E501

        :return: The landing_page_url of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._landing_page_url

    @landing_page_url.setter
    def landing_page_url(self, landing_page_url):
        """Sets the landing_page_url of this adupdateCreatives.

        Landing page URL.  # noqa: E501

        :param landing_page_url: The landing_page_url of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._landing_page_url = landing_page_url

    @property
    def operation_status(self):
        """Gets the operation_status of this adupdateCreatives.  # noqa: E501

        The status of the ad when created. Enum values- `ENABLE` - The ad is enabled when created. `DISABLE` - The ad is disabled when created. Default value- `ENABLE`. If you want to update the status of the ad after creation, use the [/ad/status/update/](https://ads.tiktok.com/marketing_api/docs?id=1739953422970882) endpoint.  # noqa: E501

        :return: The operation_status of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._operation_status

    @operation_status.setter
    def operation_status(self, operation_status):
        """Sets the operation_status of this adupdateCreatives.

        The status of the ad when created. Enum values- `ENABLE` - The ad is enabled when created. `DISABLE` - The ad is disabled when created. Default value- `ENABLE`. If you want to update the status of the ad after creation, use the [/ad/status/update/](https://ads.tiktok.com/marketing_api/docs?id=1739953422970882) endpoint.  # noqa: E501

        :param operation_status: The operation_status of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._operation_status = operation_status

    @property
    def page_id(self):
        """Gets the page_id of this adupdateCreatives.  # noqa: E501

        Page (Instant form, Custom TikTok Instant Page or App Profile Page) ID, which can be created by [Instant Page Editor SDK](https://ads.tiktok.com/marketing_api/docs?id=1740307202170881). Instant Forms are for `LEAD_GENERATION` campaign objective. Only applicable for TikTok placement. Before creating for the first time, you need to sign the `LeadAds` agreement through the [/term/confirm/](https://ads.tiktok.com/marketing_api/docs?id=1737192284435457) endpoint. This field is ignored for `SHOP_PURCHASES` objective. Note- We will sunset the Collection Ads on Feb.16,2023. To ensure a seamless experience, please don't set a storefront page as your instant page.  # noqa: E501

        :return: The page_id of this adupdateCreatives.  # noqa: E501
        :rtype: int
        """
        return self._page_id

    @page_id.setter
    def page_id(self, page_id):
        """Sets the page_id of this adupdateCreatives.

        Page (Instant form, Custom TikTok Instant Page or App Profile Page) ID, which can be created by [Instant Page Editor SDK](https://ads.tiktok.com/marketing_api/docs?id=1740307202170881). Instant Forms are for `LEAD_GENERATION` campaign objective. Only applicable for TikTok placement. Before creating for the first time, you need to sign the `LeadAds` agreement through the [/term/confirm/](https://ads.tiktok.com/marketing_api/docs?id=1737192284435457) endpoint. This field is ignored for `SHOP_PURCHASES` objective. Note- We will sunset the Collection Ads on Feb.16,2023. To ensure a seamless experience, please don't set a storefront page as your instant page.  # noqa: E501

        :param page_id: The page_id of this adupdateCreatives.  # noqa: E501
        :type: int
        """

        self._page_id = page_id

    @property
    def page_image_index(self):
        """Gets the page_image_index of this adupdateCreatives.  # noqa: E501

        The index of page.  # noqa: E501

        :return: The page_image_index of this adupdateCreatives.  # noqa: E501
        :rtype: int
        """
        return self._page_image_index

    @page_image_index.setter
    def page_image_index(self, page_image_index):
        """Sets the page_image_index of this adupdateCreatives.

        The index of page.  # noqa: E501

        :param page_image_index: The page_image_index of this adupdateCreatives.  # noqa: E501
        :type: int
        """

        self._page_image_index = page_image_index

    @property
    def playable_url(self):
        """Gets the playable_url of this adupdateCreatives.  # noqa: E501

        Playable material url, valid in Pangle and TikTok placement. You can get the url via the [/playable/get/](https://ads.tiktok.com/marketing_api/docs?id=1737732758495234) endpoint. Note that all ads in the same ad group share the same playble material.  # noqa: E501

        :return: The playable_url of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._playable_url

    @playable_url.setter
    def playable_url(self, playable_url):
        """Sets the playable_url of this adupdateCreatives.

        Playable material url, valid in Pangle and TikTok placement. You can get the url via the [/playable/get/](https://ads.tiktok.com/marketing_api/docs?id=1737732758495234) endpoint. Note that all ads in the same ad group share the same playble material.  # noqa: E501

        :param playable_url: The playable_url of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._playable_url = playable_url

    @property
    def product_set_id(self):
        """Gets the product_set_id of this adupdateCreatives.  # noqa: E501

        The ID of the product set.  # noqa: E501

        :return: The product_set_id of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._product_set_id

    @product_set_id.setter
    def product_set_id(self, product_set_id):
        """Sets the product_set_id of this adupdateCreatives.

        The ID of the product set.  # noqa: E501

        :param product_set_id: The product_set_id of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._product_set_id = product_set_id

    @property
    def product_specific_type(self):
        """Gets the product_specific_type of this adupdateCreatives.  # noqa: E501

        Different dimensions to choose products. Enum values- `ALL`,` PRODUCT_SET`, `CUSTOMIZED_PRODUCTS`. If you choose `ALL`, you don't need to input `sku_ids` or  `item_group_ids`  or `product_set_id`.  `item_group_ids`  or `product_set_id` are required if `product_specific_type`=`PRODUCT_SET`. `sku_ids` are required if `product_specific_type`=`CUSTOMIZED_PRODUCTS`  # noqa: E501

        :return: The product_specific_type of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._product_specific_type

    @product_specific_type.setter
    def product_specific_type(self, product_specific_type):
        """Sets the product_specific_type of this adupdateCreatives.

        Different dimensions to choose products. Enum values- `ALL`,` PRODUCT_SET`, `CUSTOMIZED_PRODUCTS`. If you choose `ALL`, you don't need to input `sku_ids` or  `item_group_ids`  or `product_set_id`.  `item_group_ids`  or `product_set_id` are required if `product_specific_type`=`PRODUCT_SET`. `sku_ids` are required if `product_specific_type`=`CUSTOMIZED_PRODUCTS`  # noqa: E501

        :param product_specific_type: The product_specific_type of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._product_specific_type = product_specific_type

    @property
    def promotional_music_disabled(self):
        """Gets the promotional_music_disabled of this adupdateCreatives.  # noqa: E501

        Whether to disable the promotional use of the music in the Spark Ad. The default value is `true`. If you want to allow dueting and stitching for the TikTok video, you need to set this field to `false`. This field is only valid for Spark Ad posts.  # noqa: E501

        :return: The promotional_music_disabled of this adupdateCreatives.  # noqa: E501
        :rtype: bool
        """
        return self._promotional_music_disabled

    @promotional_music_disabled.setter
    def promotional_music_disabled(self, promotional_music_disabled):
        """Sets the promotional_music_disabled of this adupdateCreatives.

        Whether to disable the promotional use of the music in the Spark Ad. The default value is `true`. If you want to allow dueting and stitching for the TikTok video, you need to set this field to `false`. This field is only valid for Spark Ad posts.  # noqa: E501

        :param promotional_music_disabled: The promotional_music_disabled of this adupdateCreatives.  # noqa: E501
        :type: bool
        """

        self._promotional_music_disabled = promotional_music_disabled

    @property
    def shopping_ads_deeplink_type(self):
        """Gets the shopping_ads_deeplink_type of this adupdateCreatives.  # noqa: E501

        Indicates the source of the direct link used in the Shopping Ad. When specified as `CUSTOM`, the direct link is written in the deeplink field. <br data-tomark-pass>  Optional values- `NONE`(not enabled),`CUSTOM`(custom direct link),`SHOPPING_ADS`(commodity direct link). The default value is `NONE`.  # noqa: E501

        :return: The shopping_ads_deeplink_type of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._shopping_ads_deeplink_type

    @shopping_ads_deeplink_type.setter
    def shopping_ads_deeplink_type(self, shopping_ads_deeplink_type):
        """Sets the shopping_ads_deeplink_type of this adupdateCreatives.

        Indicates the source of the direct link used in the Shopping Ad. When specified as `CUSTOM`, the direct link is written in the deeplink field. <br data-tomark-pass>  Optional values- `NONE`(not enabled),`CUSTOM`(custom direct link),`SHOPPING_ADS`(commodity direct link). The default value is `NONE`.  # noqa: E501

        :param shopping_ads_deeplink_type: The shopping_ads_deeplink_type of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._shopping_ads_deeplink_type = shopping_ads_deeplink_type

    @property
    def shopping_ads_fallback_type(self):
        """Gets the shopping_ads_fallback_type of this adupdateCreatives.  # noqa: E501

        Indicates the source of the direct link used in the Shopping Ad. When specified as `CUSTOM`, the direct link is written in the deeplink field. <br data-tomark-pass>  Optional values- `NONE`(not enabled),`CUSTOM`(custom direct link),`SHOPPING_ADS`(commodity direct link). The default value is `NONE`.  # noqa: E501

        :return: The shopping_ads_fallback_type of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._shopping_ads_fallback_type

    @shopping_ads_fallback_type.setter
    def shopping_ads_fallback_type(self, shopping_ads_fallback_type):
        """Sets the shopping_ads_fallback_type of this adupdateCreatives.

        Indicates the source of the direct link used in the Shopping Ad. When specified as `CUSTOM`, the direct link is written in the deeplink field. <br data-tomark-pass>  Optional values- `NONE`(not enabled),`CUSTOM`(custom direct link),`SHOPPING_ADS`(commodity direct link). The default value is `NONE`.  # noqa: E501

        :param shopping_ads_fallback_type: The shopping_ads_fallback_type of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._shopping_ads_fallback_type = shopping_ads_fallback_type

    @property
    def shopping_ads_video_package_id(self):
        """Gets the shopping_ads_video_package_id of this adupdateCreatives.  # noqa: E501

        Product video package ID. Use the [/catalog/video/get/](https://ads.tiktok.com/marketing_api/docs?id=1740574099715073) endpoint to get video package IDs.|  # noqa: E501

        :return: The shopping_ads_video_package_id of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._shopping_ads_video_package_id

    @shopping_ads_video_package_id.setter
    def shopping_ads_video_package_id(self, shopping_ads_video_package_id):
        """Sets the shopping_ads_video_package_id of this adupdateCreatives.

        Product video package ID. Use the [/catalog/video/get/](https://ads.tiktok.com/marketing_api/docs?id=1740574099715073) endpoint to get video package IDs.|  # noqa: E501

        :param shopping_ads_video_package_id: The shopping_ads_video_package_id of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._shopping_ads_video_package_id = shopping_ads_video_package_id

    @property
    def sku_ids(self):
        """Gets the sku_ids of this adupdateCreatives.  # noqa: E501

        IDs of the SKUs  # noqa: E501

        :return: The sku_ids of this adupdateCreatives.  # noqa: E501
        :rtype: list[str]
        """
        return self._sku_ids

    @sku_ids.setter
    def sku_ids(self, sku_ids):
        """Sets the sku_ids of this adupdateCreatives.

        IDs of the SKUs  # noqa: E501

        :param sku_ids: The sku_ids of this adupdateCreatives.  # noqa: E501
        :type: list[str]
        """

        self._sku_ids = sku_ids

    @property
    def tiktok_item_id(self):
        """Gets the tiktok_item_id of this adupdateCreatives.  # noqa: E501

        The ID of the TikTok post to be used as an ad (Spark Ad). Pass in the `item_id` you get from the response of the [/tt_video/info/](https://ads.tiktok.com/marketing_api/docs?id=1738376324021250) or [/identity/video/get/](https://ads.tiktok.com/marketing_api/docs?id=1740218475032577) endpoint. This field is required for Spark Ads.  Note- By using Spark Ads, you confirm that you have the rights to use the music in the videos for commercial purposes  # noqa: E501

        :return: The tiktok_item_id of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._tiktok_item_id

    @tiktok_item_id.setter
    def tiktok_item_id(self, tiktok_item_id):
        """Sets the tiktok_item_id of this adupdateCreatives.

        The ID of the TikTok post to be used as an ad (Spark Ad). Pass in the `item_id` you get from the response of the [/tt_video/info/](https://ads.tiktok.com/marketing_api/docs?id=1738376324021250) or [/identity/video/get/](https://ads.tiktok.com/marketing_api/docs?id=1740218475032577) endpoint. This field is required for Spark Ads.  Note- By using Spark Ads, you confirm that you have the rights to use the music in the videos for commercial purposes  # noqa: E501

        :param tiktok_item_id: The tiktok_item_id of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._tiktok_item_id = tiktok_item_id

    @property
    def tracking_pixel_id(self):
        """Gets the tracking_pixel_id of this adupdateCreatives.  # noqa: E501

        The pixel ID that you'd like to track. You can use this field to track offsite events. It supports the campaign objectives for both Auction ads (`REACH`, `VIDEO_VIEWS`, `TRAFFIC`, `CONVERSIONS`, `WEB_CONVERSIONS`, `LEAD_GENERATION`, `APP_PROMOTION`, `PRODUCT_SALES`, `ENGAGEMENT`) and Reach & Frequency ads (`RF_REACH`, `RF_TRAFFIC`, `RF_VIDEO_VIEW`).For Auction objectives. If `pixel_id`!=0 at the ad group level  and  you want to use pixel to track offsite events, then the pixel ID you pass in the `tracking_pixel_id` field must be the same ID that you specified in the `pixel_id` field for the ad group. Otherwise, you can pass in any pixel ID that you'd like to track in the `tracking_pixel_id` field. This field is an allowlist feature if your campaign objective is `ENGAGEMENT`/ `PRODUCT_SALES` (when `product_source` = `CATALOG` / `STORE` and `shopping_ads_type` = `VIDEO`) /`APP_PROMOTION`(when `app_promotion_type` = `APP_RETARGETING` ). If you want to use the field, please reach out to your TikTok representative.For Reach & Frequency objectives You can pass in any pixel ID that you'd like to track in the `tracking_pixel_id` field.  # noqa: E501

        :return: The tracking_pixel_id of this adupdateCreatives.  # noqa: E501
        :rtype: int
        """
        return self._tracking_pixel_id

    @tracking_pixel_id.setter
    def tracking_pixel_id(self, tracking_pixel_id):
        """Sets the tracking_pixel_id of this adupdateCreatives.

        The pixel ID that you'd like to track. You can use this field to track offsite events. It supports the campaign objectives for both Auction ads (`REACH`, `VIDEO_VIEWS`, `TRAFFIC`, `CONVERSIONS`, `WEB_CONVERSIONS`, `LEAD_GENERATION`, `APP_PROMOTION`, `PRODUCT_SALES`, `ENGAGEMENT`) and Reach & Frequency ads (`RF_REACH`, `RF_TRAFFIC`, `RF_VIDEO_VIEW`).For Auction objectives. If `pixel_id`!=0 at the ad group level  and  you want to use pixel to track offsite events, then the pixel ID you pass in the `tracking_pixel_id` field must be the same ID that you specified in the `pixel_id` field for the ad group. Otherwise, you can pass in any pixel ID that you'd like to track in the `tracking_pixel_id` field. This field is an allowlist feature if your campaign objective is `ENGAGEMENT`/ `PRODUCT_SALES` (when `product_source` = `CATALOG` / `STORE` and `shopping_ads_type` = `VIDEO`) /`APP_PROMOTION`(when `app_promotion_type` = `APP_RETARGETING` ). If you want to use the field, please reach out to your TikTok representative.For Reach & Frequency objectives You can pass in any pixel ID that you'd like to track in the `tracking_pixel_id` field.  # noqa: E501

        :param tracking_pixel_id: The tracking_pixel_id of this adupdateCreatives.  # noqa: E501
        :type: int
        """

        self._tracking_pixel_id = tracking_pixel_id

    @property
    def vast_moat_enabled(self):
        """Gets the vast_moat_enabled of this adupdateCreatives.  # noqa: E501

        Whether Moat Viewability Verification is enabled for the ad. TikTok has partnered with Moat to launch viewability measurement for Brand Auction and Reach & Frequency In-feed ads purchased on TikTok for Business. Default value- `false`.  # noqa: E501

        :return: The vast_moat_enabled of this adupdateCreatives.  # noqa: E501
        :rtype: bool
        """
        return self._vast_moat_enabled

    @vast_moat_enabled.setter
    def vast_moat_enabled(self, vast_moat_enabled):
        """Sets the vast_moat_enabled of this adupdateCreatives.

        Whether Moat Viewability Verification is enabled for the ad. TikTok has partnered with Moat to launch viewability measurement for Brand Auction and Reach & Frequency In-feed ads purchased on TikTok for Business. Default value- `false`.  # noqa: E501

        :param vast_moat_enabled: The vast_moat_enabled of this adupdateCreatives.  # noqa: E501
        :type: bool
        """

        self._vast_moat_enabled = vast_moat_enabled

    @property
    def vertical_video_strategy(self):
        """Gets the vertical_video_strategy of this adupdateCreatives.  # noqa: E501

        The video type that you use for Product Sales scenarios. Enum values- `UNSET` (unset), `SINGLE_VIDEO` (single video), `CATALOG_VIDEOS` (catalog video), `LIVE_STREAM` (livestream video). It must be `UNSET` if `dynamic_format` = `DYNAMIC_CREATIVE`.  # noqa: E501

        :return: The vertical_video_strategy of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._vertical_video_strategy

    @vertical_video_strategy.setter
    def vertical_video_strategy(self, vertical_video_strategy):
        """Sets the vertical_video_strategy of this adupdateCreatives.

        The video type that you use for Product Sales scenarios. Enum values- `UNSET` (unset), `SINGLE_VIDEO` (single video), `CATALOG_VIDEOS` (catalog video), `LIVE_STREAM` (livestream video). It must be `UNSET` if `dynamic_format` = `DYNAMIC_CREATIVE`.  # noqa: E501

        :param vertical_video_strategy: The vertical_video_strategy of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._vertical_video_strategy = vertical_video_strategy

    @property
    def video_id(self):
        """Gets the video_id of this adupdateCreatives.  # noqa: E501

        Video ID. Required when the creative type is standard videos. For Spark Ads, use `tiktok_item_id` to specify the TikTok post ID. You can find out video IDs by using the [/file/video/ad/search/](https://ads.tiktok.com/marketing_api/docs?id=1740050472224769) endpoint. Note- To ensure a smooth integration journey, we recommned that you use [/file/video/ad/upload/](https://ads.tiktok.com/marketing_api/docs?id=1737587322856449)(`upload_type` = `UPLOAD_BY_VIDEO_ID`)to bind video ID with your advertiser ID.  # noqa: E501

        :return: The video_id of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """Sets the video_id of this adupdateCreatives.

        Video ID. Required when the creative type is standard videos. For Spark Ads, use `tiktok_item_id` to specify the TikTok post ID. You can find out video IDs by using the [/file/video/ad/search/](https://ads.tiktok.com/marketing_api/docs?id=1740050472224769) endpoint. Note- To ensure a smooth integration journey, we recommned that you use [/file/video/ad/upload/](https://ads.tiktok.com/marketing_api/docs?id=1737587322856449)(`upload_type` = `UPLOAD_BY_VIDEO_ID`)to bind video ID with your advertiser ID.  # noqa: E501

        :param video_id: The video_id of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._video_id = video_id

    @property
    def video_view_tracking_url(self):
        """Gets the video_view_tracking_url of this adupdateCreatives.  # noqa: E501

        The monitoring URL for video view.  # noqa: E501

        :return: The video_view_tracking_url of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._video_view_tracking_url

    @video_view_tracking_url.setter
    def video_view_tracking_url(self, video_view_tracking_url):
        """Sets the video_view_tracking_url of this adupdateCreatives.

        The monitoring URL for video view.  # noqa: E501

        :param video_view_tracking_url: The video_view_tracking_url of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._video_view_tracking_url = video_view_tracking_url

    @property
    def viewability_postbid_partner(self):
        """Gets the viewability_postbid_partner of this adupdateCreatives.  # noqa: E501

        Post-bid third-party viewability measurement partner. Enum values- `MOAT`, `DOUBLE_VERIFY`, `IAS`. You can use [/tool/vast_option/](https://ads.tiktok.com/marketing_api/docs?id=1755436556897281) to get available post-bid third-party measurement partners. Note - ost-bid third-party viewability measurement is currently an allowlist-only feature. If you would like to access it, please contact your TikTok representative.  See [Brand safety](https://ads.tiktok.com/marketing_api/docs?id=1739381752981505) to learn about the supported advertising objectives, supported markets, and the general introduction of post-bid measurement.  # noqa: E501

        :return: The viewability_postbid_partner of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._viewability_postbid_partner

    @viewability_postbid_partner.setter
    def viewability_postbid_partner(self, viewability_postbid_partner):
        """Sets the viewability_postbid_partner of this adupdateCreatives.

        Post-bid third-party viewability measurement partner. Enum values- `MOAT`, `DOUBLE_VERIFY`, `IAS`. You can use [/tool/vast_option/](https://ads.tiktok.com/marketing_api/docs?id=1755436556897281) to get available post-bid third-party measurement partners. Note - ost-bid third-party viewability measurement is currently an allowlist-only feature. If you would like to access it, please contact your TikTok representative.  See [Brand safety](https://ads.tiktok.com/marketing_api/docs?id=1739381752981505) to learn about the supported advertising objectives, supported markets, and the general introduction of post-bid measurement.  # noqa: E501

        :param viewability_postbid_partner: The viewability_postbid_partner of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._viewability_postbid_partner = viewability_postbid_partner

    @property
    def viewability_vast_url(self):
        """Gets the viewability_vast_url of this adupdateCreatives.  # noqa: E501

        The wrapped VAST URL used by the post-bid third-party partner to measure viewability. Required when `viewability_postbid_partner` = `IAS`. You need to get the URL from the measurement partner IAS. Post-bid third-party viewability measurement is currently an allowlist-only feature. If you would like to access it, please contact your TikTok representative. Post-bid third-party measurement is not supported for ACO ads. Post-bid third-party measurement is not supported for ad groups where `promotion_type` is set as `LIVE_SHOPPING`.  # noqa: E501

        :return: The viewability_vast_url of this adupdateCreatives.  # noqa: E501
        :rtype: str
        """
        return self._viewability_vast_url

    @viewability_vast_url.setter
    def viewability_vast_url(self, viewability_vast_url):
        """Sets the viewability_vast_url of this adupdateCreatives.

        The wrapped VAST URL used by the post-bid third-party partner to measure viewability. Required when `viewability_postbid_partner` = `IAS`. You need to get the URL from the measurement partner IAS. Post-bid third-party viewability measurement is currently an allowlist-only feature. If you would like to access it, please contact your TikTok representative. Post-bid third-party measurement is not supported for ACO ads. Post-bid third-party measurement is not supported for ad groups where `promotion_type` is set as `LIVE_SHOPPING`.  # noqa: E501

        :param viewability_vast_url: The viewability_vast_url of this adupdateCreatives.  # noqa: E501
        :type: str
        """

        self._viewability_vast_url = viewability_vast_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(adupdateCreatives, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, adupdateCreatives):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
