# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class OptimizerRuleCreateBodyActions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_type': 'str',
        'frequency_info': 'OptimizerRuleCreateBodyFrequencyInfo',
        'subject_type': 'str',
        'value': 'OptimizerRuleCreateBodyValue',
        'value_type': 'str'
    }

    attribute_map = {
        'action_type': 'action_type',
        'frequency_info': 'frequency_info',
        'subject_type': 'subject_type',
        'value': 'value',
        'value_type': 'value_type'
    }

    def __init__(self, action_type=None, frequency_info=None, subject_type=None, value=None, value_type=None):  # noqa: E501
        """OptimizerRuleCreateBodyActions - a model defined in Swagger"""  # noqa: E501
        self._action_type = None
        self._frequency_info = None
        self._subject_type = None
        self._value = None
        self._value_type = None
        self.discriminator = None
        if action_type is not None:
            self.action_type = action_type
        if frequency_info is not None:
            self.frequency_info = frequency_info
        self.subject_type = subject_type
        if value is not None:
            self.value = value
        if value_type is not None:
            self.value_type = value_type

    @property
    def action_type(self):
        """Gets the action_type of this OptimizerRuleCreateBodyActions.  # noqa: E501


        :return: The action_type of this OptimizerRuleCreateBodyActions.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this OptimizerRuleCreateBodyActions.


        :param action_type: The action_type of this OptimizerRuleCreateBodyActions.  # noqa: E501
        :type: str
        """

        self._action_type = action_type

    @property
    def frequency_info(self):
        """Gets the frequency_info of this OptimizerRuleCreateBodyActions.  # noqa: E501


        :return: The frequency_info of this OptimizerRuleCreateBodyActions.  # noqa: E501
        :rtype: OptimizerRuleCreateBodyFrequencyInfo
        """
        return self._frequency_info

    @frequency_info.setter
    def frequency_info(self, frequency_info):
        """Sets the frequency_info of this OptimizerRuleCreateBodyActions.


        :param frequency_info: The frequency_info of this OptimizerRuleCreateBodyActions.  # noqa: E501
        :type: OptimizerRuleCreateBodyFrequencyInfo
        """

        self._frequency_info = frequency_info

    @property
    def subject_type(self):
        """Gets the subject_type of this OptimizerRuleCreateBodyActions.  # noqa: E501


        :return: The subject_type of this OptimizerRuleCreateBodyActions.  # noqa: E501
        :rtype: str
        """
        return self._subject_type

    @subject_type.setter
    def subject_type(self, subject_type):
        """Sets the subject_type of this OptimizerRuleCreateBodyActions.


        :param subject_type: The subject_type of this OptimizerRuleCreateBodyActions.  # noqa: E501
        :type: str
        """
        if subject_type is None:
            raise ValueError("Invalid value for `subject_type`, must not be `None`")  # noqa: E501

        self._subject_type = subject_type

    @property
    def value(self):
        """Gets the value of this OptimizerRuleCreateBodyActions.  # noqa: E501


        :return: The value of this OptimizerRuleCreateBodyActions.  # noqa: E501
        :rtype: OptimizerRuleCreateBodyValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this OptimizerRuleCreateBodyActions.


        :param value: The value of this OptimizerRuleCreateBodyActions.  # noqa: E501
        :type: OptimizerRuleCreateBodyValue
        """

        self._value = value

    @property
    def value_type(self):
        """Gets the value_type of this OptimizerRuleCreateBodyActions.  # noqa: E501


        :return: The value_type of this OptimizerRuleCreateBodyActions.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this OptimizerRuleCreateBodyActions.


        :param value_type: The value_type of this OptimizerRuleCreateBodyActions.  # noqa: E501
        :type: str
        """

        self._value_type = value_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptimizerRuleCreateBodyActions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizerRuleCreateBodyActions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
