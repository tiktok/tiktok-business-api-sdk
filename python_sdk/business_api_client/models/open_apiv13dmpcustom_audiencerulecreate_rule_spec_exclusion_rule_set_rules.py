# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetRules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_source_ids': 'list[str]',
        'filter_set': 'OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSet',
        'retention_days': 'int'
    }

    attribute_map = {
        'event_source_ids': 'event_source_ids',
        'filter_set': 'filter_set',
        'retention_days': 'retention_days'
    }

    def __init__(self, event_source_ids=None, filter_set=None, retention_days=None):  # noqa: E501
        """OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetRules - a model defined in Swagger"""  # noqa: E501
        self._event_source_ids = None
        self._filter_set = None
        self._retention_days = None
        self.discriminator = None
        if event_source_ids is not None:
            self.event_source_ids = event_source_ids
        if filter_set is not None:
            self.filter_set = filter_set
        self.retention_days = retention_days

    @property
    def event_source_ids(self):
        """Gets the event_source_ids of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetRules.  # noqa: E501

        List of event source IDs of the rule. For an Engagement Audience, use ad group IDs as event source IDs. If not specified, all available event source IDs will be used. For an Organic Engagement Audience, use TikTok post IDs as event source IDs. You can use /identity/video/get/ to get TikTok post IDs. The maximum allowed number of TikTok post IDs is 10. For a Live Engagement Audience, use live video ID as event source IDs. You can use /identity/live/get/ to get live video IDs. The maximum allowed number of live video IDs is 10. For an App Activity Audience, use App IDs as event source IDs. For a Website Traffic Audience, use pixel IDs as event source IDs. For a Lead Generation Audience, do not pass in this field. Otherwise, an error will occur. If not specified, all available event source IDs will be used. For a Business Account Audience, use core user IDs of the advertisers. You can use /user/info/ to get a core user ID. For a Shop Activity Audience, use TikTok Shop IDs as event source IDs. You can use /store/list/ to get TikTok Shop IDs. For an Offline Activity Audience, use Offline Event set IDs as event source IDs. You can use /offline/get/ to get Offline Event set IDs.  # noqa: E501

        :return: The event_source_ids of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetRules.  # noqa: E501
        :rtype: list[str]
        """
        return self._event_source_ids

    @event_source_ids.setter
    def event_source_ids(self, event_source_ids):
        """Sets the event_source_ids of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetRules.

        List of event source IDs of the rule. For an Engagement Audience, use ad group IDs as event source IDs. If not specified, all available event source IDs will be used. For an Organic Engagement Audience, use TikTok post IDs as event source IDs. You can use /identity/video/get/ to get TikTok post IDs. The maximum allowed number of TikTok post IDs is 10. For a Live Engagement Audience, use live video ID as event source IDs. You can use /identity/live/get/ to get live video IDs. The maximum allowed number of live video IDs is 10. For an App Activity Audience, use App IDs as event source IDs. For a Website Traffic Audience, use pixel IDs as event source IDs. For a Lead Generation Audience, do not pass in this field. Otherwise, an error will occur. If not specified, all available event source IDs will be used. For a Business Account Audience, use core user IDs of the advertisers. You can use /user/info/ to get a core user ID. For a Shop Activity Audience, use TikTok Shop IDs as event source IDs. You can use /store/list/ to get TikTok Shop IDs. For an Offline Activity Audience, use Offline Event set IDs as event source IDs. You can use /offline/get/ to get Offline Event set IDs.  # noqa: E501

        :param event_source_ids: The event_source_ids of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetRules.  # noqa: E501
        :type: list[str]
        """

        self._event_source_ids = event_source_ids

    @property
    def filter_set(self):
        """Gets the filter_set of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetRules.  # noqa: E501


        :return: The filter_set of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetRules.  # noqa: E501
        :rtype: OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSet
        """
        return self._filter_set

    @filter_set.setter
    def filter_set(self, filter_set):
        """Sets the filter_set of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetRules.


        :param filter_set: The filter_set of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetRules.  # noqa: E501
        :type: OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetFilterSet
        """

        self._filter_set = filter_set

    @property
    def retention_days(self):
        """Gets the retention_days of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetRules.  # noqa: E501

        Required when exclusion_rule_set is passed. Audience lookback window. For enum values, see Enumerations - Lookback window. Note: If audience_type = BUSINESS_ACCOUNT, and the value in the filters object is not BUSINESS ACCOUNT PROFILE FOLLOW, then retention_days must be 7, 14, or 30. If audience_type = ENGAGEMENT_LIVE_VIDEO or ENGAGEMENT_ORGANIC_VIDEO, then retention_days must be 7, 14, or 30. To avoid confusion between retention_days and retention_in_days, we'll rename retention_days in the next API version.  # noqa: E501

        :return: The retention_days of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetRules.  # noqa: E501
        :rtype: int
        """
        return self._retention_days

    @retention_days.setter
    def retention_days(self, retention_days):
        """Sets the retention_days of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetRules.

        Required when exclusion_rule_set is passed. Audience lookback window. For enum values, see Enumerations - Lookback window. Note: If audience_type = BUSINESS_ACCOUNT, and the value in the filters object is not BUSINESS ACCOUNT PROFILE FOLLOW, then retention_days must be 7, 14, or 30. If audience_type = ENGAGEMENT_LIVE_VIDEO or ENGAGEMENT_ORGANIC_VIDEO, then retention_days must be 7, 14, or 30. To avoid confusion between retention_days and retention_in_days, we'll rename retention_days in the next API version.  # noqa: E501

        :param retention_days: The retention_days of this OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetRules.  # noqa: E501
        :type: int
        """
        if retention_days is None:
            raise ValueError("Invalid value for `retention_days`, must not be `None`")  # noqa: E501

        self._retention_days = retention_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetRules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenApiv13dmpcustomAudiencerulecreateRuleSpecExclusionRuleSetRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
