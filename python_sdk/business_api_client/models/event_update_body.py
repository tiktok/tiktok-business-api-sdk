# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class EventUpdateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'currency': 'str',
        'currency_value': 'str',
        'event_id': 'str',
        'event_name': 'str'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'currency': 'currency',
        'currency_value': 'currency_value',
        'event_id': 'event_id',
        'event_name': 'event_name'
    }

    def __init__(self, advertiser_id=None, currency=None, currency_value=None, event_id=None, event_name=None):  # noqa: E501
        """EventUpdateBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._currency = None
        self._currency_value = None
        self._event_id = None
        self._event_name = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        if currency is not None:
            self.currency = currency
        if currency_value is not None:
            self.currency_value = currency_value
        self.event_id = event_id
        if event_name is not None:
            self.event_name = event_name

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this EventUpdateBody.  # noqa: E501


        :return: The advertiser_id of this EventUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this EventUpdateBody.


        :param advertiser_id: The advertiser_id of this EventUpdateBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def currency(self):
        """Gets the currency of this EventUpdateBody.  # noqa: E501


        :return: The currency of this EventUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this EventUpdateBody.


        :param currency: The currency of this EventUpdateBody.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def currency_value(self):
        """Gets the currency_value of this EventUpdateBody.  # noqa: E501


        :return: The currency_value of this EventUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._currency_value

    @currency_value.setter
    def currency_value(self, currency_value):
        """Sets the currency_value of this EventUpdateBody.


        :param currency_value: The currency_value of this EventUpdateBody.  # noqa: E501
        :type: str
        """

        self._currency_value = currency_value

    @property
    def event_id(self):
        """Gets the event_id of this EventUpdateBody.  # noqa: E501


        :return: The event_id of this EventUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this EventUpdateBody.


        :param event_id: The event_id of this EventUpdateBody.  # noqa: E501
        :type: str
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")  # noqa: E501

        self._event_id = event_id

    @property
    def event_name(self):
        """Gets the event_name of this EventUpdateBody.  # noqa: E501


        :return: The event_name of this EventUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this EventUpdateBody.


        :param event_name: The event_name of this EventUpdateBody.  # noqa: E501
        :type: str
        """

        self._event_name = event_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventUpdateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventUpdateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
