# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class BillingGroupUpdateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_advertiser_ids': 'list[str]',
        'bc_id': 'str',
        'billing_group_id': 'str',
        'delete_advertiser_ids': 'list[str]',
        'is_primary': 'bool',
        'new_billing_group_emails': 'list[str]',
        'new_billing_group_name': 'str'
    }

    attribute_map = {
        'add_advertiser_ids': 'add_advertiser_ids',
        'bc_id': 'bc_id',
        'billing_group_id': 'billing_group_id',
        'delete_advertiser_ids': 'delete_advertiser_ids',
        'is_primary': 'is_primary',
        'new_billing_group_emails': 'new_billing_group_emails',
        'new_billing_group_name': 'new_billing_group_name'
    }

    def __init__(self, add_advertiser_ids=None, bc_id=None, billing_group_id=None, delete_advertiser_ids=None, is_primary=None, new_billing_group_emails=None, new_billing_group_name=None):  # noqa: E501
        """BillingGroupUpdateBody - a model defined in Swagger"""  # noqa: E501
        self._add_advertiser_ids = None
        self._bc_id = None
        self._billing_group_id = None
        self._delete_advertiser_ids = None
        self._is_primary = None
        self._new_billing_group_emails = None
        self._new_billing_group_name = None
        self.discriminator = None
        if add_advertiser_ids is not None:
            self.add_advertiser_ids = add_advertiser_ids
        self.bc_id = bc_id
        self.billing_group_id = billing_group_id
        if delete_advertiser_ids is not None:
            self.delete_advertiser_ids = delete_advertiser_ids
        if is_primary is not None:
            self.is_primary = is_primary
        if new_billing_group_emails is not None:
            self.new_billing_group_emails = new_billing_group_emails
        if new_billing_group_name is not None:
            self.new_billing_group_name = new_billing_group_name

    @property
    def add_advertiser_ids(self):
        """Gets the add_advertiser_ids of this BillingGroupUpdateBody.  # noqa: E501


        :return: The add_advertiser_ids of this BillingGroupUpdateBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_advertiser_ids

    @add_advertiser_ids.setter
    def add_advertiser_ids(self, add_advertiser_ids):
        """Sets the add_advertiser_ids of this BillingGroupUpdateBody.


        :param add_advertiser_ids: The add_advertiser_ids of this BillingGroupUpdateBody.  # noqa: E501
        :type: list[str]
        """

        self._add_advertiser_ids = add_advertiser_ids

    @property
    def bc_id(self):
        """Gets the bc_id of this BillingGroupUpdateBody.  # noqa: E501


        :return: The bc_id of this BillingGroupUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._bc_id

    @bc_id.setter
    def bc_id(self, bc_id):
        """Sets the bc_id of this BillingGroupUpdateBody.


        :param bc_id: The bc_id of this BillingGroupUpdateBody.  # noqa: E501
        :type: str
        """
        if bc_id is None:
            raise ValueError("Invalid value for `bc_id`, must not be `None`")  # noqa: E501

        self._bc_id = bc_id

    @property
    def billing_group_id(self):
        """Gets the billing_group_id of this BillingGroupUpdateBody.  # noqa: E501


        :return: The billing_group_id of this BillingGroupUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._billing_group_id

    @billing_group_id.setter
    def billing_group_id(self, billing_group_id):
        """Sets the billing_group_id of this BillingGroupUpdateBody.


        :param billing_group_id: The billing_group_id of this BillingGroupUpdateBody.  # noqa: E501
        :type: str
        """
        if billing_group_id is None:
            raise ValueError("Invalid value for `billing_group_id`, must not be `None`")  # noqa: E501

        self._billing_group_id = billing_group_id

    @property
    def delete_advertiser_ids(self):
        """Gets the delete_advertiser_ids of this BillingGroupUpdateBody.  # noqa: E501


        :return: The delete_advertiser_ids of this BillingGroupUpdateBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._delete_advertiser_ids

    @delete_advertiser_ids.setter
    def delete_advertiser_ids(self, delete_advertiser_ids):
        """Sets the delete_advertiser_ids of this BillingGroupUpdateBody.


        :param delete_advertiser_ids: The delete_advertiser_ids of this BillingGroupUpdateBody.  # noqa: E501
        :type: list[str]
        """

        self._delete_advertiser_ids = delete_advertiser_ids

    @property
    def is_primary(self):
        """Gets the is_primary of this BillingGroupUpdateBody.  # noqa: E501


        :return: The is_primary of this BillingGroupUpdateBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this BillingGroupUpdateBody.


        :param is_primary: The is_primary of this BillingGroupUpdateBody.  # noqa: E501
        :type: bool
        """

        self._is_primary = is_primary

    @property
    def new_billing_group_emails(self):
        """Gets the new_billing_group_emails of this BillingGroupUpdateBody.  # noqa: E501


        :return: The new_billing_group_emails of this BillingGroupUpdateBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._new_billing_group_emails

    @new_billing_group_emails.setter
    def new_billing_group_emails(self, new_billing_group_emails):
        """Sets the new_billing_group_emails of this BillingGroupUpdateBody.


        :param new_billing_group_emails: The new_billing_group_emails of this BillingGroupUpdateBody.  # noqa: E501
        :type: list[str]
        """

        self._new_billing_group_emails = new_billing_group_emails

    @property
    def new_billing_group_name(self):
        """Gets the new_billing_group_name of this BillingGroupUpdateBody.  # noqa: E501


        :return: The new_billing_group_name of this BillingGroupUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._new_billing_group_name

    @new_billing_group_name.setter
    def new_billing_group_name(self, new_billing_group_name):
        """Sets the new_billing_group_name of this BillingGroupUpdateBody.


        :param new_billing_group_name: The new_billing_group_name of this BillingGroupUpdateBody.  # noqa: E501
        :type: str
        """

        self._new_billing_group_name = new_billing_group_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillingGroupUpdateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingGroupUpdateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
