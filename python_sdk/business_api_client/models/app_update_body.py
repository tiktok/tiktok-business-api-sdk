# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class AppUpdateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'app_id': 'str',
        'download_url': 'str',
        'enable_retargeting': 'str',
        'partner': 'str',
        'platform': 'str',
        'tracking_url': 'AppupdateTrackingUrl'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'app_id': 'app_id',
        'download_url': 'download_url',
        'enable_retargeting': 'enable_retargeting',
        'partner': 'partner',
        'platform': 'platform',
        'tracking_url': 'tracking_url'
    }

    def __init__(self, advertiser_id=None, app_id=None, download_url=None, enable_retargeting='NON_RETARGETING', partner=None, platform=None, tracking_url=None):  # noqa: E501
        """AppUpdateBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._app_id = None
        self._download_url = None
        self._enable_retargeting = None
        self._partner = None
        self._platform = None
        self._tracking_url = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        self.app_id = app_id
        if download_url is not None:
            self.download_url = download_url
        if enable_retargeting is not None:
            self.enable_retargeting = enable_retargeting
        if partner is not None:
            self.partner = partner
        if platform is not None:
            self.platform = platform
        if tracking_url is not None:
            self.tracking_url = tracking_url

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this AppUpdateBody.  # noqa: E501


        :return: The advertiser_id of this AppUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this AppUpdateBody.


        :param advertiser_id: The advertiser_id of this AppUpdateBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def app_id(self):
        """Gets the app_id of this AppUpdateBody.  # noqa: E501


        :return: The app_id of this AppUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AppUpdateBody.


        :param app_id: The app_id of this AppUpdateBody.  # noqa: E501
        :type: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id

    @property
    def download_url(self):
        """Gets the download_url of this AppUpdateBody.  # noqa: E501


        :return: The download_url of this AppUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this AppUpdateBody.


        :param download_url: The download_url of this AppUpdateBody.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def enable_retargeting(self):
        """Gets the enable_retargeting of this AppUpdateBody.  # noqa: E501


        :return: The enable_retargeting of this AppUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._enable_retargeting

    @enable_retargeting.setter
    def enable_retargeting(self, enable_retargeting):
        """Sets the enable_retargeting of this AppUpdateBody.


        :param enable_retargeting: The enable_retargeting of this AppUpdateBody.  # noqa: E501
        :type: str
        """

        self._enable_retargeting = enable_retargeting

    @property
    def partner(self):
        """Gets the partner of this AppUpdateBody.  # noqa: E501


        :return: The partner of this AppUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this AppUpdateBody.


        :param partner: The partner of this AppUpdateBody.  # noqa: E501
        :type: str
        """

        self._partner = partner

    @property
    def platform(self):
        """Gets the platform of this AppUpdateBody.  # noqa: E501


        :return: The platform of this AppUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this AppUpdateBody.


        :param platform: The platform of this AppUpdateBody.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def tracking_url(self):
        """Gets the tracking_url of this AppUpdateBody.  # noqa: E501


        :return: The tracking_url of this AppUpdateBody.  # noqa: E501
        :rtype: AppupdateTrackingUrl
        """
        return self._tracking_url

    @tracking_url.setter
    def tracking_url(self, tracking_url):
        """Sets the tracking_url of this AppUpdateBody.


        :param tracking_url: The tracking_url of this AppUpdateBody.  # noqa: E501
        :type: AppupdateTrackingUrl
        """

        self._tracking_url = tracking_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppUpdateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppUpdateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
