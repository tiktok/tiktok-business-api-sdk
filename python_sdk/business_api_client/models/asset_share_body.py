# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class AssetShareBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'asset_type': 'str',
        'material_ids': 'list[str]',
        'shared_advertiser_ids': 'list[str]'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'asset_type': 'asset_type',
        'material_ids': 'material_ids',
        'shared_advertiser_ids': 'shared_advertiser_ids'
    }

    def __init__(self, advertiser_id=None, asset_type='VIDEO', material_ids=None, shared_advertiser_ids=None):  # noqa: E501
        """AssetShareBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._asset_type = None
        self._material_ids = None
        self._shared_advertiser_ids = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        if asset_type is not None:
            self.asset_type = asset_type
        self.material_ids = material_ids
        self.shared_advertiser_ids = shared_advertiser_ids

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this AssetShareBody.  # noqa: E501


        :return: The advertiser_id of this AssetShareBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this AssetShareBody.


        :param advertiser_id: The advertiser_id of this AssetShareBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def asset_type(self):
        """Gets the asset_type of this AssetShareBody.  # noqa: E501


        :return: The asset_type of this AssetShareBody.  # noqa: E501
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this AssetShareBody.


        :param asset_type: The asset_type of this AssetShareBody.  # noqa: E501
        :type: str
        """

        self._asset_type = asset_type

    @property
    def material_ids(self):
        """Gets the material_ids of this AssetShareBody.  # noqa: E501


        :return: The material_ids of this AssetShareBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._material_ids

    @material_ids.setter
    def material_ids(self, material_ids):
        """Sets the material_ids of this AssetShareBody.


        :param material_ids: The material_ids of this AssetShareBody.  # noqa: E501
        :type: list[str]
        """
        if material_ids is None:
            raise ValueError("Invalid value for `material_ids`, must not be `None`")  # noqa: E501

        self._material_ids = material_ids

    @property
    def shared_advertiser_ids(self):
        """Gets the shared_advertiser_ids of this AssetShareBody.  # noqa: E501


        :return: The shared_advertiser_ids of this AssetShareBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._shared_advertiser_ids

    @shared_advertiser_ids.setter
    def shared_advertiser_ids(self, shared_advertiser_ids):
        """Sets the shared_advertiser_ids of this AssetShareBody.


        :param shared_advertiser_ids: The shared_advertiser_ids of this AssetShareBody.  # noqa: E501
        :type: list[str]
        """
        if shared_advertiser_ids is None:
            raise ValueError("Invalid value for `shared_advertiser_ids`, must not be `None`")  # noqa: E501

        self._shared_advertiser_ids = shared_advertiser_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetShareBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetShareBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
