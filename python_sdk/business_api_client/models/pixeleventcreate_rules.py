# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class PixeleventcreateRules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operator': 'str',
        'trigger': 'str',
        'value': 'str',
        'variable': 'str'
    }

    attribute_map = {
        'operator': 'operator',
        'trigger': 'trigger',
        'value': 'value',
        'variable': 'variable'
    }

    def __init__(self, operator=None, trigger=None, value=None, variable=None):  # noqa: E501
        """PixeleventcreateRules - a model defined in Swagger"""  # noqa: E501
        self._operator = None
        self._trigger = None
        self._value = None
        self._variable = None
        self.discriminator = None
        self.operator = operator
        self.trigger = trigger
        self.value = value
        self.variable = variable

    @property
    def operator(self):
        """Gets the operator of this PixeleventcreateRules.  # noqa: E501


        :return: The operator of this PixeleventcreateRules.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this PixeleventcreateRules.


        :param operator: The operator of this PixeleventcreateRules.  # noqa: E501
        :type: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501

        self._operator = operator

    @property
    def trigger(self):
        """Gets the trigger of this PixeleventcreateRules.  # noqa: E501


        :return: The trigger of this PixeleventcreateRules.  # noqa: E501
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this PixeleventcreateRules.


        :param trigger: The trigger of this PixeleventcreateRules.  # noqa: E501
        :type: str
        """
        if trigger is None:
            raise ValueError("Invalid value for `trigger`, must not be `None`")  # noqa: E501

        self._trigger = trigger

    @property
    def value(self):
        """Gets the value of this PixeleventcreateRules.  # noqa: E501


        :return: The value of this PixeleventcreateRules.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PixeleventcreateRules.


        :param value: The value of this PixeleventcreateRules.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def variable(self):
        """Gets the variable of this PixeleventcreateRules.  # noqa: E501


        :return: The variable of this PixeleventcreateRules.  # noqa: E501
        :rtype: str
        """
        return self._variable

    @variable.setter
    def variable(self, variable):
        """Sets the variable of this PixeleventcreateRules.


        :param variable: The variable of this PixeleventcreateRules.  # noqa: E501
        :type: str
        """
        if variable is None:
            raise ValueError("Invalid value for `variable`, must not be `None`")  # noqa: E501

        self._variable = variable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PixeleventcreateRules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PixeleventcreateRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
