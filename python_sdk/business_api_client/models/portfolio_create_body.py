# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class PortfolioCreateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'creative_portfolio_type': 'str',
        'portfolio_content': 'list[creativeportfoliocreatePortfolioContent]'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'creative_portfolio_type': 'creative_portfolio_type',
        'portfolio_content': 'portfolio_content'
    }

    def __init__(self, advertiser_id=None, creative_portfolio_type=None, portfolio_content=None):  # noqa: E501
        """PortfolioCreateBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._creative_portfolio_type = None
        self._portfolio_content = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        if creative_portfolio_type is not None:
            self.creative_portfolio_type = creative_portfolio_type
        if portfolio_content is not None:
            self.portfolio_content = portfolio_content

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this PortfolioCreateBody.  # noqa: E501

        The advertiser ID  # noqa: E501

        :return: The advertiser_id of this PortfolioCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this PortfolioCreateBody.

        The advertiser ID  # noqa: E501

        :param advertiser_id: The advertiser_id of this PortfolioCreateBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def creative_portfolio_type(self):
        """Gets the creative_portfolio_type of this PortfolioCreateBody.  # noqa: E501

        Type of the portfolio. Enum values: `CTA` (call-to-action text), `CARD` (card), `PREMIUM_BADGE` (badge pop-up)， `STICKER` (countdown sticker) ,`DOWNLOAD_CARD` (Download Card), `PRODUCT_CARD` (Product Card). The default value is `CTA`. See examples of Countdown Stickers Download Cards and in [Portfolios](https://ads.tiktok.com/marketing_api/docs?id=1739361803446273), and see examples of Countdown Sticker and Download Card in [Countdown Sticker](https://ads.tiktok.com/help/article?aid=10007423) and [Download Card](https://ads.tiktok.com/help/article?aid=10007086).Note: You can only create one countdown sticker at a time.Countdown Sticker is an allowlist-only feature for auction ads with the advertising objective (`objective_type`) as App Installs (`APP_INSTALL`), App Promotion (`APP_PROMOTION`), Traffic (`TRAFFIC`), or Conversion (`CONVERSIONS`). If you would like to access it for auction ads with these objectives , please contact your TikTok representative.Download Card is currently an allowlist-only feature. If you would like to access it, please contact your TikTok representative. Product Cards can only be used in Video Shopping Ads.  # noqa: E501

        :return: The creative_portfolio_type of this PortfolioCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._creative_portfolio_type

    @creative_portfolio_type.setter
    def creative_portfolio_type(self, creative_portfolio_type):
        """Sets the creative_portfolio_type of this PortfolioCreateBody.

        Type of the portfolio. Enum values: `CTA` (call-to-action text), `CARD` (card), `PREMIUM_BADGE` (badge pop-up)， `STICKER` (countdown sticker) ,`DOWNLOAD_CARD` (Download Card), `PRODUCT_CARD` (Product Card). The default value is `CTA`. See examples of Countdown Stickers Download Cards and in [Portfolios](https://ads.tiktok.com/marketing_api/docs?id=1739361803446273), and see examples of Countdown Sticker and Download Card in [Countdown Sticker](https://ads.tiktok.com/help/article?aid=10007423) and [Download Card](https://ads.tiktok.com/help/article?aid=10007086).Note: You can only create one countdown sticker at a time.Countdown Sticker is an allowlist-only feature for auction ads with the advertising objective (`objective_type`) as App Installs (`APP_INSTALL`), App Promotion (`APP_PROMOTION`), Traffic (`TRAFFIC`), or Conversion (`CONVERSIONS`). If you would like to access it for auction ads with these objectives , please contact your TikTok representative.Download Card is currently an allowlist-only feature. If you would like to access it, please contact your TikTok representative. Product Cards can only be used in Video Shopping Ads.  # noqa: E501

        :param creative_portfolio_type: The creative_portfolio_type of this PortfolioCreateBody.  # noqa: E501
        :type: str
        """

        self._creative_portfolio_type = creative_portfolio_type

    @property
    def portfolio_content(self):
        """Gets the portfolio_content of this PortfolioCreateBody.  # noqa: E501

        The content of the portfolio  # noqa: E501

        :return: The portfolio_content of this PortfolioCreateBody.  # noqa: E501
        :rtype: list[creativeportfoliocreatePortfolioContent]
        """
        return self._portfolio_content

    @portfolio_content.setter
    def portfolio_content(self, portfolio_content):
        """Sets the portfolio_content of this PortfolioCreateBody.

        The content of the portfolio  # noqa: E501

        :param portfolio_content: The portfolio_content of this PortfolioCreateBody.  # noqa: E501
        :type: list[creativeportfoliocreatePortfolioContent]
        """

        self._portfolio_content = portfolio_content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortfolioCreateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortfolioCreateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
