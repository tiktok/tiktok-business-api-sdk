# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class ProductDeleteBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bc_id': 'str',
        'catalog_id': 'str',
        'destination_ids': 'list[str]',
        'feed_id': 'str',
        'flight_ids': 'list[str]',
        'hotel_ids': 'list[str]',
        'media_title_ids': 'list[str]',
        'sku_ids': 'list[str]',
        'vehicle_ids': 'list[str]'
    }

    attribute_map = {
        'bc_id': 'bc_id',
        'catalog_id': 'catalog_id',
        'destination_ids': 'destination_ids',
        'feed_id': 'feed_id',
        'flight_ids': 'flight_ids',
        'hotel_ids': 'hotel_ids',
        'media_title_ids': 'media_title_ids',
        'sku_ids': 'sku_ids',
        'vehicle_ids': 'vehicle_ids'
    }

    def __init__(self, bc_id=None, catalog_id=None, destination_ids=None, feed_id=None, flight_ids=None, hotel_ids=None, media_title_ids=None, sku_ids=None, vehicle_ids=None):  # noqa: E501
        """ProductDeleteBody - a model defined in Swagger"""  # noqa: E501
        self._bc_id = None
        self._catalog_id = None
        self._destination_ids = None
        self._feed_id = None
        self._flight_ids = None
        self._hotel_ids = None
        self._media_title_ids = None
        self._sku_ids = None
        self._vehicle_ids = None
        self.discriminator = None
        self.bc_id = bc_id
        self.catalog_id = catalog_id
        if destination_ids is not None:
            self.destination_ids = destination_ids
        if feed_id is not None:
            self.feed_id = feed_id
        if flight_ids is not None:
            self.flight_ids = flight_ids
        if hotel_ids is not None:
            self.hotel_ids = hotel_ids
        if media_title_ids is not None:
            self.media_title_ids = media_title_ids
        if sku_ids is not None:
            self.sku_ids = sku_ids
        if vehicle_ids is not None:
            self.vehicle_ids = vehicle_ids

    @property
    def bc_id(self):
        """Gets the bc_id of this ProductDeleteBody.  # noqa: E501


        :return: The bc_id of this ProductDeleteBody.  # noqa: E501
        :rtype: str
        """
        return self._bc_id

    @bc_id.setter
    def bc_id(self, bc_id):
        """Sets the bc_id of this ProductDeleteBody.


        :param bc_id: The bc_id of this ProductDeleteBody.  # noqa: E501
        :type: str
        """
        if bc_id is None:
            raise ValueError("Invalid value for `bc_id`, must not be `None`")  # noqa: E501

        self._bc_id = bc_id

    @property
    def catalog_id(self):
        """Gets the catalog_id of this ProductDeleteBody.  # noqa: E501


        :return: The catalog_id of this ProductDeleteBody.  # noqa: E501
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this ProductDeleteBody.


        :param catalog_id: The catalog_id of this ProductDeleteBody.  # noqa: E501
        :type: str
        """
        if catalog_id is None:
            raise ValueError("Invalid value for `catalog_id`, must not be `None`")  # noqa: E501

        self._catalog_id = catalog_id

    @property
    def destination_ids(self):
        """Gets the destination_ids of this ProductDeleteBody.  # noqa: E501


        :return: The destination_ids of this ProductDeleteBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._destination_ids

    @destination_ids.setter
    def destination_ids(self, destination_ids):
        """Sets the destination_ids of this ProductDeleteBody.


        :param destination_ids: The destination_ids of this ProductDeleteBody.  # noqa: E501
        :type: list[str]
        """

        self._destination_ids = destination_ids

    @property
    def feed_id(self):
        """Gets the feed_id of this ProductDeleteBody.  # noqa: E501


        :return: The feed_id of this ProductDeleteBody.  # noqa: E501
        :rtype: str
        """
        return self._feed_id

    @feed_id.setter
    def feed_id(self, feed_id):
        """Sets the feed_id of this ProductDeleteBody.


        :param feed_id: The feed_id of this ProductDeleteBody.  # noqa: E501
        :type: str
        """

        self._feed_id = feed_id

    @property
    def flight_ids(self):
        """Gets the flight_ids of this ProductDeleteBody.  # noqa: E501


        :return: The flight_ids of this ProductDeleteBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._flight_ids

    @flight_ids.setter
    def flight_ids(self, flight_ids):
        """Sets the flight_ids of this ProductDeleteBody.


        :param flight_ids: The flight_ids of this ProductDeleteBody.  # noqa: E501
        :type: list[str]
        """

        self._flight_ids = flight_ids

    @property
    def hotel_ids(self):
        """Gets the hotel_ids of this ProductDeleteBody.  # noqa: E501


        :return: The hotel_ids of this ProductDeleteBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._hotel_ids

    @hotel_ids.setter
    def hotel_ids(self, hotel_ids):
        """Sets the hotel_ids of this ProductDeleteBody.


        :param hotel_ids: The hotel_ids of this ProductDeleteBody.  # noqa: E501
        :type: list[str]
        """

        self._hotel_ids = hotel_ids

    @property
    def media_title_ids(self):
        """Gets the media_title_ids of this ProductDeleteBody.  # noqa: E501


        :return: The media_title_ids of this ProductDeleteBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._media_title_ids

    @media_title_ids.setter
    def media_title_ids(self, media_title_ids):
        """Sets the media_title_ids of this ProductDeleteBody.


        :param media_title_ids: The media_title_ids of this ProductDeleteBody.  # noqa: E501
        :type: list[str]
        """

        self._media_title_ids = media_title_ids

    @property
    def sku_ids(self):
        """Gets the sku_ids of this ProductDeleteBody.  # noqa: E501


        :return: The sku_ids of this ProductDeleteBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._sku_ids

    @sku_ids.setter
    def sku_ids(self, sku_ids):
        """Sets the sku_ids of this ProductDeleteBody.


        :param sku_ids: The sku_ids of this ProductDeleteBody.  # noqa: E501
        :type: list[str]
        """

        self._sku_ids = sku_ids

    @property
    def vehicle_ids(self):
        """Gets the vehicle_ids of this ProductDeleteBody.  # noqa: E501


        :return: The vehicle_ids of this ProductDeleteBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._vehicle_ids

    @vehicle_ids.setter
    def vehicle_ids(self, vehicle_ids):
        """Sets the vehicle_ids of this ProductDeleteBody.


        :param vehicle_ids: The vehicle_ids of this ProductDeleteBody.  # noqa: E501
        :type: list[str]
        """

        self._vehicle_ids = vehicle_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductDeleteBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductDeleteBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
