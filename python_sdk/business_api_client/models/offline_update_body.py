# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class OfflineUpdateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'auto_tracking': 'bool',
        'event_set_id': 'str',
        'name': 'str'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'auto_tracking': 'auto_tracking',
        'event_set_id': 'event_set_id',
        'name': 'name'
    }

    def __init__(self, advertiser_id=None, auto_tracking=None, event_set_id=None, name=None):  # noqa: E501
        """OfflineUpdateBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._auto_tracking = None
        self._event_set_id = None
        self._name = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        if auto_tracking is not None:
            self.auto_tracking = auto_tracking
        self.event_set_id = event_set_id
        if name is not None:
            self.name = name

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this OfflineUpdateBody.  # noqa: E501


        :return: The advertiser_id of this OfflineUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this OfflineUpdateBody.


        :param advertiser_id: The advertiser_id of this OfflineUpdateBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def auto_tracking(self):
        """Gets the auto_tracking of this OfflineUpdateBody.  # noqa: E501


        :return: The auto_tracking of this OfflineUpdateBody.  # noqa: E501
        :rtype: bool
        """
        return self._auto_tracking

    @auto_tracking.setter
    def auto_tracking(self, auto_tracking):
        """Sets the auto_tracking of this OfflineUpdateBody.


        :param auto_tracking: The auto_tracking of this OfflineUpdateBody.  # noqa: E501
        :type: bool
        """

        self._auto_tracking = auto_tracking

    @property
    def event_set_id(self):
        """Gets the event_set_id of this OfflineUpdateBody.  # noqa: E501


        :return: The event_set_id of this OfflineUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._event_set_id

    @event_set_id.setter
    def event_set_id(self, event_set_id):
        """Sets the event_set_id of this OfflineUpdateBody.


        :param event_set_id: The event_set_id of this OfflineUpdateBody.  # noqa: E501
        :type: str
        """
        if event_set_id is None:
            raise ValueError("Invalid value for `event_set_id`, must not be `None`")  # noqa: E501

        self._event_set_id = event_set_id

    @property
    def name(self):
        """Gets the name of this OfflineUpdateBody.  # noqa: E501


        :return: The name of this OfflineUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OfflineUpdateBody.


        :param name: The name of this OfflineUpdateBody.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OfflineUpdateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OfflineUpdateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
