# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class ReporttaskcreateFiltering(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_name': 'str',
        'filter_type': 'str',
        'filter_value': 'str'
    }

    attribute_map = {
        'field_name': 'field_name',
        'filter_type': 'filter_type',
        'filter_value': 'filter_value'
    }

    def __init__(self, field_name=None, filter_type=None, filter_value=None):  # noqa: E501
        """ReporttaskcreateFiltering - a model defined in Swagger"""  # noqa: E501
        self._field_name = None
        self._filter_type = None
        self._filter_value = None
        self.discriminator = None
        if field_name is not None:
            self.field_name = field_name
        if filter_type is not None:
            self.filter_type = filter_type
        if filter_value is not None:
            self.filter_value = filter_value

    @property
    def field_name(self):
        """Gets the field_name of this ReporttaskcreateFiltering.  # noqa: E501


        :return: The field_name of this ReporttaskcreateFiltering.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this ReporttaskcreateFiltering.


        :param field_name: The field_name of this ReporttaskcreateFiltering.  # noqa: E501
        :type: str
        """

        self._field_name = field_name

    @property
    def filter_type(self):
        """Gets the filter_type of this ReporttaskcreateFiltering.  # noqa: E501


        :return: The filter_type of this ReporttaskcreateFiltering.  # noqa: E501
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this ReporttaskcreateFiltering.


        :param filter_type: The filter_type of this ReporttaskcreateFiltering.  # noqa: E501
        :type: str
        """

        self._filter_type = filter_type

    @property
    def filter_value(self):
        """Gets the filter_value of this ReporttaskcreateFiltering.  # noqa: E501


        :return: The filter_value of this ReporttaskcreateFiltering.  # noqa: E501
        :rtype: str
        """
        return self._filter_value

    @filter_value.setter
    def filter_value(self, filter_value):
        """Sets the filter_value of this ReporttaskcreateFiltering.


        :param filter_value: The filter_value of this ReporttaskcreateFiltering.  # noqa: E501
        :type: str
        """

        self._filter_value = filter_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReporttaskcreateFiltering, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReporttaskcreateFiltering):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
