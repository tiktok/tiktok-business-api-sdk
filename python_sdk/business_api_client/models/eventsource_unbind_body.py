# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class EventsourceUnbindBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'app_id': 'str',
        'bc_id': 'str',
        'catalog_id': 'str',
        'pixel_code': 'str'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'app_id': 'app_id',
        'bc_id': 'bc_id',
        'catalog_id': 'catalog_id',
        'pixel_code': 'pixel_code'
    }

    def __init__(self, advertiser_id=None, app_id=None, bc_id=None, catalog_id=None, pixel_code=None):  # noqa: E501
        """EventsourceUnbindBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._app_id = None
        self._bc_id = None
        self._catalog_id = None
        self._pixel_code = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        if app_id is not None:
            self.app_id = app_id
        self.bc_id = bc_id
        self.catalog_id = catalog_id
        if pixel_code is not None:
            self.pixel_code = pixel_code

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this EventsourceUnbindBody.  # noqa: E501


        :return: The advertiser_id of this EventsourceUnbindBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this EventsourceUnbindBody.


        :param advertiser_id: The advertiser_id of this EventsourceUnbindBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def app_id(self):
        """Gets the app_id of this EventsourceUnbindBody.  # noqa: E501


        :return: The app_id of this EventsourceUnbindBody.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this EventsourceUnbindBody.


        :param app_id: The app_id of this EventsourceUnbindBody.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def bc_id(self):
        """Gets the bc_id of this EventsourceUnbindBody.  # noqa: E501


        :return: The bc_id of this EventsourceUnbindBody.  # noqa: E501
        :rtype: str
        """
        return self._bc_id

    @bc_id.setter
    def bc_id(self, bc_id):
        """Sets the bc_id of this EventsourceUnbindBody.


        :param bc_id: The bc_id of this EventsourceUnbindBody.  # noqa: E501
        :type: str
        """
        if bc_id is None:
            raise ValueError("Invalid value for `bc_id`, must not be `None`")  # noqa: E501

        self._bc_id = bc_id

    @property
    def catalog_id(self):
        """Gets the catalog_id of this EventsourceUnbindBody.  # noqa: E501


        :return: The catalog_id of this EventsourceUnbindBody.  # noqa: E501
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this EventsourceUnbindBody.


        :param catalog_id: The catalog_id of this EventsourceUnbindBody.  # noqa: E501
        :type: str
        """
        if catalog_id is None:
            raise ValueError("Invalid value for `catalog_id`, must not be `None`")  # noqa: E501

        self._catalog_id = catalog_id

    @property
    def pixel_code(self):
        """Gets the pixel_code of this EventsourceUnbindBody.  # noqa: E501


        :return: The pixel_code of this EventsourceUnbindBody.  # noqa: E501
        :rtype: str
        """
        return self._pixel_code

    @pixel_code.setter
    def pixel_code(self, pixel_code):
        """Sets the pixel_code of this EventsourceUnbindBody.


        :param pixel_code: The pixel_code of this EventsourceUnbindBody.  # noqa: E501
        :type: str
        """

        self._pixel_code = pixel_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventsourceUnbindBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventsourceUnbindBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
