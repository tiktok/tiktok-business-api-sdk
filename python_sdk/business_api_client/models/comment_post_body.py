# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class CommentPostBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ad_id': 'str',
        'advertiser_id': 'str',
        'comment_id': 'str',
        'comment_type': 'str',
        'identity_id': 'str',
        'identity_type': 'str',
        'text': 'str',
        'tiktok_item_id': 'str'
    }

    attribute_map = {
        'ad_id': 'ad_id',
        'advertiser_id': 'advertiser_id',
        'comment_id': 'comment_id',
        'comment_type': 'comment_type',
        'identity_id': 'identity_id',
        'identity_type': 'identity_type',
        'text': 'text',
        'tiktok_item_id': 'tiktok_item_id'
    }

    def __init__(self, ad_id=None, advertiser_id=None, comment_id=None, comment_type=None, identity_id=None, identity_type=None, text=None, tiktok_item_id=None):  # noqa: E501
        """CommentPostBody - a model defined in Swagger"""  # noqa: E501
        self._ad_id = None
        self._advertiser_id = None
        self._comment_id = None
        self._comment_type = None
        self._identity_id = None
        self._identity_type = None
        self._text = None
        self._tiktok_item_id = None
        self.discriminator = None
        self.ad_id = ad_id
        self.advertiser_id = advertiser_id
        self.comment_id = comment_id
        self.comment_type = comment_type
        self.identity_id = identity_id
        self.identity_type = identity_type
        self.text = text
        self.tiktok_item_id = tiktok_item_id

    @property
    def ad_id(self):
        """Gets the ad_id of this CommentPostBody.  # noqa: E501


        :return: The ad_id of this CommentPostBody.  # noqa: E501
        :rtype: str
        """
        return self._ad_id

    @ad_id.setter
    def ad_id(self, ad_id):
        """Sets the ad_id of this CommentPostBody.


        :param ad_id: The ad_id of this CommentPostBody.  # noqa: E501
        :type: str
        """
        if ad_id is None:
            raise ValueError("Invalid value for `ad_id`, must not be `None`")  # noqa: E501

        self._ad_id = ad_id

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this CommentPostBody.  # noqa: E501


        :return: The advertiser_id of this CommentPostBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this CommentPostBody.


        :param advertiser_id: The advertiser_id of this CommentPostBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def comment_id(self):
        """Gets the comment_id of this CommentPostBody.  # noqa: E501


        :return: The comment_id of this CommentPostBody.  # noqa: E501
        :rtype: str
        """
        return self._comment_id

    @comment_id.setter
    def comment_id(self, comment_id):
        """Sets the comment_id of this CommentPostBody.


        :param comment_id: The comment_id of this CommentPostBody.  # noqa: E501
        :type: str
        """
        if comment_id is None:
            raise ValueError("Invalid value for `comment_id`, must not be `None`")  # noqa: E501

        self._comment_id = comment_id

    @property
    def comment_type(self):
        """Gets the comment_type of this CommentPostBody.  # noqa: E501


        :return: The comment_type of this CommentPostBody.  # noqa: E501
        :rtype: str
        """
        return self._comment_type

    @comment_type.setter
    def comment_type(self, comment_type):
        """Sets the comment_type of this CommentPostBody.


        :param comment_type: The comment_type of this CommentPostBody.  # noqa: E501
        :type: str
        """
        if comment_type is None:
            raise ValueError("Invalid value for `comment_type`, must not be `None`")  # noqa: E501

        self._comment_type = comment_type

    @property
    def identity_id(self):
        """Gets the identity_id of this CommentPostBody.  # noqa: E501


        :return: The identity_id of this CommentPostBody.  # noqa: E501
        :rtype: str
        """
        return self._identity_id

    @identity_id.setter
    def identity_id(self, identity_id):
        """Sets the identity_id of this CommentPostBody.


        :param identity_id: The identity_id of this CommentPostBody.  # noqa: E501
        :type: str
        """
        if identity_id is None:
            raise ValueError("Invalid value for `identity_id`, must not be `None`")  # noqa: E501

        self._identity_id = identity_id

    @property
    def identity_type(self):
        """Gets the identity_type of this CommentPostBody.  # noqa: E501


        :return: The identity_type of this CommentPostBody.  # noqa: E501
        :rtype: str
        """
        return self._identity_type

    @identity_type.setter
    def identity_type(self, identity_type):
        """Sets the identity_type of this CommentPostBody.


        :param identity_type: The identity_type of this CommentPostBody.  # noqa: E501
        :type: str
        """
        if identity_type is None:
            raise ValueError("Invalid value for `identity_type`, must not be `None`")  # noqa: E501

        self._identity_type = identity_type

    @property
    def text(self):
        """Gets the text of this CommentPostBody.  # noqa: E501


        :return: The text of this CommentPostBody.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CommentPostBody.


        :param text: The text of this CommentPostBody.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def tiktok_item_id(self):
        """Gets the tiktok_item_id of this CommentPostBody.  # noqa: E501


        :return: The tiktok_item_id of this CommentPostBody.  # noqa: E501
        :rtype: str
        """
        return self._tiktok_item_id

    @tiktok_item_id.setter
    def tiktok_item_id(self, tiktok_item_id):
        """Sets the tiktok_item_id of this CommentPostBody.


        :param tiktok_item_id: The tiktok_item_id of this CommentPostBody.  # noqa: E501
        :type: str
        """
        if tiktok_item_id is None:
            raise ValueError("Invalid value for `tiktok_item_id`, must not be `None`")  # noqa: E501

        self._tiktok_item_id = tiktok_item_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommentPostBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommentPostBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
