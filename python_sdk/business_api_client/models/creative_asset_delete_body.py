# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class CreativeAssetDeleteBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'image_ids': 'list[str]',
        'video_ids': 'list[str]'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'image_ids': 'image_ids',
        'video_ids': 'video_ids'
    }

    def __init__(self, advertiser_id=None, image_ids=None, video_ids=None):  # noqa: E501
        """CreativeAssetDeleteBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._image_ids = None
        self._video_ids = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        if image_ids is not None:
            self.image_ids = image_ids
        if video_ids is not None:
            self.video_ids = video_ids

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this CreativeAssetDeleteBody.  # noqa: E501


        :return: The advertiser_id of this CreativeAssetDeleteBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this CreativeAssetDeleteBody.


        :param advertiser_id: The advertiser_id of this CreativeAssetDeleteBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def image_ids(self):
        """Gets the image_ids of this CreativeAssetDeleteBody.  # noqa: E501


        :return: The image_ids of this CreativeAssetDeleteBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._image_ids

    @image_ids.setter
    def image_ids(self, image_ids):
        """Sets the image_ids of this CreativeAssetDeleteBody.


        :param image_ids: The image_ids of this CreativeAssetDeleteBody.  # noqa: E501
        :type: list[str]
        """

        self._image_ids = image_ids

    @property
    def video_ids(self):
        """Gets the video_ids of this CreativeAssetDeleteBody.  # noqa: E501


        :return: The video_ids of this CreativeAssetDeleteBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._video_ids

    @video_ids.setter
    def video_ids(self, video_ids):
        """Sets the video_ids of this CreativeAssetDeleteBody.


        :param video_ids: The video_ids of this CreativeAssetDeleteBody.  # noqa: E501
        :type: list[str]
        """

        self._video_ids = video_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreativeAssetDeleteBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreativeAssetDeleteBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
