# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class BidRecommendBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'campaign_id': 'str',
        'external_action': 'str',
        'location_ids': 'list[str]',
        'objective_type': 'str'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'campaign_id': 'campaign_id',
        'external_action': 'external_action',
        'location_ids': 'location_ids',
        'objective_type': 'objective_type'
    }

    def __init__(self, advertiser_id=None, campaign_id='"0"', external_action=None, location_ids=None, objective_type=None):  # noqa: E501
        """BidRecommendBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._campaign_id = None
        self._external_action = None
        self._location_ids = None
        self._objective_type = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        if campaign_id is not None:
            self.campaign_id = campaign_id
        if external_action is not None:
            self.external_action = external_action
        self.location_ids = location_ids
        self.objective_type = objective_type

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this BidRecommendBody.  # noqa: E501

        Advertiser ID.  # noqa: E501

        :return: The advertiser_id of this BidRecommendBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this BidRecommendBody.

        Advertiser ID.  # noqa: E501

        :param advertiser_id: The advertiser_id of this BidRecommendBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def campaign_id(self):
        """Gets the campaign_id of this BidRecommendBody.  # noqa: E501

        Campaign ID.  # noqa: E501

        :return: The campaign_id of this BidRecommendBody.  # noqa: E501
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this BidRecommendBody.

        Campaign ID.  # noqa: E501

        :param campaign_id: The campaign_id of this BidRecommendBody.  # noqa: E501
        :type: str
        """

        self._campaign_id = campaign_id

    @property
    def external_action(self):
        """Gets the external_action of this BidRecommendBody.  # noqa: E501

        Conversion event for the ad group.  # noqa: E501

        :return: The external_action of this BidRecommendBody.  # noqa: E501
        :rtype: str
        """
        return self._external_action

    @external_action.setter
    def external_action(self, external_action):
        """Sets the external_action of this BidRecommendBody.

        Conversion event for the ad group.  # noqa: E501

        :param external_action: The external_action of this BidRecommendBody.  # noqa: E501
        :type: str
        """

        self._external_action = external_action

    @property
    def location_ids(self):
        """Gets the location_ids of this BidRecommendBody.  # noqa: E501

        IDs of the locations that you want to target.  # noqa: E501

        :return: The location_ids of this BidRecommendBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._location_ids

    @location_ids.setter
    def location_ids(self, location_ids):
        """Sets the location_ids of this BidRecommendBody.

        IDs of the locations that you want to target.  # noqa: E501

        :param location_ids: The location_ids of this BidRecommendBody.  # noqa: E501
        :type: list[str]
        """
        if location_ids is None:
            raise ValueError("Invalid value for `location_ids`, must not be `None`")  # noqa: E501

        self._location_ids = location_ids

    @property
    def objective_type(self):
        """Gets the objective_type of this BidRecommendBody.  # noqa: E501

        Campaign objective. The current API endpoint only supports Traffic and Website conversions objectives. For enum values and descriptions, see Objectives. Note: This API is being revamped to support larger function scope and more accurate result. Please stay tuned for updates.  # noqa: E501

        :return: The objective_type of this BidRecommendBody.  # noqa: E501
        :rtype: str
        """
        return self._objective_type

    @objective_type.setter
    def objective_type(self, objective_type):
        """Sets the objective_type of this BidRecommendBody.

        Campaign objective. The current API endpoint only supports Traffic and Website conversions objectives. For enum values and descriptions, see Objectives. Note: This API is being revamped to support larger function scope and more accurate result. Please stay tuned for updates.  # noqa: E501

        :param objective_type: The objective_type of this BidRecommendBody.  # noqa: E501
        :type: str
        """
        if objective_type is None:
            raise ValueError("Invalid value for `objective_type`, must not be `None`")  # noqa: E501

        self._objective_type = objective_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BidRecommendBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BidRecommendBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
