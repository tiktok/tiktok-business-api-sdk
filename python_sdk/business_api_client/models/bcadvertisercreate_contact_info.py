# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class bcadvertisercreateContactInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'name': 'str',
        'number': 'str'
    }

    attribute_map = {
        'email': 'email',
        'name': 'name',
        'number': 'number'
    }

    def __init__(self, email=None, name=None, number=None):  # noqa: E501
        """bcadvertisercreateContactInfo - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._name = None
        self._number = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if name is not None:
            self.name = name
        if number is not None:
            self.number = number

    @property
    def email(self):
        """Gets the email of this bcadvertisercreateContactInfo.  # noqa: E501

        Contact email. Required if the place of registration of the ad account or the Business Center is France, Brazil, or Mexico  # noqa: E501

        :return: The email of this bcadvertisercreateContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this bcadvertisercreateContactInfo.

        Contact email. Required if the place of registration of the ad account or the Business Center is France, Brazil, or Mexico  # noqa: E501

        :param email: The email of this bcadvertisercreateContactInfo.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this bcadvertisercreateContactInfo.  # noqa: E501

        Contact name. No more than 100 characters in length  # noqa: E501

        :return: The name of this bcadvertisercreateContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this bcadvertisercreateContactInfo.

        Contact name. No more than 100 characters in length  # noqa: E501

        :param name: The name of this bcadvertisercreateContactInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this bcadvertisercreateContactInfo.  # noqa: E501

        Contact phone  # noqa: E501

        :return: The number of this bcadvertisercreateContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this bcadvertisercreateContactInfo.

        Contact phone  # noqa: E501

        :param number: The number of this bcadvertisercreateContactInfo.  # noqa: E501
        :type: str
        """

        self._number = number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(bcadvertisercreateContactInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, bcadvertisercreateContactInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
