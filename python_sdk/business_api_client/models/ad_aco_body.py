# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class AdAcoBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adgroup_id': 'str',
        'advertiser_id': 'str',
        'avatar_icon_list': 'list[AdAcoBodyAvatarIconList]',
        'call_to_action_list': 'list[AdAcoBodyCallToActionList]',
        'card_list': 'list[AdAcoBodyCardList]',
        'common_material': 'AdAcoBodyCommonMaterial',
        'deeplink_list': 'list[AdAcoBodyDeeplinkList]',
        'display_name_list': 'list[AdAcoBodyDisplayNameList]',
        'landing_page_urls': 'list[AdAcoBodyLandingPageUrls]',
        'media_info_list': 'list[AdAcoBodyMediaInfoList]',
        'page_list': 'list[AdAcoBodyPageList]',
        'title_list': 'list[AdAcoBodyTitleList]'
    }

    attribute_map = {
        'adgroup_id': 'adgroup_id',
        'advertiser_id': 'advertiser_id',
        'avatar_icon_list': 'avatar_icon_list',
        'call_to_action_list': 'call_to_action_list',
        'card_list': 'card_list',
        'common_material': 'common_material',
        'deeplink_list': 'deeplink_list',
        'display_name_list': 'display_name_list',
        'landing_page_urls': 'landing_page_urls',
        'media_info_list': 'media_info_list',
        'page_list': 'page_list',
        'title_list': 'title_list'
    }

    def __init__(self, adgroup_id=None, advertiser_id=None, avatar_icon_list=None, call_to_action_list=None, card_list=None, common_material=None, deeplink_list=None, display_name_list=None, landing_page_urls=None, media_info_list=None, page_list=None, title_list=None):  # noqa: E501
        """AdAcoBody - a model defined in Swagger"""  # noqa: E501
        self._adgroup_id = None
        self._advertiser_id = None
        self._avatar_icon_list = None
        self._call_to_action_list = None
        self._card_list = None
        self._common_material = None
        self._deeplink_list = None
        self._display_name_list = None
        self._landing_page_urls = None
        self._media_info_list = None
        self._page_list = None
        self._title_list = None
        self.discriminator = None
        if adgroup_id is not None:
            self.adgroup_id = adgroup_id
        self.advertiser_id = advertiser_id
        if avatar_icon_list is not None:
            self.avatar_icon_list = avatar_icon_list
        if call_to_action_list is not None:
            self.call_to_action_list = call_to_action_list
        if card_list is not None:
            self.card_list = card_list
        if common_material is not None:
            self.common_material = common_material
        if deeplink_list is not None:
            self.deeplink_list = deeplink_list
        if display_name_list is not None:
            self.display_name_list = display_name_list
        if landing_page_urls is not None:
            self.landing_page_urls = landing_page_urls
        if media_info_list is not None:
            self.media_info_list = media_info_list
        if page_list is not None:
            self.page_list = page_list
        if title_list is not None:
            self.title_list = title_list

    @property
    def adgroup_id(self):
        """Gets the adgroup_id of this AdAcoBody.  # noqa: E501

        Ad group ID. The ID should be of the ad group that you will enable Automated Creative Optimization for, and `creative_material_mode` for the ad group must be set as `DYNAMIC`.  # noqa: E501

        :return: The adgroup_id of this AdAcoBody.  # noqa: E501
        :rtype: str
        """
        return self._adgroup_id

    @adgroup_id.setter
    def adgroup_id(self, adgroup_id):
        """Sets the adgroup_id of this AdAcoBody.

        Ad group ID. The ID should be of the ad group that you will enable Automated Creative Optimization for, and `creative_material_mode` for the ad group must be set as `DYNAMIC`.  # noqa: E501

        :param adgroup_id: The adgroup_id of this AdAcoBody.  # noqa: E501
        :type: str
        """

        self._adgroup_id = adgroup_id

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this AdAcoBody.  # noqa: E501

        Advertiser ID.   # noqa: E501

        :return: The advertiser_id of this AdAcoBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this AdAcoBody.

        Advertiser ID.   # noqa: E501

        :param advertiser_id: The advertiser_id of this AdAcoBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def avatar_icon_list(self):
        """Gets the avatar_icon_list of this AdAcoBody.  # noqa: E501

        Avatar image list.  # noqa: E501

        :return: The avatar_icon_list of this AdAcoBody.  # noqa: E501
        :rtype: list[AdAcoBodyAvatarIconList]
        """
        return self._avatar_icon_list

    @avatar_icon_list.setter
    def avatar_icon_list(self, avatar_icon_list):
        """Sets the avatar_icon_list of this AdAcoBody.

        Avatar image list.  # noqa: E501

        :param avatar_icon_list: The avatar_icon_list of this AdAcoBody.  # noqa: E501
        :type: list[AdAcoBodyAvatarIconList]
        """

        self._avatar_icon_list = avatar_icon_list

    @property
    def call_to_action_list(self):
        """Gets the call_to_action_list of this AdAcoBody.  # noqa: E501

        Call-to-action list. For TikTok ads, either this field or `call_to_action_id` must be specified. If both are specified, this field will be ignored.  # noqa: E501

        :return: The call_to_action_list of this AdAcoBody.  # noqa: E501
        :rtype: list[AdAcoBodyCallToActionList]
        """
        return self._call_to_action_list

    @call_to_action_list.setter
    def call_to_action_list(self, call_to_action_list):
        """Sets the call_to_action_list of this AdAcoBody.

        Call-to-action list. For TikTok ads, either this field or `call_to_action_id` must be specified. If both are specified, this field will be ignored.  # noqa: E501

        :param call_to_action_list: The call_to_action_list of this AdAcoBody.  # noqa: E501
        :type: list[AdAcoBodyCallToActionList]
        """

        self._call_to_action_list = call_to_action_list

    @property
    def card_list(self):
        """Gets the card_list of this AdAcoBody.  # noqa: E501

        Card ID list. Length range- [0,1].  # noqa: E501

        :return: The card_list of this AdAcoBody.  # noqa: E501
        :rtype: list[AdAcoBodyCardList]
        """
        return self._card_list

    @card_list.setter
    def card_list(self, card_list):
        """Sets the card_list of this AdAcoBody.

        Card ID list. Length range- [0,1].  # noqa: E501

        :param card_list: The card_list of this AdAcoBody.  # noqa: E501
        :type: list[AdAcoBodyCardList]
        """

        self._card_list = card_list

    @property
    def common_material(self):
        """Gets the common_material of this AdAcoBody.  # noqa: E501


        :return: The common_material of this AdAcoBody.  # noqa: E501
        :rtype: AdAcoBodyCommonMaterial
        """
        return self._common_material

    @common_material.setter
    def common_material(self, common_material):
        """Sets the common_material of this AdAcoBody.


        :param common_material: The common_material of this AdAcoBody.  # noqa: E501
        :type: AdAcoBodyCommonMaterial
        """

        self._common_material = common_material

    @property
    def deeplink_list(self):
        """Gets the deeplink_list of this AdAcoBody.  # noqa: E501

        List of open URLs. Length range- [0,1]  # noqa: E501

        :return: The deeplink_list of this AdAcoBody.  # noqa: E501
        :rtype: list[AdAcoBodyDeeplinkList]
        """
        return self._deeplink_list

    @deeplink_list.setter
    def deeplink_list(self, deeplink_list):
        """Sets the deeplink_list of this AdAcoBody.

        List of open URLs. Length range- [0,1]  # noqa: E501

        :param deeplink_list: The deeplink_list of this AdAcoBody.  # noqa: E501
        :type: list[AdAcoBodyDeeplinkList]
        """

        self._deeplink_list = deeplink_list

    @property
    def display_name_list(self):
        """Gets the display_name_list of this AdAcoBody.  # noqa: E501

        Display names.  # noqa: E501

        :return: The display_name_list of this AdAcoBody.  # noqa: E501
        :rtype: list[AdAcoBodyDisplayNameList]
        """
        return self._display_name_list

    @display_name_list.setter
    def display_name_list(self, display_name_list):
        """Sets the display_name_list of this AdAcoBody.

        Display names.  # noqa: E501

        :param display_name_list: The display_name_list of this AdAcoBody.  # noqa: E501
        :type: list[AdAcoBodyDisplayNameList]
        """

        self._display_name_list = display_name_list

    @property
    def landing_page_urls(self):
        """Gets the landing_page_urls of this AdAcoBody.  # noqa: E501

        Multiple landing page URLs.  # noqa: E501

        :return: The landing_page_urls of this AdAcoBody.  # noqa: E501
        :rtype: list[AdAcoBodyLandingPageUrls]
        """
        return self._landing_page_urls

    @landing_page_urls.setter
    def landing_page_urls(self, landing_page_urls):
        """Sets the landing_page_urls of this AdAcoBody.

        Multiple landing page URLs.  # noqa: E501

        :param landing_page_urls: The landing_page_urls of this AdAcoBody.  # noqa: E501
        :type: list[AdAcoBodyLandingPageUrls]
        """

        self._landing_page_urls = landing_page_urls

    @property
    def media_info_list(self):
        """Gets the media_info_list of this AdAcoBody.  # noqa: E501

        List of media information.  # noqa: E501

        :return: The media_info_list of this AdAcoBody.  # noqa: E501
        :rtype: list[AdAcoBodyMediaInfoList]
        """
        return self._media_info_list

    @media_info_list.setter
    def media_info_list(self, media_info_list):
        """Sets the media_info_list of this AdAcoBody.

        List of media information.  # noqa: E501

        :param media_info_list: The media_info_list of this AdAcoBody.  # noqa: E501
        :type: list[AdAcoBodyMediaInfoList]
        """

        self._media_info_list = media_info_list

    @property
    def page_list(self):
        """Gets the page_list of this AdAcoBody.  # noqa: E501

        Page ID list.  # noqa: E501

        :return: The page_list of this AdAcoBody.  # noqa: E501
        :rtype: list[AdAcoBodyPageList]
        """
        return self._page_list

    @page_list.setter
    def page_list(self, page_list):
        """Sets the page_list of this AdAcoBody.

        Page ID list.  # noqa: E501

        :param page_list: The page_list of this AdAcoBody.  # noqa: E501
        :type: list[AdAcoBodyPageList]
        """

        self._page_list = page_list

    @property
    def title_list(self):
        """Gets the title_list of this AdAcoBody.  # noqa: E501

        List of ad titles (also called ad texts). Ad titles are shown to your audience as part of your ad creative, to deliver the message you intend to communicate to them.  # noqa: E501

        :return: The title_list of this AdAcoBody.  # noqa: E501
        :rtype: list[AdAcoBodyTitleList]
        """
        return self._title_list

    @title_list.setter
    def title_list(self, title_list):
        """Sets the title_list of this AdAcoBody.

        List of ad titles (also called ad texts). Ad titles are shown to your audience as part of your ad creative, to deliver the message you intend to communicate to them.  # noqa: E501

        :param title_list: The title_list of this AdAcoBody.  # noqa: E501
        :type: list[AdAcoBodyTitleList]
        """

        self._title_list = title_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdAcoBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdAcoBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
