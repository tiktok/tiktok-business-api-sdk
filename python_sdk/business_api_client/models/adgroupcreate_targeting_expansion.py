# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class adgroupcreateTargetingExpansion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expansion_enabled': 'bool',
        'expansion_types': 'list[str]'
    }

    attribute_map = {
        'expansion_enabled': 'expansion_enabled',
        'expansion_types': 'expansion_types'
    }

    def __init__(self, expansion_enabled=None, expansion_types=None):  # noqa: E501
        """adgroupcreateTargetingExpansion - a model defined in Swagger"""  # noqa: E501
        self._expansion_enabled = None
        self._expansion_types = None
        self.discriminator = None
        if expansion_enabled is not None:
            self.expansion_enabled = expansion_enabled
        if expansion_types is not None:
            self.expansion_types = expansion_types

    @property
    def expansion_enabled(self):
        """Gets the expansion_enabled of this adgroupcreateTargetingExpansion.  # noqa: E501

        Whether to enable targeting expansion  # noqa: E501

        :return: The expansion_enabled of this adgroupcreateTargetingExpansion.  # noqa: E501
        :rtype: bool
        """
        return self._expansion_enabled

    @expansion_enabled.setter
    def expansion_enabled(self, expansion_enabled):
        """Sets the expansion_enabled of this adgroupcreateTargetingExpansion.

        Whether to enable targeting expansion  # noqa: E501

        :param expansion_enabled: The expansion_enabled of this adgroupcreateTargetingExpansion.  # noqa: E501
        :type: bool
        """

        self._expansion_enabled = expansion_enabled

    @property
    def expansion_types(self):
        """Gets the expansion_types of this adgroupcreateTargetingExpansion.  # noqa: E501

        The target audience types that you want to expand. Required when `expansion_enabled` is `true`. Target audience types that are eligible for expanding must already have a value or selection. Enum values- `AGE``GENDER``INTEREST_AND_BEHAVIOR`- This type includes `ad_tag_v2`, `video_action`,  `action_categories`, and `action_scene`. `CUSTOM_AUDIENCE`- This type includes `retargeting_tags` and `retargeting_tags_exclude`.  # noqa: E501

        :return: The expansion_types of this adgroupcreateTargetingExpansion.  # noqa: E501
        :rtype: list[str]
        """
        return self._expansion_types

    @expansion_types.setter
    def expansion_types(self, expansion_types):
        """Sets the expansion_types of this adgroupcreateTargetingExpansion.

        The target audience types that you want to expand. Required when `expansion_enabled` is `true`. Target audience types that are eligible for expanding must already have a value or selection. Enum values- `AGE``GENDER``INTEREST_AND_BEHAVIOR`- This type includes `ad_tag_v2`, `video_action`,  `action_categories`, and `action_scene`. `CUSTOM_AUDIENCE`- This type includes `retargeting_tags` and `retargeting_tags_exclude`.  # noqa: E501

        :param expansion_types: The expansion_types of this adgroupcreateTargetingExpansion.  # noqa: E501
        :type: list[str]
        """

        self._expansion_types = expansion_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(adgroupcreateTargetingExpansion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, adgroupcreateTargetingExpansion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
