# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class EventCreateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'pixel_events': 'list[PixeleventcreatePixelEvents]',
        'pixel_id': 'str'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'pixel_events': 'pixel_events',
        'pixel_id': 'pixel_id'
    }

    def __init__(self, advertiser_id=None, pixel_events=None, pixel_id=None):  # noqa: E501
        """EventCreateBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._pixel_events = None
        self._pixel_id = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        self.pixel_events = pixel_events
        self.pixel_id = pixel_id

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this EventCreateBody.  # noqa: E501


        :return: The advertiser_id of this EventCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this EventCreateBody.


        :param advertiser_id: The advertiser_id of this EventCreateBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def pixel_events(self):
        """Gets the pixel_events of this EventCreateBody.  # noqa: E501


        :return: The pixel_events of this EventCreateBody.  # noqa: E501
        :rtype: list[PixeleventcreatePixelEvents]
        """
        return self._pixel_events

    @pixel_events.setter
    def pixel_events(self, pixel_events):
        """Sets the pixel_events of this EventCreateBody.


        :param pixel_events: The pixel_events of this EventCreateBody.  # noqa: E501
        :type: list[PixeleventcreatePixelEvents]
        """
        if pixel_events is None:
            raise ValueError("Invalid value for `pixel_events`, must not be `None`")  # noqa: E501

        self._pixel_events = pixel_events

    @property
    def pixel_id(self):
        """Gets the pixel_id of this EventCreateBody.  # noqa: E501


        :return: The pixel_id of this EventCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._pixel_id

    @pixel_id.setter
    def pixel_id(self, pixel_id):
        """Sets the pixel_id of this EventCreateBody.


        :param pixel_id: The pixel_id of this EventCreateBody.  # noqa: E501
        :type: str
        """
        if pixel_id is None:
            raise ValueError("Invalid value for `pixel_id`, must not be `None`")  # noqa: E501

        self._pixel_id = pixel_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventCreateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventCreateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
