# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class PixelCreateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'partner_name': 'str',
        'pixel_category': 'str',
        'pixel_name': 'str'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'partner_name': 'partner_name',
        'pixel_category': 'pixel_category',
        'pixel_name': 'pixel_name'
    }

    def __init__(self, advertiser_id=None, partner_name=None, pixel_category=None, pixel_name=None):  # noqa: E501
        """PixelCreateBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._partner_name = None
        self._pixel_category = None
        self._pixel_name = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        if partner_name is not None:
            self.partner_name = partner_name
        if pixel_category is not None:
            self.pixel_category = pixel_category
        self.pixel_name = pixel_name

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this PixelCreateBody.  # noqa: E501


        :return: The advertiser_id of this PixelCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this PixelCreateBody.


        :param advertiser_id: The advertiser_id of this PixelCreateBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def partner_name(self):
        """Gets the partner_name of this PixelCreateBody.  # noqa: E501


        :return: The partner_name of this PixelCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._partner_name

    @partner_name.setter
    def partner_name(self, partner_name):
        """Sets the partner_name of this PixelCreateBody.


        :param partner_name: The partner_name of this PixelCreateBody.  # noqa: E501
        :type: str
        """

        self._partner_name = partner_name

    @property
    def pixel_category(self):
        """Gets the pixel_category of this PixelCreateBody.  # noqa: E501


        :return: The pixel_category of this PixelCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._pixel_category

    @pixel_category.setter
    def pixel_category(self, pixel_category):
        """Sets the pixel_category of this PixelCreateBody.


        :param pixel_category: The pixel_category of this PixelCreateBody.  # noqa: E501
        :type: str
        """

        self._pixel_category = pixel_category

    @property
    def pixel_name(self):
        """Gets the pixel_name of this PixelCreateBody.  # noqa: E501


        :return: The pixel_name of this PixelCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._pixel_name

    @pixel_name.setter
    def pixel_name(self, pixel_name):
        """Sets the pixel_name of this PixelCreateBody.


        :param pixel_name: The pixel_name of this PixelCreateBody.  # noqa: E501
        :type: str
        """
        if pixel_name is None:
            raise ValueError("Invalid value for `pixel_name`, must not be `None`")  # noqa: E501

        self._pixel_name = pixel_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PixelCreateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PixelCreateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
