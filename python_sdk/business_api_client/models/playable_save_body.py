# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class PlayableSaveBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'playable_id': 'str',
        'playable_name': 'str'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'playable_id': 'playable_id',
        'playable_name': 'playable_name'
    }

    def __init__(self, advertiser_id=None, playable_id=None, playable_name=None):  # noqa: E501
        """PlayableSaveBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._playable_id = None
        self._playable_name = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        self.playable_id = playable_id
        self.playable_name = playable_name

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this PlayableSaveBody.  # noqa: E501


        :return: The advertiser_id of this PlayableSaveBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this PlayableSaveBody.


        :param advertiser_id: The advertiser_id of this PlayableSaveBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def playable_id(self):
        """Gets the playable_id of this PlayableSaveBody.  # noqa: E501


        :return: The playable_id of this PlayableSaveBody.  # noqa: E501
        :rtype: str
        """
        return self._playable_id

    @playable_id.setter
    def playable_id(self, playable_id):
        """Sets the playable_id of this PlayableSaveBody.


        :param playable_id: The playable_id of this PlayableSaveBody.  # noqa: E501
        :type: str
        """
        if playable_id is None:
            raise ValueError("Invalid value for `playable_id`, must not be `None`")  # noqa: E501

        self._playable_id = playable_id

    @property
    def playable_name(self):
        """Gets the playable_name of this PlayableSaveBody.  # noqa: E501


        :return: The playable_name of this PlayableSaveBody.  # noqa: E501
        :rtype: str
        """
        return self._playable_name

    @playable_name.setter
    def playable_name(self, playable_name):
        """Sets the playable_name of this PlayableSaveBody.


        :param playable_name: The playable_name of this PlayableSaveBody.  # noqa: E501
        :type: str
        """
        if playable_name is None:
            raise ValueError("Invalid value for `playable_name`, must not be `None`")  # noqa: E501

        self._playable_name = playable_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayableSaveBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayableSaveBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
