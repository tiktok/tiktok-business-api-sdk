# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class CustomAudienceApplyBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_mode': 'str',
        'adgroup_ids': 'list[str]',
        'advertiser_id': 'str',
        'context_info': 'OpenApiv13dmpcustomAudienceapplyContextInfo',
        'custom_audience_id': 'str',
        'usage_mode': 'str'
    }

    attribute_map = {
        'action_mode': 'action_mode',
        'adgroup_ids': 'adgroup_ids',
        'advertiser_id': 'advertiser_id',
        'context_info': 'context_info',
        'custom_audience_id': 'custom_audience_id',
        'usage_mode': 'usage_mode'
    }

    def __init__(self, action_mode=None, adgroup_ids=None, advertiser_id=None, context_info=None, custom_audience_id=None, usage_mode=None):  # noqa: E501
        """CustomAudienceApplyBody - a model defined in Swagger"""  # noqa: E501
        self._action_mode = None
        self._adgroup_ids = None
        self._advertiser_id = None
        self._context_info = None
        self._custom_audience_id = None
        self._usage_mode = None
        self.discriminator = None
        self.action_mode = action_mode
        self.adgroup_ids = adgroup_ids
        self.advertiser_id = advertiser_id
        if context_info is not None:
            self.context_info = context_info
        self.custom_audience_id = custom_audience_id
        if usage_mode is not None:
            self.usage_mode = usage_mode

    @property
    def action_mode(self):
        """Gets the action_mode of this CustomAudienceApplyBody.  # noqa: E501

        Specific operation to be performed on the audience. Enum values: Apply, Disconnect.  # noqa: E501

        :return: The action_mode of this CustomAudienceApplyBody.  # noqa: E501
        :rtype: str
        """
        return self._action_mode

    @action_mode.setter
    def action_mode(self, action_mode):
        """Sets the action_mode of this CustomAudienceApplyBody.

        Specific operation to be performed on the audience. Enum values: Apply, Disconnect.  # noqa: E501

        :param action_mode: The action_mode of this CustomAudienceApplyBody.  # noqa: E501
        :type: str
        """
        if action_mode is None:
            raise ValueError("Invalid value for `action_mode`, must not be `None`")  # noqa: E501

        self._action_mode = action_mode

    @property
    def adgroup_ids(self):
        """Gets the adgroup_ids of this CustomAudienceApplyBody.  # noqa: E501

        A list of ad group IDs. Note: adgroup_ids and custom_audience_id should be under the same advertiser account. Otherwise, an error will occur. Lookalike Audience cannot be used in Reach & Frequency ads. Otherwise, an error will occur. See below for more details. 1. If the custom_audience_id is a Lookalike Audience and the adgroup_ids are Reach & Frequency ad groups, an error will occur. 2. If the custom_audience_id is a Lookalike Audience with the REACH_FREQUENCY audience subtype, an error will occur.  # noqa: E501

        :return: The adgroup_ids of this CustomAudienceApplyBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._adgroup_ids

    @adgroup_ids.setter
    def adgroup_ids(self, adgroup_ids):
        """Sets the adgroup_ids of this CustomAudienceApplyBody.

        A list of ad group IDs. Note: adgroup_ids and custom_audience_id should be under the same advertiser account. Otherwise, an error will occur. Lookalike Audience cannot be used in Reach & Frequency ads. Otherwise, an error will occur. See below for more details. 1. If the custom_audience_id is a Lookalike Audience and the adgroup_ids are Reach & Frequency ad groups, an error will occur. 2. If the custom_audience_id is a Lookalike Audience with the REACH_FREQUENCY audience subtype, an error will occur.  # noqa: E501

        :param adgroup_ids: The adgroup_ids of this CustomAudienceApplyBody.  # noqa: E501
        :type: list[str]
        """
        if adgroup_ids is None:
            raise ValueError("Invalid value for `adgroup_ids`, must not be `None`")  # noqa: E501

        self._adgroup_ids = adgroup_ids

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this CustomAudienceApplyBody.  # noqa: E501

        Advertiser ID.  # noqa: E501

        :return: The advertiser_id of this CustomAudienceApplyBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this CustomAudienceApplyBody.

        Advertiser ID.  # noqa: E501

        :param advertiser_id: The advertiser_id of this CustomAudienceApplyBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def context_info(self):
        """Gets the context_info of this CustomAudienceApplyBody.  # noqa: E501


        :return: The context_info of this CustomAudienceApplyBody.  # noqa: E501
        :rtype: OpenApiv13dmpcustomAudienceapplyContextInfo
        """
        return self._context_info

    @context_info.setter
    def context_info(self, context_info):
        """Sets the context_info of this CustomAudienceApplyBody.


        :param context_info: The context_info of this CustomAudienceApplyBody.  # noqa: E501
        :type: OpenApiv13dmpcustomAudienceapplyContextInfo
        """

        self._context_info = context_info

    @property
    def custom_audience_id(self):
        """Gets the custom_audience_id of this CustomAudienceApplyBody.  # noqa: E501

        Custom audience ID. You can only pass one custom audience ID.  # noqa: E501

        :return: The custom_audience_id of this CustomAudienceApplyBody.  # noqa: E501
        :rtype: str
        """
        return self._custom_audience_id

    @custom_audience_id.setter
    def custom_audience_id(self, custom_audience_id):
        """Sets the custom_audience_id of this CustomAudienceApplyBody.

        Custom audience ID. You can only pass one custom audience ID.  # noqa: E501

        :param custom_audience_id: The custom_audience_id of this CustomAudienceApplyBody.  # noqa: E501
        :type: str
        """
        if custom_audience_id is None:
            raise ValueError("Invalid value for `custom_audience_id`, must not be `None`")  # noqa: E501

        self._custom_audience_id = custom_audience_id

    @property
    def usage_mode(self):
        """Gets the usage_mode of this CustomAudienceApplyBody.  # noqa: E501

        Whether to include this audience in or exclude it from your ad groups. Required when action_mode is Apply. Enum values: Include, Exclude.  # noqa: E501

        :return: The usage_mode of this CustomAudienceApplyBody.  # noqa: E501
        :rtype: str
        """
        return self._usage_mode

    @usage_mode.setter
    def usage_mode(self, usage_mode):
        """Sets the usage_mode of this CustomAudienceApplyBody.

        Whether to include this audience in or exclude it from your ad groups. Required when action_mode is Apply. Enum values: Include, Exclude.  # noqa: E501

        :param usage_mode: The usage_mode of this CustomAudienceApplyBody.  # noqa: E501
        :type: str
        """

        self._usage_mode = usage_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomAudienceApplyBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomAudienceApplyBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
