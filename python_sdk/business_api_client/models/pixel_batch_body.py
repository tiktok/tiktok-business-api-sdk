# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class PixelBatchBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch': 'list[pixelbatchBatch]',
        'pixel_code': 'str'
    }

    attribute_map = {
        'batch': 'batch',
        'pixel_code': 'pixel_code'
    }

    def __init__(self, batch=None, pixel_code=None):  # noqa: E501
        """PixelBatchBody - a model defined in Swagger"""  # noqa: E501
        self._batch = None
        self._pixel_code = None
        self.discriminator = None
        self.batch = batch
        self.pixel_code = pixel_code

    @property
    def batch(self):
        """Gets the batch of this PixelBatchBody.  # noqa: E501

        A list of web events  # noqa: E501

        :return: The batch of this PixelBatchBody.  # noqa: E501
        :rtype: list[pixelbatchBatch]
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this PixelBatchBody.

        A list of web events  # noqa: E501

        :param batch: The batch of this PixelBatchBody.  # noqa: E501
        :type: list[pixelbatchBatch]
        """
        if batch is None:
            raise ValueError("Invalid value for `batch`, must not be `None`")  # noqa: E501

        self._batch = batch

    @property
    def pixel_code(self):
        """Gets the pixel_code of this PixelBatchBody.  # noqa: E501

        Pixel ID that can be found in events manager of the TikTok ads platform. For details, see the [Where to Find pixel_code](https://ads.tiktok.com/marketing_api/docs?id=1739584855420929) section  # noqa: E501

        :return: The pixel_code of this PixelBatchBody.  # noqa: E501
        :rtype: str
        """
        return self._pixel_code

    @pixel_code.setter
    def pixel_code(self, pixel_code):
        """Sets the pixel_code of this PixelBatchBody.

        Pixel ID that can be found in events manager of the TikTok ads platform. For details, see the [Where to Find pixel_code](https://ads.tiktok.com/marketing_api/docs?id=1739584855420929) section  # noqa: E501

        :param pixel_code: The pixel_code of this PixelBatchBody.  # noqa: E501
        :type: str
        """
        if pixel_code is None:
            raise ValueError("Invalid value for `pixel_code`, must not be `None`")  # noqa: E501

        self._pixel_code = pixel_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PixelBatchBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PixelBatchBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
