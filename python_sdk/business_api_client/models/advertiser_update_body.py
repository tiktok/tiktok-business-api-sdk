# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class AdvertiserUpdateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'advertiser_id': 'str',
        'advertiser_name': 'str',
        'company': 'str',
        'contact_email': 'str',
        'contact_name': 'str',
        'contact_number': 'str',
        'license_image_id': 'str',
        'license_no': 'str',
        'need_submit_certificate': 'bool',
        'promotion_link': 'str',
        'qualification_images': 'advertiserupdateQualificationImages',
        'tax_map': 'str'
    }

    attribute_map = {
        'address': 'address',
        'advertiser_id': 'advertiser_id',
        'advertiser_name': 'advertiser_name',
        'company': 'company',
        'contact_email': 'contact_email',
        'contact_name': 'contact_name',
        'contact_number': 'contact_number',
        'license_image_id': 'license_image_id',
        'license_no': 'license_no',
        'need_submit_certificate': 'need_submit_certificate',
        'promotion_link': 'promotion_link',
        'qualification_images': 'qualification_images',
        'tax_map': 'tax_map'
    }

    def __init__(self, address=None, advertiser_id=None, advertiser_name=None, company=None, contact_email=None, contact_name=None, contact_number=None, license_image_id=None, license_no=None, need_submit_certificate=None, promotion_link=None, qualification_images=None, tax_map=None):  # noqa: E501
        """AdvertiserUpdateBody - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._advertiser_id = None
        self._advertiser_name = None
        self._company = None
        self._contact_email = None
        self._contact_name = None
        self._contact_number = None
        self._license_image_id = None
        self._license_no = None
        self._need_submit_certificate = None
        self._promotion_link = None
        self._qualification_images = None
        self._tax_map = None
        self.discriminator = None
        if address is not None:
            self.address = address
        self.advertiser_id = advertiser_id
        if advertiser_name is not None:
            self.advertiser_name = advertiser_name
        if company is not None:
            self.company = company
        if contact_email is not None:
            self.contact_email = contact_email
        if contact_name is not None:
            self.contact_name = contact_name
        if contact_number is not None:
            self.contact_number = contact_number
        if license_image_id is not None:
            self.license_image_id = license_image_id
        if license_no is not None:
            self.license_no = license_no
        if need_submit_certificate is not None:
            self.need_submit_certificate = need_submit_certificate
        if promotion_link is not None:
            self.promotion_link = promotion_link
        if qualification_images is not None:
            self.qualification_images = qualification_images
        if tax_map is not None:
            self.tax_map = tax_map

    @property
    def address(self):
        """Gets the address of this AdvertiserUpdateBody.  # noqa: E501

        Business address that is shown on receipts  # noqa: E501

        :return: The address of this AdvertiserUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AdvertiserUpdateBody.

        Business address that is shown on receipts  # noqa: E501

        :param address: The address of this AdvertiserUpdateBody.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this AdvertiserUpdateBody.  # noqa: E501

        Ad account ID  # noqa: E501

        :return: The advertiser_id of this AdvertiserUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this AdvertiserUpdateBody.

        Ad account ID  # noqa: E501

        :param advertiser_id: The advertiser_id of this AdvertiserUpdateBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def advertiser_name(self):
        """Gets the advertiser_name of this AdvertiserUpdateBody.  # noqa: E501

        Ad account name  # noqa: E501

        :return: The advertiser_name of this AdvertiserUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_name

    @advertiser_name.setter
    def advertiser_name(self, advertiser_name):
        """Sets the advertiser_name of this AdvertiserUpdateBody.

        Ad account name  # noqa: E501

        :param advertiser_name: The advertiser_name of this AdvertiserUpdateBody.  # noqa: E501
        :type: str
        """

        self._advertiser_name = advertiser_name

    @property
    def company(self):
        """Gets the company of this AdvertiserUpdateBody.  # noqa: E501

        Company name  # noqa: E501

        :return: The company of this AdvertiserUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this AdvertiserUpdateBody.

        Company name  # noqa: E501

        :param company: The company of this AdvertiserUpdateBody.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def contact_email(self):
        """Gets the contact_email of this AdvertiserUpdateBody.  # noqa: E501

        Contact email  # noqa: E501

        :return: The contact_email of this AdvertiserUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this AdvertiserUpdateBody.

        Contact email  # noqa: E501

        :param contact_email: The contact_email of this AdvertiserUpdateBody.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def contact_name(self):
        """Gets the contact_name of this AdvertiserUpdateBody.  # noqa: E501

        Name of the contact person  # noqa: E501

        :return: The contact_name of this AdvertiserUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this AdvertiserUpdateBody.

        Name of the contact person  # noqa: E501

        :param contact_name: The contact_name of this AdvertiserUpdateBody.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def contact_number(self):
        """Gets the contact_number of this AdvertiserUpdateBody.  # noqa: E501

        Contact phone number  # noqa: E501

        :return: The contact_number of this AdvertiserUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._contact_number

    @contact_number.setter
    def contact_number(self, contact_number):
        """Sets the contact_number of this AdvertiserUpdateBody.

        Contact phone number  # noqa: E501

        :param contact_number: The contact_number of this AdvertiserUpdateBody.  # noqa: E501
        :type: str
        """

        self._contact_number = contact_number

    @property
    def license_image_id(self):
        """Gets the license_image_id of this AdvertiserUpdateBody.  # noqa: E501

        Image ID (`image_id`) of the business license  # noqa: E501

        :return: The license_image_id of this AdvertiserUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._license_image_id

    @license_image_id.setter
    def license_image_id(self, license_image_id):
        """Sets the license_image_id of this AdvertiserUpdateBody.

        Image ID (`image_id`) of the business license  # noqa: E501

        :param license_image_id: The license_image_id of this AdvertiserUpdateBody.  # noqa: E501
        :type: str
        """

        self._license_image_id = license_image_id

    @property
    def license_no(self):
        """Gets the license_no of this AdvertiserUpdateBody.  # noqa: E501

        Business license number. This is required for ad accounts that are registered in the Chinese mainland, Hong Kong, or in countries Brazil and Mexico  # noqa: E501

        :return: The license_no of this AdvertiserUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._license_no

    @license_no.setter
    def license_no(self, license_no):
        """Sets the license_no of this AdvertiserUpdateBody.

        Business license number. This is required for ad accounts that are registered in the Chinese mainland, Hong Kong, or in countries Brazil and Mexico  # noqa: E501

        :param license_no: The license_no of this AdvertiserUpdateBody.  # noqa: E501
        :type: str
        """

        self._license_no = license_no

    @property
    def need_submit_certificate(self):
        """Gets the need_submit_certificate of this AdvertiserUpdateBody.  # noqa: E501

        Whether you want to submit the new certificate images for review  # noqa: E501

        :return: The need_submit_certificate of this AdvertiserUpdateBody.  # noqa: E501
        :rtype: bool
        """
        return self._need_submit_certificate

    @need_submit_certificate.setter
    def need_submit_certificate(self, need_submit_certificate):
        """Sets the need_submit_certificate of this AdvertiserUpdateBody.

        Whether you want to submit the new certificate images for review  # noqa: E501

        :param need_submit_certificate: The need_submit_certificate of this AdvertiserUpdateBody.  # noqa: E501
        :type: bool
        """

        self._need_submit_certificate = need_submit_certificate

    @property
    def promotion_link(self):
        """Gets the promotion_link of this AdvertiserUpdateBody.  # noqa: E501

        Promotion link. Length cannot exceed 255 characters  # noqa: E501

        :return: The promotion_link of this AdvertiserUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._promotion_link

    @promotion_link.setter
    def promotion_link(self, promotion_link):
        """Sets the promotion_link of this AdvertiserUpdateBody.

        Promotion link. Length cannot exceed 255 characters  # noqa: E501

        :param promotion_link: The promotion_link of this AdvertiserUpdateBody.  # noqa: E501
        :type: str
        """

        self._promotion_link = promotion_link

    @property
    def qualification_images(self):
        """Gets the qualification_images of this AdvertiserUpdateBody.  # noqa: E501


        :return: The qualification_images of this AdvertiserUpdateBody.  # noqa: E501
        :rtype: advertiserupdateQualificationImages
        """
        return self._qualification_images

    @qualification_images.setter
    def qualification_images(self, qualification_images):
        """Sets the qualification_images of this AdvertiserUpdateBody.


        :param qualification_images: The qualification_images of this AdvertiserUpdateBody.  # noqa: E501
        :type: advertiserupdateQualificationImages
        """

        self._qualification_images = qualification_images

    @property
    def tax_map(self):
        """Gets the tax_map of this AdvertiserUpdateBody.  # noqa: E501

        Billing and invoicing tax number. Different countries use different tax number fields. France uses `vat`, and Brazil uses `tax_id`  # noqa: E501

        :return: The tax_map of this AdvertiserUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._tax_map

    @tax_map.setter
    def tax_map(self, tax_map):
        """Sets the tax_map of this AdvertiserUpdateBody.

        Billing and invoicing tax number. Different countries use different tax number fields. France uses `vat`, and Brazil uses `tax_id`  # noqa: E501

        :param tax_map: The tax_map of this AdvertiserUpdateBody.  # noqa: E501
        :type: str
        """

        self._tax_map = tax_map

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdvertiserUpdateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvertiserUpdateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
