# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class ShareableLinkCreateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shared_assets': 'list[CreativeshareableLinkcreateSharedAssets]',
        'sharer': 'str'
    }

    attribute_map = {
        'shared_assets': 'shared_assets',
        'sharer': 'sharer'
    }

    def __init__(self, shared_assets=None, sharer=None):  # noqa: E501
        """ShareableLinkCreateBody - a model defined in Swagger"""  # noqa: E501
        self._shared_assets = None
        self._sharer = None
        self.discriminator = None
        self.shared_assets = shared_assets
        self.sharer = sharer

    @property
    def shared_assets(self):
        """Gets the shared_assets of this ShareableLinkCreateBody.  # noqa: E501


        :return: The shared_assets of this ShareableLinkCreateBody.  # noqa: E501
        :rtype: list[CreativeshareableLinkcreateSharedAssets]
        """
        return self._shared_assets

    @shared_assets.setter
    def shared_assets(self, shared_assets):
        """Sets the shared_assets of this ShareableLinkCreateBody.


        :param shared_assets: The shared_assets of this ShareableLinkCreateBody.  # noqa: E501
        :type: list[CreativeshareableLinkcreateSharedAssets]
        """
        if shared_assets is None:
            raise ValueError("Invalid value for `shared_assets`, must not be `None`")  # noqa: E501

        self._shared_assets = shared_assets

    @property
    def sharer(self):
        """Gets the sharer of this ShareableLinkCreateBody.  # noqa: E501


        :return: The sharer of this ShareableLinkCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._sharer

    @sharer.setter
    def sharer(self, sharer):
        """Sets the sharer of this ShareableLinkCreateBody.


        :param sharer: The sharer of this ShareableLinkCreateBody.  # noqa: E501
        :type: str
        """
        if sharer is None:
            raise ValueError("Invalid value for `sharer`, must not be `None`")  # noqa: E501

        self._sharer = sharer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShareableLinkCreateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShareableLinkCreateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
