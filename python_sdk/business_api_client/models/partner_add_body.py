# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class PartnerAddBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_role': 'str',
        'asset_ids': 'list[str]',
        'asset_type': 'str',
        'bc_id': 'str',
        'catalog_role': 'str',
        'partner_id': 'str',
        'source_child_bc_id': 'str',
        'target_child_bc_id': 'str'
    }

    attribute_map = {
        'advertiser_role': 'advertiser_role',
        'asset_ids': 'asset_ids',
        'asset_type': 'asset_type',
        'bc_id': 'bc_id',
        'catalog_role': 'catalog_role',
        'partner_id': 'partner_id',
        'source_child_bc_id': 'source_child_bc_id',
        'target_child_bc_id': 'target_child_bc_id'
    }

    def __init__(self, advertiser_role='ANALYST', asset_ids=None, asset_type=None, bc_id=None, catalog_role='AD_PROMOTE', partner_id=None, source_child_bc_id=None, target_child_bc_id=None):  # noqa: E501
        """PartnerAddBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_role = None
        self._asset_ids = None
        self._asset_type = None
        self._bc_id = None
        self._catalog_role = None
        self._partner_id = None
        self._source_child_bc_id = None
        self._target_child_bc_id = None
        self.discriminator = None
        if advertiser_role is not None:
            self.advertiser_role = advertiser_role
        if asset_ids is not None:
            self.asset_ids = asset_ids
        self.asset_type = asset_type
        self.bc_id = bc_id
        if catalog_role is not None:
            self.catalog_role = catalog_role
        if partner_id is not None:
            self.partner_id = partner_id
        if source_child_bc_id is not None:
            self.source_child_bc_id = source_child_bc_id
        if target_child_bc_id is not None:
            self.target_child_bc_id = target_child_bc_id

    @property
    def advertiser_role(self):
        """Gets the advertiser_role of this PartnerAddBody.  # noqa: E501


        :return: The advertiser_role of this PartnerAddBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_role

    @advertiser_role.setter
    def advertiser_role(self, advertiser_role):
        """Sets the advertiser_role of this PartnerAddBody.


        :param advertiser_role: The advertiser_role of this PartnerAddBody.  # noqa: E501
        :type: str
        """

        self._advertiser_role = advertiser_role

    @property
    def asset_ids(self):
        """Gets the asset_ids of this PartnerAddBody.  # noqa: E501


        :return: The asset_ids of this PartnerAddBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._asset_ids

    @asset_ids.setter
    def asset_ids(self, asset_ids):
        """Sets the asset_ids of this PartnerAddBody.


        :param asset_ids: The asset_ids of this PartnerAddBody.  # noqa: E501
        :type: list[str]
        """

        self._asset_ids = asset_ids

    @property
    def asset_type(self):
        """Gets the asset_type of this PartnerAddBody.  # noqa: E501


        :return: The asset_type of this PartnerAddBody.  # noqa: E501
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this PartnerAddBody.


        :param asset_type: The asset_type of this PartnerAddBody.  # noqa: E501
        :type: str
        """
        if asset_type is None:
            raise ValueError("Invalid value for `asset_type`, must not be `None`")  # noqa: E501

        self._asset_type = asset_type

    @property
    def bc_id(self):
        """Gets the bc_id of this PartnerAddBody.  # noqa: E501


        :return: The bc_id of this PartnerAddBody.  # noqa: E501
        :rtype: str
        """
        return self._bc_id

    @bc_id.setter
    def bc_id(self, bc_id):
        """Sets the bc_id of this PartnerAddBody.


        :param bc_id: The bc_id of this PartnerAddBody.  # noqa: E501
        :type: str
        """
        if bc_id is None:
            raise ValueError("Invalid value for `bc_id`, must not be `None`")  # noqa: E501

        self._bc_id = bc_id

    @property
    def catalog_role(self):
        """Gets the catalog_role of this PartnerAddBody.  # noqa: E501


        :return: The catalog_role of this PartnerAddBody.  # noqa: E501
        :rtype: str
        """
        return self._catalog_role

    @catalog_role.setter
    def catalog_role(self, catalog_role):
        """Sets the catalog_role of this PartnerAddBody.


        :param catalog_role: The catalog_role of this PartnerAddBody.  # noqa: E501
        :type: str
        """

        self._catalog_role = catalog_role

    @property
    def partner_id(self):
        """Gets the partner_id of this PartnerAddBody.  # noqa: E501


        :return: The partner_id of this PartnerAddBody.  # noqa: E501
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this PartnerAddBody.


        :param partner_id: The partner_id of this PartnerAddBody.  # noqa: E501
        :type: str
        """

        self._partner_id = partner_id

    @property
    def source_child_bc_id(self):
        """Gets the source_child_bc_id of this PartnerAddBody.  # noqa: E501


        :return: The source_child_bc_id of this PartnerAddBody.  # noqa: E501
        :rtype: str
        """
        return self._source_child_bc_id

    @source_child_bc_id.setter
    def source_child_bc_id(self, source_child_bc_id):
        """Sets the source_child_bc_id of this PartnerAddBody.


        :param source_child_bc_id: The source_child_bc_id of this PartnerAddBody.  # noqa: E501
        :type: str
        """

        self._source_child_bc_id = source_child_bc_id

    @property
    def target_child_bc_id(self):
        """Gets the target_child_bc_id of this PartnerAddBody.  # noqa: E501


        :return: The target_child_bc_id of this PartnerAddBody.  # noqa: E501
        :rtype: str
        """
        return self._target_child_bc_id

    @target_child_bc_id.setter
    def target_child_bc_id(self, target_child_bc_id):
        """Sets the target_child_bc_id of this PartnerAddBody.


        :param target_child_bc_id: The target_child_bc_id of this PartnerAddBody.  # noqa: E501
        :type: str
        """

        self._target_child_bc_id = target_child_bc_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartnerAddBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartnerAddBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
