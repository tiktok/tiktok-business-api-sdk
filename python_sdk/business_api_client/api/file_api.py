# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from business_api_client.api_client import ApiClient


class FileApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def ad_image_upload(self, access_token, **kwargs):  # noqa: E501
        """The function is used to  to upload pictures to the Asset Library and use the obtained image ID for creating ads. [File image Upload](https://ads.tiktok.com/marketing_api/docs?id=1739067433456642)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ad_image_upload(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param str advertiser_id:
        :param str file_id:
        :param str file_name:
        :param str image_file:
        :param str image_signature:
        :param str image_url:
        :param str upload_type:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ad_image_upload_with_http_info(access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.ad_image_upload_with_http_info(access_token, **kwargs)  # noqa: E501
            return data

    def ad_image_upload_with_http_info(self, access_token, **kwargs):  # noqa: E501
        """The function is used to  to upload pictures to the Asset Library and use the obtained image ID for creating ads. [File image Upload](https://ads.tiktok.com/marketing_api/docs?id=1739067433456642)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ad_image_upload_with_http_info(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param str advertiser_id:
        :param str file_id:
        :param str file_name:
        :param str image_file:
        :param str image_signature:
        :param str image_url:
        :param str upload_type:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'advertiser_id', 'file_id', 'file_name', 'image_file', 'image_signature', 'image_url', 'upload_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ad_image_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `ad_image_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'advertiser_id' in params:
            form_params.append(('advertiser_id', params['advertiser_id']))  # noqa: E501
        if 'file_id' in params:
            form_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'file_name' in params:
            form_params.append(('file_name', params['file_name']))  # noqa: E501
        if 'image_file' in params:
            local_var_files['image_file'] = params['image_file']  # noqa: E501
        if 'image_signature' in params:
            form_params.append(('image_signature', params['image_signature']))  # noqa: E501
        if 'image_url' in params:
            form_params.append(('image_url', params['image_url']))  # noqa: E501
        if 'upload_type' in params:
            form_params.append(('upload_type', params['upload_type']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/file/image/ad/upload/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ad_video_info(self, advertiser_id, video_ids, access_token, **kwargs):  # noqa: E501
        """The function is used to get the information about a list of videos [File Video Ad Info](https://ads.tiktok.com/marketing_api/docs?id=1740050161973250) from the Asset Library.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ad_video_info(advertiser_id, video_ids, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str advertiser_id: Advertiser ID. (required)
        :param list[str] video_ids: Video ID list. Up to 60 IDs per request. (required)
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ad_video_info_with_http_info(advertiser_id, video_ids, access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.ad_video_info_with_http_info(advertiser_id, video_ids, access_token, **kwargs)  # noqa: E501
            return data

    def ad_video_info_with_http_info(self, advertiser_id, video_ids, access_token, **kwargs):  # noqa: E501
        """The function is used to get the information about a list of videos [File Video Ad Info](https://ads.tiktok.com/marketing_api/docs?id=1740050161973250) from the Asset Library.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ad_video_info_with_http_info(advertiser_id, video_ids, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str advertiser_id: Advertiser ID. (required)
        :param list[str] video_ids: Video ID list. Up to 60 IDs per request. (required)
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['advertiser_id', 'video_ids', 'access_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ad_video_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'advertiser_id' is set
        if ('advertiser_id' not in params or
                params['advertiser_id'] is None):
            raise ValueError("Missing the required parameter `advertiser_id` when calling `ad_video_info`")  # noqa: E501
        # verify the required parameter 'video_ids' is set
        if ('video_ids' not in params or
                params['video_ids'] is None):
            raise ValueError("Missing the required parameter `video_ids` when calling `ad_video_info`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `ad_video_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'advertiser_id' in params:
            query_params.append(('advertiser_id', params['advertiser_id']))  # noqa: E501
        if 'video_ids' in params:
            query_params.append(('video_ids', params['video_ids']))  # noqa: E501
            collection_formats['video_ids'] = 'multi'  # noqa: E501

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/file/video/ad/info/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ad_video_search(self, advertiser_id, access_token, **kwargs):  # noqa: E501
        """The function is used to to search for video creatives in the Asset Library of an ad account. [File Video Search](to search for video creatives in the Asset Library of an ad account.) Library.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ad_video_search(advertiser_id, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str advertiser_id: Video ID list. Up to 60 IDs per request. (required)
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param FilteringVideoAdSearch filtering: Filters on the data. This parameter is an array of filter objects.
        :param int page: Current page number. Default value: 1. Value range: ≥ 1.
        :param int page_size: Page size. Default value: 20. Value range: 1-100.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ad_video_search_with_http_info(advertiser_id, access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.ad_video_search_with_http_info(advertiser_id, access_token, **kwargs)  # noqa: E501
            return data

    def ad_video_search_with_http_info(self, advertiser_id, access_token, **kwargs):  # noqa: E501
        """The function is used to to search for video creatives in the Asset Library of an ad account. [File Video Search](to search for video creatives in the Asset Library of an ad account.) Library.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ad_video_search_with_http_info(advertiser_id, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str advertiser_id: Video ID list. Up to 60 IDs per request. (required)
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param FilteringVideoAdSearch filtering: Filters on the data. This parameter is an array of filter objects.
        :param int page: Current page number. Default value: 1. Value range: ≥ 1.
        :param int page_size: Page size. Default value: 20. Value range: 1-100.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['advertiser_id', 'access_token', 'filtering', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ad_video_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'advertiser_id' is set
        if ('advertiser_id' not in params or
                params['advertiser_id'] is None):
            raise ValueError("Missing the required parameter `advertiser_id` when calling `ad_video_search`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `ad_video_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'advertiser_id' in params:
            query_params.append(('advertiser_id', params['advertiser_id']))  # noqa: E501
        if 'filtering' in params:
            query_params.append(('filtering', params['filtering']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/file/video/ad/search/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ad_video_upload(self, access_token, **kwargs):  # noqa: E501
        """The function is used to upload a video to the Asset Library and use the obtained video ID for creating ads. [File Video Upload](https://ads.tiktok.com/marketing_api/docs?id=1737587322856449)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ad_video_upload(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param str advertiser_id:
        :param bool auto_bind_enabled:
        :param bool auto_fix_enabled:
        :param str file_id:
        :param str file_name:
        :param bool flaw_detect:
        :param bool is_third_party:
        :param str upload_type:
        :param str video_file:
        :param str video_id:
        :param str video_signature:
        :param str video_url:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ad_video_upload_with_http_info(access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.ad_video_upload_with_http_info(access_token, **kwargs)  # noqa: E501
            return data

    def ad_video_upload_with_http_info(self, access_token, **kwargs):  # noqa: E501
        """The function is used to upload a video to the Asset Library and use the obtained video ID for creating ads. [File Video Upload](https://ads.tiktok.com/marketing_api/docs?id=1737587322856449)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ad_video_upload_with_http_info(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param str advertiser_id:
        :param bool auto_bind_enabled:
        :param bool auto_fix_enabled:
        :param str file_id:
        :param str file_name:
        :param bool flaw_detect:
        :param bool is_third_party:
        :param str upload_type:
        :param str video_file:
        :param str video_id:
        :param str video_signature:
        :param str video_url:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'advertiser_id', 'auto_bind_enabled', 'auto_fix_enabled', 'file_id', 'file_name', 'flaw_detect', 'is_third_party', 'upload_type', 'video_file', 'video_id', 'video_signature', 'video_url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ad_video_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `ad_video_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'advertiser_id' in params:
            form_params.append(('advertiser_id', params['advertiser_id']))  # noqa: E501
        if 'auto_bind_enabled' in params:
            form_params.append(('auto_bind_enabled', params['auto_bind_enabled']))  # noqa: E501
        if 'auto_fix_enabled' in params:
            form_params.append(('auto_fix_enabled', params['auto_fix_enabled']))  # noqa: E501
        if 'file_id' in params:
            form_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'file_name' in params:
            form_params.append(('file_name', params['file_name']))  # noqa: E501
        if 'flaw_detect' in params:
            form_params.append(('flaw_detect', params['flaw_detect']))  # noqa: E501
        if 'is_third_party' in params:
            form_params.append(('is_third_party', params['is_third_party']))  # noqa: E501
        if 'upload_type' in params:
            form_params.append(('upload_type', params['upload_type']))  # noqa: E501
        if 'video_file' in params:
            local_var_files['video_file'] = params['video_file']  # noqa: E501
        if 'video_id' in params:
            form_params.append(('video_id', params['video_id']))  # noqa: E501
        if 'video_signature' in params:
            form_params.append(('video_signature', params['video_signature']))  # noqa: E501
        if 'video_url' in params:
            form_params.append(('video_url', params['video_url']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/file/video/ad/upload/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_image_ad_info(self, advertiser_id, image_ids, access_token, **kwargs):  # noqa: E501
        """Get image information. [File Image Info](https://business-api.tiktok.com/portal/docs?id=1740051721711618)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_image_ad_info(advertiser_id, image_ids, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str advertiser_id: (required)
        :param list[str] image_ids: (required)
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_image_ad_info_with_http_info(advertiser_id, image_ids, access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.file_image_ad_info_with_http_info(advertiser_id, image_ids, access_token, **kwargs)  # noqa: E501
            return data

    def file_image_ad_info_with_http_info(self, advertiser_id, image_ids, access_token, **kwargs):  # noqa: E501
        """Get image information. [File Image Info](https://business-api.tiktok.com/portal/docs?id=1740051721711618)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_image_ad_info_with_http_info(advertiser_id, image_ids, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str advertiser_id: (required)
        :param list[str] image_ids: (required)
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['advertiser_id', 'image_ids', 'access_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_image_ad_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'advertiser_id' is set
        if ('advertiser_id' not in params or
                params['advertiser_id'] is None):
            raise ValueError("Missing the required parameter `advertiser_id` when calling `file_image_ad_info`")  # noqa: E501
        # verify the required parameter 'image_ids' is set
        if ('image_ids' not in params or
                params['image_ids'] is None):
            raise ValueError("Missing the required parameter `image_ids` when calling `file_image_ad_info`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `file_image_ad_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'advertiser_id' in params:
            query_params.append(('advertiser_id', params['advertiser_id']))  # noqa: E501
        if 'image_ids' in params:
            query_params.append(('image_ids', params['image_ids']))  # noqa: E501
            collection_formats['image_ids'] = 'multi'  # noqa: E501

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/file/image/ad/info/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
