# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from business_api_client.api_client import ApiClient


class CreativeManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def creative_asset_delete(self, access_token, **kwargs):  # noqa: E501
        """Delete creative assets. [Asset Delete](https://business-api.tiktok.com/portal/docs?id=1797202997456897)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creative_asset_delete(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param CreativeAssetDeleteBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.creative_asset_delete_with_http_info(access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.creative_asset_delete_with_http_info(access_token, **kwargs)  # noqa: E501
            return data

    def creative_asset_delete_with_http_info(self, access_token, **kwargs):  # noqa: E501
        """Delete creative assets. [Asset Delete](https://business-api.tiktok.com/portal/docs?id=1797202997456897)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creative_asset_delete_with_http_info(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param CreativeAssetDeleteBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method creative_asset_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `creative_asset_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/creative/asset/delete/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def creative_asset_share(self, access_token, **kwargs):  # noqa: E501
        """SShare creative assets with other advertiser accounts. [Asset Share](https://business-api.tiktok.com/portal/docs?id=1773192725768193)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creative_asset_share(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param AssetShareBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.creative_asset_share_with_http_info(access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.creative_asset_share_with_http_info(access_token, **kwargs)  # noqa: E501
            return data

    def creative_asset_share_with_http_info(self, access_token, **kwargs):  # noqa: E501
        """SShare creative assets with other advertiser accounts. [Asset Share](https://business-api.tiktok.com/portal/docs?id=1773192725768193)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creative_asset_share_with_http_info(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param AssetShareBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method creative_asset_share" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `creative_asset_share`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/creative/asset/share/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def creative_image_edit(self, access_token, **kwargs):  # noqa: E501
        """Edit an image according to the size you want as well as apply creative trimmings. [Image Edit](https://business-api.tiktok.com/portal/docs?id=1739067107903489)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creative_image_edit(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param ImageEditBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.creative_image_edit_with_http_info(access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.creative_image_edit_with_http_info(access_token, **kwargs)  # noqa: E501
            return data

    def creative_image_edit_with_http_info(self, access_token, **kwargs):  # noqa: E501
        """Edit an image according to the size you want as well as apply creative trimmings. [Image Edit](https://business-api.tiktok.com/portal/docs?id=1739067107903489)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creative_image_edit_with_http_info(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param ImageEditBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method creative_image_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `creative_image_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/creative/image/edit/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def creative_portfolio_create(self, access_token, **kwargs):  # noqa: E501
        """Create a portfolio. [Creative Portfolie Create](https://business-api.tiktok.com/portal/docs?id=1739091950439426)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creative_portfolio_create(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param PortfolioCreateBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.creative_portfolio_create_with_http_info(access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.creative_portfolio_create_with_http_info(access_token, **kwargs)  # noqa: E501
            return data

    def creative_portfolio_create_with_http_info(self, access_token, **kwargs):  # noqa: E501
        """Create a portfolio. [Creative Portfolie Create](https://business-api.tiktok.com/portal/docs?id=1739091950439426)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creative_portfolio_create_with_http_info(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param PortfolioCreateBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method creative_portfolio_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `creative_portfolio_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/creative/portfolio/create/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def creative_portfolio_get(self, advertiser_id, creative_portfolio_id, access_token, **kwargs):  # noqa: E501
        """Get a portfolio by ID. [Portfolio Get](https://business-api.tiktok.com/portal/docs?id=1739092113671170)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creative_portfolio_get(advertiser_id, creative_portfolio_id, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str advertiser_id: (required)
        :param str creative_portfolio_id: (required)
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.creative_portfolio_get_with_http_info(advertiser_id, creative_portfolio_id, access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.creative_portfolio_get_with_http_info(advertiser_id, creative_portfolio_id, access_token, **kwargs)  # noqa: E501
            return data

    def creative_portfolio_get_with_http_info(self, advertiser_id, creative_portfolio_id, access_token, **kwargs):  # noqa: E501
        """Get a portfolio by ID. [Portfolio Get](https://business-api.tiktok.com/portal/docs?id=1739092113671170)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creative_portfolio_get_with_http_info(advertiser_id, creative_portfolio_id, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str advertiser_id: (required)
        :param str creative_portfolio_id: (required)
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['advertiser_id', 'creative_portfolio_id', 'access_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method creative_portfolio_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'advertiser_id' is set
        if ('advertiser_id' not in params or
                params['advertiser_id'] is None):
            raise ValueError("Missing the required parameter `advertiser_id` when calling `creative_portfolio_get`")  # noqa: E501
        # verify the required parameter 'creative_portfolio_id' is set
        if ('creative_portfolio_id' not in params or
                params['creative_portfolio_id'] is None):
            raise ValueError("Missing the required parameter `creative_portfolio_id` when calling `creative_portfolio_get`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `creative_portfolio_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'advertiser_id' in params:
            query_params.append(('advertiser_id', params['advertiser_id']))  # noqa: E501
        if 'creative_portfolio_id' in params:
            query_params.append(('creative_portfolio_id', params['creative_portfolio_id']))  # noqa: E501

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/creative/portfolio/get/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def creative_portfolio_list(self, advertiser_id, access_token, **kwargs):  # noqa: E501
        """Get portfolios within an ad account. [Portfolio List](https://business-api.tiktok.com/portal/docs?id=1766324010279938)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creative_portfolio_list(advertiser_id, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str advertiser_id: (required)
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param FilteringCreativePortfolioList filtering:
        :param int page:
        :param int page_size:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.creative_portfolio_list_with_http_info(advertiser_id, access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.creative_portfolio_list_with_http_info(advertiser_id, access_token, **kwargs)  # noqa: E501
            return data

    def creative_portfolio_list_with_http_info(self, advertiser_id, access_token, **kwargs):  # noqa: E501
        """Get portfolios within an ad account. [Portfolio List](https://business-api.tiktok.com/portal/docs?id=1766324010279938)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creative_portfolio_list_with_http_info(advertiser_id, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str advertiser_id: (required)
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param FilteringCreativePortfolioList filtering:
        :param int page:
        :param int page_size:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['advertiser_id', 'access_token', 'filtering', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method creative_portfolio_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'advertiser_id' is set
        if ('advertiser_id' not in params or
                params['advertiser_id'] is None):
            raise ValueError("Missing the required parameter `advertiser_id` when calling `creative_portfolio_list`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `creative_portfolio_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'advertiser_id' in params:
            query_params.append(('advertiser_id', params['advertiser_id']))  # noqa: E501
        if 'filtering' in params:
            query_params.append(('filtering', params['filtering']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/creative/portfolio/list/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def creative_shareable_link_create(self, access_token, **kwargs):  # noqa: E501
        """creative_shareable_link_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creative_shareable_link_create(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param ShareableLinkCreateBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.creative_shareable_link_create_with_http_info(access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.creative_shareable_link_create_with_http_info(access_token, **kwargs)  # noqa: E501
            return data

    def creative_shareable_link_create_with_http_info(self, access_token, **kwargs):  # noqa: E501
        """creative_shareable_link_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creative_shareable_link_create_with_http_info(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param ShareableLinkCreateBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method creative_shareable_link_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `creative_shareable_link_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/creative/shareable_link/create/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def creative_smart_text_generate(self, access_token, **kwargs):  # noqa: E501
        """Use smart text. [Smart Text Generate](https://business-api.tiktok.com/portal/docs?id=1739084248002626)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creative_smart_text_generate(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param SmartTextGenerateBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.creative_smart_text_generate_with_http_info(access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.creative_smart_text_generate_with_http_info(access_token, **kwargs)  # noqa: E501
            return data

    def creative_smart_text_generate_with_http_info(self, access_token, **kwargs):  # noqa: E501
        """Use smart text. [Smart Text Generate](https://business-api.tiktok.com/portal/docs?id=1739084248002626)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creative_smart_text_generate_with_http_info(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param SmartTextGenerateBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method creative_smart_text_generate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `creative_smart_text_generate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/creative/smart_text/generate/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def discovery_detail(self, hashtag_id, discovery_type, country_code, date_range, advertiser_id, access_token, **kwargs):  # noqa: E501
        """Get details of a popular hashtag. [Discovery Detail](https://business-api.tiktok.com/portal/docs?id=1825119047070721)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_detail(hashtag_id, discovery_type, country_code, date_range, advertiser_id, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashtag_id: (required)
        :param str discovery_type: (required)
        :param str country_code: (required)
        :param str date_range: (required)
        :param str advertiser_id: (required)
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.discovery_detail_with_http_info(hashtag_id, discovery_type, country_code, date_range, advertiser_id, access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.discovery_detail_with_http_info(hashtag_id, discovery_type, country_code, date_range, advertiser_id, access_token, **kwargs)  # noqa: E501
            return data

    def discovery_detail_with_http_info(self, hashtag_id, discovery_type, country_code, date_range, advertiser_id, access_token, **kwargs):  # noqa: E501
        """Get details of a popular hashtag. [Discovery Detail](https://business-api.tiktok.com/portal/docs?id=1825119047070721)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_detail_with_http_info(hashtag_id, discovery_type, country_code, date_range, advertiser_id, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashtag_id: (required)
        :param str discovery_type: (required)
        :param str country_code: (required)
        :param str date_range: (required)
        :param str advertiser_id: (required)
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashtag_id', 'discovery_type', 'country_code', 'date_range', 'advertiser_id', 'access_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discovery_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashtag_id' is set
        if ('hashtag_id' not in params or
                params['hashtag_id'] is None):
            raise ValueError("Missing the required parameter `hashtag_id` when calling `discovery_detail`")  # noqa: E501
        # verify the required parameter 'discovery_type' is set
        if ('discovery_type' not in params or
                params['discovery_type'] is None):
            raise ValueError("Missing the required parameter `discovery_type` when calling `discovery_detail`")  # noqa: E501
        # verify the required parameter 'country_code' is set
        if ('country_code' not in params or
                params['country_code'] is None):
            raise ValueError("Missing the required parameter `country_code` when calling `discovery_detail`")  # noqa: E501
        # verify the required parameter 'date_range' is set
        if ('date_range' not in params or
                params['date_range'] is None):
            raise ValueError("Missing the required parameter `date_range` when calling `discovery_detail`")  # noqa: E501
        # verify the required parameter 'advertiser_id' is set
        if ('advertiser_id' not in params or
                params['advertiser_id'] is None):
            raise ValueError("Missing the required parameter `advertiser_id` when calling `discovery_detail`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `discovery_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'hashtag_id' in params:
            query_params.append(('hashtag_id', params['hashtag_id']))  # noqa: E501
        if 'discovery_type' in params:
            query_params.append(('discovery_type', params['discovery_type']))  # noqa: E501
        if 'country_code' in params:
            query_params.append(('country_code', params['country_code']))  # noqa: E501
        if 'date_range' in params:
            query_params.append(('date_range', params['date_range']))  # noqa: E501
        if 'advertiser_id' in params:
            query_params.append(('advertiser_id', params['advertiser_id']))  # noqa: E501

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/discovery/detail/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def discovery_trending_list(self, discovery_type, advertiser_id, access_token, **kwargs):  # noqa: E501
        """Get popular hashtags. [Trending List](https://business-api.tiktok.com/portal/docs?id=1825119032526849)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_trending_list(discovery_type, advertiser_id, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str discovery_type: (required)
        :param str advertiser_id: (required)
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param str country_code:
        :param str category_name:
        :param str date_range:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.discovery_trending_list_with_http_info(discovery_type, advertiser_id, access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.discovery_trending_list_with_http_info(discovery_type, advertiser_id, access_token, **kwargs)  # noqa: E501
            return data

    def discovery_trending_list_with_http_info(self, discovery_type, advertiser_id, access_token, **kwargs):  # noqa: E501
        """Get popular hashtags. [Trending List](https://business-api.tiktok.com/portal/docs?id=1825119032526849)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_trending_list_with_http_info(discovery_type, advertiser_id, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str discovery_type: (required)
        :param str advertiser_id: (required)
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param str country_code:
        :param str category_name:
        :param str date_range:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['discovery_type', 'advertiser_id', 'access_token', 'country_code', 'category_name', 'date_range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discovery_trending_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'discovery_type' is set
        if ('discovery_type' not in params or
                params['discovery_type'] is None):
            raise ValueError("Missing the required parameter `discovery_type` when calling `discovery_trending_list`")  # noqa: E501
        # verify the required parameter 'advertiser_id' is set
        if ('advertiser_id' not in params or
                params['advertiser_id'] is None):
            raise ValueError("Missing the required parameter `advertiser_id` when calling `discovery_trending_list`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `discovery_trending_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'discovery_type' in params:
            query_params.append(('discovery_type', params['discovery_type']))  # noqa: E501
        if 'country_code' in params:
            query_params.append(('country_code', params['country_code']))  # noqa: E501
        if 'category_name' in params:
            query_params.append(('category_name', params['category_name']))  # noqa: E501
        if 'date_range' in params:
            query_params.append(('date_range', params['date_range']))  # noqa: E501
        if 'advertiser_id' in params:
            query_params.append(('advertiser_id', params['advertiser_id']))  # noqa: E501

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/discovery/trending_list/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playable_delete(self, access_token, **kwargs):  # noqa: E501
        """Delete a playable ad. [Playable Delete](https://business-api.tiktok.com/portal/docs?id=1737733368940546)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playable_delete(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param PlayableDeleteBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playable_delete_with_http_info(access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.playable_delete_with_http_info(access_token, **kwargs)  # noqa: E501
            return data

    def playable_delete_with_http_info(self, access_token, **kwargs):  # noqa: E501
        """Delete a playable ad. [Playable Delete](https://business-api.tiktok.com/portal/docs?id=1737733368940546)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playable_delete_with_http_info(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param PlayableDeleteBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playable_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `playable_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/playable/delete/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playable_get(self, advertiser_id, access_token, **kwargs):  # noqa: E501
        """Use this endpoint to get a list of playables. [Playable Get](https://business-api.tiktok.com/portal/docs?id=1737732758495234)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playable_get(advertiser_id, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str advertiser_id: (required)
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param str playable_id:
        :param str playable_url:
        :param str playable_name:
        :param str status:
        :param str operation_status:
        :param int page:
        :param int page_size:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playable_get_with_http_info(advertiser_id, access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.playable_get_with_http_info(advertiser_id, access_token, **kwargs)  # noqa: E501
            return data

    def playable_get_with_http_info(self, advertiser_id, access_token, **kwargs):  # noqa: E501
        """Use this endpoint to get a list of playables. [Playable Get](https://business-api.tiktok.com/portal/docs?id=1737732758495234)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playable_get_with_http_info(advertiser_id, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str advertiser_id: (required)
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param str playable_id:
        :param str playable_url:
        :param str playable_name:
        :param str status:
        :param str operation_status:
        :param int page:
        :param int page_size:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['advertiser_id', 'access_token', 'playable_id', 'playable_url', 'playable_name', 'status', 'operation_status', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playable_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'advertiser_id' is set
        if ('advertiser_id' not in params or
                params['advertiser_id'] is None):
            raise ValueError("Missing the required parameter `advertiser_id` when calling `playable_get`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `playable_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'advertiser_id' in params:
            query_params.append(('advertiser_id', params['advertiser_id']))  # noqa: E501
        if 'playable_id' in params:
            query_params.append(('playable_id', params['playable_id']))  # noqa: E501
        if 'playable_url' in params:
            query_params.append(('playable_url', params['playable_url']))  # noqa: E501
        if 'playable_name' in params:
            query_params.append(('playable_name', params['playable_name']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'operation_status' in params:
            query_params.append(('operation_status', params['operation_status']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/playable/get/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playable_save(self, access_token, **kwargs):  # noqa: E501
        """Use this endpoint to save a playable. [Playable Save](https://business-api.tiktok.com/portal/docs?id=1737732203851777)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playable_save(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param PlayableSaveBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playable_save_with_http_info(access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.playable_save_with_http_info(access_token, **kwargs)  # noqa: E501
            return data

    def playable_save_with_http_info(self, access_token, **kwargs):  # noqa: E501
        """Use this endpoint to save a playable. [Playable Save](https://business-api.tiktok.com/portal/docs?id=1737732203851777)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playable_save_with_http_info(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param PlayableSaveBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playable_save" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `playable_save`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/playable/save/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playable_upload(self, access_token, **kwargs):  # noqa: E501
        """You can use this endpoint to upload Playable Ad contents. [Playable Upload](https://business-api.tiktok.com/portal/docs?id=1737730926765057)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playable_upload(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param str advertiser_id:
        :param str file_id:
        :param str playable_package:
        :param str upload_type:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playable_upload_with_http_info(access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.playable_upload_with_http_info(access_token, **kwargs)  # noqa: E501
            return data

    def playable_upload_with_http_info(self, access_token, **kwargs):  # noqa: E501
        """You can use this endpoint to upload Playable Ad contents. [Playable Upload](https://business-api.tiktok.com/portal/docs?id=1737730926765057)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playable_upload_with_http_info(access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :param str advertiser_id:
        :param str file_id:
        :param str playable_package:
        :param str upload_type:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'advertiser_id', 'file_id', 'playable_package', 'upload_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playable_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `playable_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'advertiser_id' in params:
            form_params.append(('advertiser_id', params['advertiser_id']))  # noqa: E501
        if 'file_id' in params:
            form_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'playable_package' in params:
            local_var_files['playable_package'] = params['playable_package']  # noqa: E501
        if 'upload_type' in params:
            form_params.append(('upload_type', params['upload_type']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/playable/upload/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playable_validate(self, advertiser_id, playable_id, access_token, **kwargs):  # noqa: E501
        """Check the status of the playable. [Playable Validate](https://business-api.tiktok.com/portal/docs?id=1737732054892545)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playable_validate(advertiser_id, playable_id, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str advertiser_id: (required)
        :param str playable_id: (required)
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playable_validate_with_http_info(advertiser_id, playable_id, access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.playable_validate_with_http_info(advertiser_id, playable_id, access_token, **kwargs)  # noqa: E501
            return data

    def playable_validate_with_http_info(self, advertiser_id, playable_id, access_token, **kwargs):  # noqa: E501
        """Check the status of the playable. [Playable Validate](https://business-api.tiktok.com/portal/docs?id=1737732054892545)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playable_validate_with_http_info(advertiser_id, playable_id, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str advertiser_id: (required)
        :param str playable_id: (required)
        :param str access_token: Authorized access token. For details, see [Authentication](https://ads.tiktok.com/marketing_api/docs?id=1738373164380162). (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['advertiser_id', 'playable_id', 'access_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playable_validate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'advertiser_id' is set
        if ('advertiser_id' not in params or
                params['advertiser_id'] is None):
            raise ValueError("Missing the required parameter `advertiser_id` when calling `playable_validate`")  # noqa: E501
        # verify the required parameter 'playable_id' is set
        if ('playable_id' not in params or
                params['playable_id'] is None):
            raise ValueError("Missing the required parameter `playable_id` when calling `playable_validate`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `playable_validate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'advertiser_id' in params:
            query_params.append(('advertiser_id', params['advertiser_id']))  # noqa: E501
        if 'playable_id' in params:
            query_params.append(('playable_id', params['playable_id']))  # noqa: E501

        header_params = {}
        if 'access_token' in params:
            header_params['Access-Token'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open_api/v1.3/playable/validate/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
